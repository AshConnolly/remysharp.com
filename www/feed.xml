<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/"><channel><title>remy sharp's b:log</title><atom:link href="https://remysharp.com/feed/" rel="self" type="application/rss+xml"></atom:link><link>https://remysharp.com</link><description>About [code] and all that jazz</description><lastBuildDate>Fri, 18 Sep 2015 15:22:10 +0000</lastBuildDate><language>en-US</language><sy:updatePeriod>hourly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><item><title>The toxic side of free. Or: how I lost the love for my side project (part 5)</title><guid isPermaLink="false">jsbin-toxic-part-5</guid><link>https://remysharp.com/2015/09/18/jsbin-toxic-part-5</link><pubDate>Fri, 18 Sep 2015 15:22:10 +0000</pubDate><description><![CDATA[This is a story about JS Bin. I&#39;ve told one story of JS Bin before, and this is the b-side: the dark side. But remember with everything I share with you, JS Bin is the longest running live pastebin, and it&#39;s not going anywhere. It will continue to run and serve its users. Even the scumbags.]]></description><content:encoded><![CDATA[<p>This is a story about JS Bin. I&#39;ve told one story of JS Bin before, and this is the b-side: the dark side. But remember with everything I share with you, JS Bin is the longest running live pastebin, and it&#39;s not going anywhere. It will continue to run and serve its users. Even the scumbags.</p>
<!--more-->
<p>The story has been broken into 5 parts, released over a series of days.</p>
<ul>
<li><a href="/jsbin-toxic-part-1">Part 1: The start of the DDoS</a></li>
<li><a href="/jsbin-toxic-part-2">Part 2: Spam</a></li>
<li><a href="/jsbin-toxic-part-3">Part 3: Registered users wreaking havoc</a></li>
<li><a href="/jsbin-toxic-part-4">Part 4: The cost</a></li>
<li><a href="/jsbin-toxic-part-5">Part 5: Police</a></li>
</ul>
<h2>Part 5: Police</h2><p><strong><em>Trigger warning: mention of child pornography.</em></strong></p>
<p>I said before that JS Bin Pro really sucked the love out of the project for me, but this part has been a mix of emotions, but it&#39;s definitely the most distressed I&#39;ve been when running JS Bin...</p>
<p>Over the years I&#39;ve had cease and desist emails telling me that I&#39;ve either been hacked or stolen content. I would take my time (through gritted teeth) explaining that JS Bin allowed users to upload their own content, and that this wasn&#39;t something I was trying to do to hurt the company or institution.</p>
<p>Nearly every single time, the content would be removed promptly (usually at the same time as I was responding to explain what JS Bin was), but there&#39;s three occasions that stand out in my memory.</p>
<h3>Evening calls</h3><p>Early 2010, I was doing a lot of client work and when the phone rang at 7pm, I asked Julie (my wife and business partner) to shoo them away and to say that I was unavailable.</p>
<p>I think I was actually having a moment on The Throne when my wife gave a knock on the door. &quot;You need to take this, it&#39;s the Police&quot;.</p>
<p>No one really wants the Police phoning their house.</p>
<p>It wasn&#39;t actually as painful as I would have guessed. The man said he was calling from the London Met. Police, and that he was dealing with a coordinated DDoS attack orchestrated over Facebook due to take place tomorrow evening.</p>
<p>The messages (on Facebook) were using JS Bin as the method of attack (yes, pretty much script kiddies), and to the police officer&#39;s credit, he had done his research on JS Bin and understood that <em>I hadn&#39;t created these bins</em>. He was calling to ask if I could <em>possibly</em> take the links down (yes, we&#39;re <a href="https://twitter.com/soverybritish">So Very British</a>).</p>
<p>Absolutely. Minutes later, the bins were gone. I didn&#39;t hear back again, but it would be the first in a dozen or so (gentle) encounters with the police.</p>
<h3>The worst email I ever received</h3><p>One late evening in 2013, sat on the sofa watching a film, I get an email. As with all webby people that don&#39;t understand that work is supposed to stop at 6pm, I go ahead and get my laptop and read the email.</p>
<p>It&#39;s an email from the Spanish police. Sort of a cease and desist, including two links to JS Bin asking for their immediate take down.</p>
<p>There had been issues in the past where porn had been linked to from JS Bin and it&#39;s constant battle to keep it under control. The email from the Spanish police however, did not warn me as to what was behind the URLs.</p>
<p>I clicked, and my memory is slow motion of what I saw next, and thankfully the internet was also slow to load.</p>
<hr>
<p>Just enough loaded for me to realise that the images contained child pornography, but I closed the tab early and quickly enough for me <em>not</em> to see anything that would scar me for life.</p>
<p>It still makes me sick to think that <em>that</em> kind of content was being hosted by my project.</p>
<p>Using the terminal, I <code>cURL</code>ed the URL down to look for any commonalities between the source of the two JS Bin URLs I had, to immediately add it to the blacklist functionality. &quot;Thankfully&quot;, I did find a commonality, and I was able to block what appeared to be a source for these images. I also went ahead and deleted all records that matched in the database.</p>
<p>It took many days to to get that sickening feeling out of my system. I hate thinking that JS Bin has helped abusers in some way. I&#39;m not sure if I can <em>quite</em> get across in words as to how much this sickens and angers me, even to this day.</p>
<p>On a lighter note...</p>
<h3>&quot;Terrorism&quot;</h3><p>I&#39;ve used inverted quotes around &quot;Terrorism&quot;, because, well they&#39;re not my words, and I&#39;m not 100% certain that JS Bin falls squarely into be used for terrorism. It&#39;s certainly a new area for my project.</p>
<p>Just a few weeks ago, an issue was filed, claiming exactly this:</p>
<p><img src="/images/jsbin-terrorism.png" alt="Terrorism attacks"></p>
<p>The bin that&#39;s referred to was being used to attack the Madison Police web site, apparently organised by Anonymous (I removed the twitter handle &amp; name):</p>
<p><img src="/images/jsbin-anonymous-attack.jpg" alt="Anonymous attacks"></p>
<p>I took down the bin, and added appropriate blacklisting, but also noticed that the issue was filed about 10 <em>days</em> after the attack had taken place!</p>
<h3>It&#39;s part of the job...</h3><p>I&#39;d like to end this section with some parting advice on how JS Bin is better now, but sadly it&#39;s part of the job when you build a site that houses all the crap the internet has to offer. The easier JS Bin makes it so that content can be saved, the more it&#39;ll be used in new ways that causes some kind of trouble.</p>
<p>Obviously the flip side is that JS Bin is open to all, and that includes kids wanting to learn, educators, newbies, &quot;hackers&quot; and more.</p>
<p>But, it would be great, as author of jsfiddle said, if Anonymous could write and use their own pastebin. I mean, they could even <a href="https://github.com/jsbin/jsbin">fork JS Bin</a> for heavens sake!</p>
<p><a href="https://twitter.com/zalun/status/602586249203945472"><img src="/images/jsbin-please-write.png" alt="Please, Anonymous, write your own"></a></p>
<h2>Why carry on?</h2><p>I&#39;ve given this series of posts as a talk a few times now at conferences and meetups, and one question that keeps coming up is:</p>
<blockquote>
<p>Why didn&#39;t you just walk away, and shutdown JS Bin?</p>
</blockquote>
<p>It&#39;s a fair question. The stress from the police related incidents didn&#39;t ever make me consider shutting it down. Even after the Spanish police email (above), I felt more like I had blinkers on and <em>all</em> I could see was the nastiness on the web, but I never considered killing JS Bin.</p>
<p>In fact, it was only when I was dealing with VATMOSS that I gave any serious thought to throwing in the towel. It was probably one of the more stressful working months I&#39;ve experienced, and I don&#39;t kid when I say that VATMOSS has killed up and coming companies in their tracks.</p>
<p>However, with all of the abuse, <strong>I will never throw in the towel</strong>. Here&#39;s why:</p>
<p>I used to search twitter for mentions of &quot;jsbin&quot; and compare to jsfiddle and codepen. Credit to Code Pen, the mentions are usually always in their favour, with individuals showing some truly amazing work. It took me many, many months to realise that twitter was not the measure of JS Bin.</p>
<p>JS Bin&#39;s moto is: <em>hack, learn, fix, teach</em>. JS Bin is about helping other people. It&#39;s one person who is in need, sharing their working with another, and that other person helping, and solving, and teaching. It&#39;s a quiet, personal transaction between two individuals that won&#39;t be announced on twitter, but instead shared in an intimate exchange.</p>
<p><em>That</em> is why JS Bin has been <a href="https://remysharp.com/2008/10/06/js-bin-for-collaborative-javascript-debugging">running for 7 years</a>. That&#39;s why it&#39;ll carry on for another 7 years.</p>
<h2>Finding the love, again</h2><p>I&#39;ve been thinking about this post (and the public talk version of this) for about a year now. I was hesitant because it was so negative and probably comes across a little bitter.</p>
<p>The irony however, is that it&#39;s been a cathartic process. I feel like I&#39;ve got some of the poison out of my system by going through this process.</p>
<p>I realised something important at the end of 2014, and it was the reason I decided to put development on JS Bin on hold: I need to love working on JS Bin. I didn&#39;t at the time. I was working on parts of JS Bin that was full of pressure, I started getting abuse for some of my work, and it was all a bit of a mess.</p>
<p>Since starting these posts, I&#39;ve released new features to JS Bin to all groups of users (anonymous, registered and pro) and have several JS Bin <a href="http://jsbin.com/blog">blog posts</a> in the works. And before I bid you farewell, don&#39;t forget to support JS Bin: <a href="https://jsbin.com/upgrade">go pro</a> or donate <a href="https://gratipay.com/jsbin">regularly</a> or as a <a href="https://www.paypal.me/rem">one off</a>.</p>
<p>As for me? <strong>I&#39;ve started to find my love for my project again.</strong></p>
<p><img src="/images/jsbin-t-shirt.jpg" alt="Hack, learn, fix, teach"></p>
]]></content:encoded></item><item><title>The toxic side of free. Or: how I lost the love for my side project (part 4)</title><guid isPermaLink="false">jsbin-toxic-part-4</guid><link>https://remysharp.com/2015/09/17/jsbin-toxic-part-4</link><pubDate>Thu, 17 Sep 2015 16:53:39 +0000</pubDate><description><![CDATA[This is a story about JS Bin. I&#39;ve told one story of JS Bin before, and this is the b-side: the dark side. But remember with everything I share with you, JS Bin is the longest running live pastebin, and it&#39;s not going anywhere. It will continue to run and serve its users. Even the scumbags.]]></description><content:encoded><![CDATA[<p>This is a story about JS Bin. I&#39;ve told one story of JS Bin before, and this is the b-side: the dark side. But remember with everything I share with you, JS Bin is the longest running live pastebin, and it&#39;s not going anywhere. It will continue to run and serve its users. Even the scumbags.</p>
<!--more-->
<p>The story has been broken into 5 parts, released over a series of days.</p>
<ul>
<li><a href="/jsbin-toxic-part-1">Part 1: The start of the DDoS</a></li>
<li><a href="/jsbin-toxic-part-2">Part 2: Spam</a></li>
<li><a href="/jsbin-toxic-part-3">Part 3: Registered users wreaking havoc</a></li>
<li><a href="/jsbin-toxic-part-4">Part 4: The cost</a></li>
<li><a href="/jsbin-toxic-part-5">Part 5: Police</a></li>
</ul>
<h2>Part 4: The cost</h2><p>In July 2014, JS Bin <em>finally</em> landed <a href="https://jsbin.com/upgrade">Pro accounts</a>. The aim of this would be for JS Bin to eventually be self-sustaining. It&#39;s been running out of my pocket for the previous 6 years (for server and related costs), and development and design (2014 excluded) had been lovingly &quot;donated&quot; by myself and Danny (who is responsible for the design).</p>
<p>In 2014, I decided to give JS Bin a full shot, and employed two (amazing) developers, <a href="https://twitter.com/electric_g">Giulia Alfonsi</a> and <a href="https://twitter.com/allouis_">Fabien O&#39;Carroll</a> to work with me full time on JS Bin.</p>
<p>At the end of May 2015 (10 months after launching pro) the income JS Bin has provided has only <em>just</em> covered operating costs for the previous year. That&#39;s awesome and terrible at the same time. Before &quot;pro&quot; it was making a 100% loss - so that&#39;s something, <em>but</em> it doesn&#39;t even touch the edges of what I had hoped it would return (and I wasn&#39;t even being optimistic, as any British person would expect).</p>
<p>But there is a cost to taking money...</p>
<h3>VATMOSS</h3><p><a href="https://remysharp.com/2014/12/16/vatmoss">VATMOSS</a> was a change to the way that VAT is processed in the EU. Unfortunately, the geniuses behind the change at the EU (or whatever rock they hide under) hadn&#39;t quite thought the whole thing through. The information was thin, convoluted, confusing and not really accessible to small companies like myself and many others.</p>
<p>This is the landing page for the EU European Commission&#39;s Digital Market:</p>
<p><img src="/images/jsbin-eu.jpg" alt="EU"></p>
<p>The European Commission is the EU&#39;s executive body. It represents the interests of the European Union as a whole (not the interests of individual countries).</p>
<p>The slogan: <strong>bringing down barriers to unlock online opportunities.</strong> What a crock of shit. VATMOSS has single handedly killed off new business and for others made it <em>more</em> difficult for others do to their commerce. It&#39;s worth reading around the back story of VATMOSS, and even in mid-2015, it&#39;s there&#39;s a fight for change going on.</p>
<p>The VATMOSS reporting is now (as of 1-Jan 2015) a requirement for <em>anyone</em> in the EU selling digital services or goods (i.e. ebooks, apps, subscriptions...JS Bin Pro subscriptions), and there was (and is) the threat of fines if you don&#39;t report and pay on the sales correctly.</p>
<p>VATMOSS requires that you charge the VAT of the country of your customer. i.e. if the customer is English, 20%, if they are Danish 25%. Also, you have to capture <em>three proofs</em> that you&#39;re charging the right country (it&#39;s actually 2 proofs, but you need a 3rd backup proof). If these are all in conflict... ¯\<em>(ツ)</em>/¯</p>
<p>The last month of 2014 were riddled with stress from the VATMOSS changes that I had to complete on JS Bin. It took weeks to try to fully understand VATMOSS, and what exactly would be required to satisfy requirements.</p>
<p>In the end, the development time was about 2 week for both myself &amp; Fabien (employed to work on JS Bin) and about two weeks of research, filing and accounting time on Julie&#39;s part (my business partner - and wife).</p>
<p>Estimated business cost: £3,500.</p>
<p><img src="/images/jsbin-vatmoss-filed.png" alt="VATMOSS filed"></p>
<p>£11.70p. VATMOSS, the stress of it all, to collect pennies from <strong>seven people</strong>. It would have been cheaper to book flights to each of their addresses to collect the cash by hand. <a href="https://twitter.com/search?q=from%3Arem%20%23vatmoss&amp;src=typd">It was not fun</a>.</p>
<h3>Fraud credit cards</h3><p>Since pro accounts initially cost £6 for month, it turns out that this is low enough that it won&#39;t send red flags to stolen cards.</p>
<p>This means that JS Bin was being used as a testing ground for stolen card numbers. If the card went through then they would use the card. Unbeknownst to me, the user wouldn&#39;t do <em>anything</em> on JS Bin, and I&#39;d be on my merry way thinking I had a new pro sign up.</p>
<p>Eventually, the rightful owner would thing, &quot;What&#39;s this &#39;JS BIN PRO MONTHLY&#39; doing on my statement&quot;, follow up with their bank, and raise a fraud complaint.</p>
<p>I can&#39;t win the complaint. The card was stolen, the £6 belongs to the original card owner, no question. But! If there&#39;s a dispute on Stripe, there&#39;s transaction fees for reversing charges. £15.34 in fact. Since I know I&#39;ll lose the dispute, <strong>it&#39;s cost me, £21.54 to allow some shithead to use JS Bin as a stolen card testing facility</strong>.</p>
<p><img src="/images/jsbin-stripe-fraud.png" alt="Stripe disputes"></p>
<p>My process now is that I&#39;ve taken to checking each and every individual sign up and their bins to see if they look spammy. I caught my first fraud card and reported on 13-April 2014. Not a huge success but very satisfying to know I&#39;ve avoided the charge. Woot!</p>
<h3>Pro</h3><p>Pro accounts was never the intention when I launched JS Bin back in 2008. I&#39;d made stupid efforts to avoid having user accounts for quite a few years, but insisted that it should be 100% free.</p>
<p>I don&#39;t know why.</p>
<p>During 2013, I attended a lot of events where individuals kept coming up to me asking how do they pay for JS Bin, or why don&#39;t I add Pro, or explained that the only reason they used CodePen over JS Bin was that they were paying (i.e. the perceived security of data from the business exchange). The more I considered it, the more I realised I wanted to do JS Bin full time, <strong>and work on something I loved</strong>.</p>
<p>I ran some numbers based on registered users in the database, and factored for about 20% spam/idle users, and then put my aims at 1% conversion. It didn&#39;t seem like much.</p>
<p>The problem was: <em>that&#39;s all I did</em>.</p>
<p>There was no business plan. There was no business development team. There was no marketing plan. There was no deadlines. There were no aims.</p>
<p><img src="/images/jsbin-launch-failure.jpg" alt="&quot;I-565 at Space and Rocket Center&quot; by Nhlarry. Licensed under CC BY-SA 3.0 via Wikimedia Commons - https://commons.wikimedia.org/wiki/File:I-565_at_Space_and_Rocket_Center.jpg#/media/File:I-565_at_Space_and_Rocket_Center.jpg"></p>
<p>So there my amazing product sat. To others it was ready to launch, but I was still heads down focused on the last 1% stretch, so it was parked.</p>
<p>I&#39;d had the odd conversation that suggested I might be able to get funding from the government (as JS Bin is a tool primarily for learning), but I&#39;d shy away from the idea of having to do <em>&quot;business&quot;</em> stuff. It scared me a little too.</p>
<p>Launching became the well know problem of chasing the end of the rainbow. Striving for the perfect, polished product before everyone else had access to it. Sure we had some alpha users in there, but they weren&#39;t invested in JS Bin any more than you are, so feedback came when they had some time.</p>
<p>This went on for months and months. All the while JS Bin isn&#39;t making money, my entire company is focusing it&#39;s time on JS Bin and <em>not</em> producing any cash flow from any other sources.</p>
<p>Pro (eventually) went live on <strong>23 July 2014</strong>. And the first wave of registrations was an amazing feeling. In fact, one user (<a href="https://twitter.com/dcgauld">David Gauld</a>, who actually worked for me doing the <a href="http://leftlogic.com">Left Logic</a> redesign and built a fair amount of <a href="https://confwall.com">confwall</a>) was the first to go pro catching the <a href="https://github.com/jsbin/jsbin/commit/814251af40334990cf2490dc45d88ba246542f2f#diff-0aab8fc4f1799dc88c8d29729b719d87L118">commit landing in Github</a>, even before I had announced it - a cool side effect of the open source.</p>
<p>Users did come, but looking back, it really wasn&#39;t very much if you consider the costs of running JS Bin, let alone paying for development, and then look at what the monthly (or yearly subscriptions) got us. A total of 42 upgrades in the first week (26 were on the first day).</p>
<p><img src="/images/jsbin-pro-week1.png" alt="JS Bin Stripe report, week 1"></p>
<p>I had always tucked money aside for a rain day (actually rainy year), and yeah, I can look back and say &quot;sure, I took a shot&quot; - but it came at a pretty penny.</p>
<p>The next 6 months I lost my love for the project. Very simply: any new development had to justify its existence and its demand on my time. I did continue development until the end of 2014, but by that point, all love had been sucked dry and I needed a break. JS Bin is solid enough that it can run without day to day attention and I could return to client work and <em>try</em> to recover my now sad looking business bank balance.</p>
<h3>Plan, and know what your users <em>need</em></h3><p>There were two major problems that hurt the success of JS Bin Pro.</p>
<p>The first was the nearly zero planning, and strange fear of business, marketing and actually making money. I often associate with the underdog, and those users looking for free access. But I run a service that&#39;s abused from all directions and every new user is more of a burden than growth.</p>
<p>Very simply put: should I want to run a service for 100 paying users or for 100,000 non-paying users? Me? Now, I realise it&#39;s the 100 paying users, because, honestly, I&#39;ve got bills that I want to pay. I&#39;d rather pay those bills building something I love rather than building something I begrudge.</p>
<p>I lost <em>a lot</em> of love in this area of working with JS Bin. I can take the spam, and the junk, but this part of JS Bin required that the project actually raises money to support itself - and constantly feeling that I <em>had</em> to deliver some part of code for JS Bin to continue...it just didn&#39;t work for me.</p>
<p>The second, major issue was that I had hoped, naively, that the web community will swoop in and pony up some cash. But the bottom line was JS Bin Pro had nothing that users <em>needed</em>. Sure, <em>now</em> it has asset uploads and other features, but at the time, there wasn&#39;t anything users <em>really needed</em>.</p>
<p>I pay for my Github account because I <em>need</em> private repos. I pay for Gmail, because I <em>need</em> real business email accounts. I pay for Dropbox because I <em>need</em> the extra space.</p>
<p>With JS Bin, <strong>everything users <em>need</em> is given away and open source. That&#39;s honourable, but doesn&#39;t pay the mortgage.</strong></p>
<p>The next time around, with products like <a href="https://confwall.com">Confwall</a>, I launched <em>as soon</em> as it was usable. I offer a free area, but I make sure that you can&#39;t get to the stuff you <em>need</em> unless you pay. The way it should be! In fact, at time of writing this post, Confwall still doesn&#39;t take payment online - I cut that part to launch as early as possible, and we handle payments via email &amp; invoices.</p>
<hr>
<p><a href="/jsbin-toxic-part-5">Part 5</a> sees our conclusion and tells of the police encounters I&#39;ve had, along with the worst email I&#39;ve ever received.</p>
]]></content:encoded></item><item><title>The toxic side of free. Or: how I lost the love for my side project (part 3)</title><guid isPermaLink="false">jsbin-toxic-part-3</guid><link>https://remysharp.com/2015/09/16/jsbin-toxic-part-3</link><pubDate>Wed, 16 Sep 2015 16:11:38 +0000</pubDate><description><![CDATA[This is a story about JS Bin. I&#39;ve told one story of JS Bin before, and this is the b-side: the dark side. But remember with everything I share with you, JS Bin is the longest running live pastebin, and it&#39;s not going anywhere. It will continue to run and serve its users. Even the scumbags.]]></description><content:encoded><![CDATA[<p>This is a story about JS Bin. I&#39;ve told one story of JS Bin before, and this is the b-side: the dark side. But remember with everything I share with you, JS Bin is the longest running live pastebin, and it&#39;s not going anywhere. It will continue to run and serve its users. Even the scumbags.</p>
<!--more-->
<p>The story has been broken into 5 parts, released over a series of days.</p>
<ul>
<li><a href="/jsbin-toxic-part-1">Part 1: The start of the DDoS</a></li>
<li><a href="/jsbin-toxic-part-2">Part 2: Spam</a></li>
<li><a href="/jsbin-toxic-part-3">Part 3: Registered users wreaking havoc</a></li>
<li><a href="/jsbin-toxic-part-4">Part 4: The cost</a></li>
<li><a href="/jsbin-toxic-part-5">Part 5: Police</a></li>
</ul>
<h2>Part 3: Registered users wreaking havoc</h2><p>Originally JS Bin was 100% anonymous. I liked that. But after about a year (or so...I forget), there was clearly an important feature missing: people couldn&#39;t recall their old bins.</p>
<p>Duh. Obviously. It&#39;s <em>anonymous</em>. But that didn&#39;t really fly for an answer. Before the full version 3 rewrite (from PHP to Node), I implemented a simple system that you could &quot;register&quot; your name and &quot;key&quot; as your token. This meant that advanced users would know how to recall their bins (so long as this special cookie was in place).</p>
<p>When I realised I had implemented user sign-in in quite possibly the crapest way, version 3, new, clean, slick JS Bin, came with proper sign-in, register and password reminder.</p>
<p>With one fatal flaw: there were zero checks on your account. No email authentication, no captcha (I hate crapchas), no nothing. And registered users didn&#39;t have <em>any</em> limitations on their bins - the public output would remain public.</p>
<p>This, unknowingly to me, lead to an increase in registrations. Yay! No. Not yay. These were not the kinds of folk you wanted in your system. What&#39;s worse, is these users would create multiple accounts to create multiple bins, all of which were not limited. They&#39;d still be limited by the blacklisting, but blacklisting is simple and probably doesn&#39;t even catch 20% of the junk.</p>
<h3>Grinding to a total halt</h3><p>On the morning of March 26th, 2015, I was solo parenting looking after my awesome little ones, when I started noticing reports on JS Bin that something might be very wrong.</p>
<p><img src="/images/seren-family.jpg" alt="The Sharps"></p>
<p>Earlier I mentioned that the bins went from 10 million to 15 million in around 6 months (or so). Our registration rate was also climbing insanely quickly. The net effect of this: storing more content.</p>
<p>Storage is cheap, right? Sure is. JS Bin stores it&#39;s database on a 100GB drive. It&#39;s <em>just text</em> for heavens sake.</p>
<p>JS Bin&#39;s database ran out of disk space. All of it. Gone. So much so, that I <em>couldn&#39;t delete data</em>. (I think) because MySQL needs to create a tmp file to run queries, that since there was literally no disk space, it couldn&#39;t create the tmp file to delete the junk bins that were seemingly coming in faster and faster.</p>
<p>The weird thing was that JS Bin still worked. It could recall bins and you could use JS Bin, you <em>just couldn&#39;t save</em> (though, that&#39;s kind of a problem...).</p>
<p>When you&#39;re solo parenting, though, there&#39;s no support around and there was no way I was going to (or even <em>could</em>) abandon the kids to work on solving this issue. I had to suck it up, and trying to focus entirely on the kids and ignore the problem until my wife returned home. I did manage to put out a <a href="https://twitter.com/rem/status/581004721785167872">cry</a> for <a href="https://github.com/jsbin/jsbin/issues/2320">help</a> which had lots of lovely support, but support doesn&#39;t fix fucked disks.</p>
<p>Though, eventually, a few hours later, I managed to swap in a 400GB disk to the AWS database. This solved the issue right away, but the source of the problem was still wide open.</p>
<h3>If you (still) can&#39;t play nice...</h3><p>Wide open registrations was always a stupid idea. An entirely anonymous web site, given JS Bin&#39;s purpose, is also a stupid idea.</p>
<p>In the end the <em>only</em> way to register with JS Bin <em>now</em> is via GitHub. I don&#39;t like this, but it does lean on GitHub&#39;s verification process. It doesn&#39;t kill the issue 100%, but it reduced our sign-up rate significantly and we only have the odd one arsehat come through (which I also then report back to GitHub).</p>
<hr>
<p>In <a href="/jsbin-toxic-part-4">part 4</a>, I&#39;ll talk about the costs of running JS Bin, and how pro failed to save the day.</p>
]]></content:encoded></item><item><title>The toxic side of free. Or: how I lost the love for my side project (part 2)</title><guid isPermaLink="false">jsbin-toxic-part-2</guid><link>https://remysharp.com/2015/09/15/jsbin-toxic-part-2</link><pubDate>Tue, 15 Sep 2015 16:21:42 +0000</pubDate><description><![CDATA[This is a story about JS Bin. I&#39;ve told one story of JS Bin before, and this is the b-side: the dark side. But remember with everything I share with you, JS Bin is the longest running live pastebin, and it&#39;s not going anywhere. It will continue to run and serve its users. Even the scumbags.]]></description><content:encoded><![CDATA[<p>This is a story about JS Bin. I&#39;ve told one story of JS Bin before, and this is the b-side: the dark side. But remember with everything I share with you, JS Bin is the longest running live pastebin, and it&#39;s not going anywhere. It will continue to run and serve its users. Even the scumbags.</p>
<!--more-->
<p>The story has been broken into 5 parts, released over a series of days.</p>
<ul>
<li><a href="/jsbin-toxic-part-1">Part 1: The start of the DDoS</a></li>
<li><a href="/jsbin-toxic-part-2">Part 2: Spam</a></li>
<li><a href="/jsbin-toxic-part-3">Part 3: Registered users wreaking havoc</a></li>
<li><a href="/jsbin-toxic-part-4">Part 4: The cost</a></li>
<li><a href="/jsbin-toxic-part-5">Part 5: Police</a></li>
</ul>
<h2>Part 2: Spam</h2><p>Who doesn&#39;t love a filthy dose of spam with their product? Let&#39;s picture exactly what JS Bin is: a place that people can <em>anonymously</em> create public web pages.</p>
<p>So...yeah...I guess I should have known I was asking for trouble.</p>
<p>JS Bin, as of April 2015, has well over 15,000,000 bins. It crossed 10 million bins late last year, so that number has been accelerating. It should. That&#39;s what growth is about. But I had to face it, there&#39;s no way there&#39;s 5 million new bins with everyone learning the magic of the web stack. There&#39;s going to be some spam in there.</p>
<p><img src="/images/spam.jpg" alt="https://www.flickr.com/photos/the-lobster/4767649914"></p>
<!-- photo via: https://www.flickr.com/photos/the-lobster/4767649914 -->
<h3>Affiliate spam</h3><p>No, not spam that I, or JS Bin are affiliated with! At some point in 2014, I searched Google with &quot;site:jsbin.com&quot; just to see what awesome content existed. Sadly, Google&#39;s only reply, and pages of reply, was this &quot;affiliate spam&quot;.</p>
<p>Bear with me: it&#39;s a page that contains a tonne of links that usually entices the reader to click through for some kind of random product. Maybe a DVD or a CD containing the secrets to earning your first million or some such nonsense.</p>
<p>In some cases, since I have admin access to JS Bin, I would just delete the bin. But it was (and is) like playing whack-a-mole. You delete one, and immediately find another - partly also because with JS Bin, you&#39;re deleting a revision, and not the whole collection of bins (I&#39;ve yet to develop that).</p>
<p>So in this case, I would head to the database and run dangerous manual queries to delete all the bins with the offending URL. Thankfully, in the 15 million rows, I had the good sense to add an index early on to the URL field, so it&#39;s quick and doesn&#39;t lock up the table.</p>
<h3>SEO spam</h3><p>I don&#39;t really understand what this is, but it&#39;s definitely a thing. Similar to the affiliate junk, SEO spam would just contain an insane amount of links to web sites. I still don&#39;t understand it, but it&#39;s definitely nefarious.</p>
<h3>Phishing</h3><p>Yay, phishing. Phishing is actually the very first type of abuse I ever came across on JS Bin. I don&#39;t remember who reported it to me, but at some point, someone was trying to phish the Habbo.com homepage.</p>
<p>It&#39;s why, even today, the <a href="https://github.com/jsbin/jsbin/blob/771f007f3f49bbe3931a9818be75ad3e6edcf7fa/config.default.json#L66-L70"><em>public</em> config</a> for JS Bin contains a default blacklist for <code>habbo.com</code> and <code>processform.cgi</code>. The blacklist prevents the bin from being saved. Everything works, but it just silently fails to save.</p>
<p>In production the blacklisting is much much larger these days, and includes frankly stupid stuff like <code>kardishain</code>, <code>Clickbank</code> and snippets of nasty code like <code>...|63|0A|27|73|70|2E|2F|...</code> which aims to prevent code that&#39;s used in some kinds of attacks.</p>
<p>But yeah: whack-a-mole.</p>
<h3>Link hiding</h3><p>The last type of spam that appeared in JS Bin is using JS Bin as a link sharing site to the dark and shitty side of the web. Arsehats (the nasty users, as I like to call them) would use JS Bin to redirect using <code>top.location=&quot;http://arsehat.com&quot;</code>. Then, using the full output URL, it would be shared on networks like Twitter and Facebook.</p>
<p>Since &quot;arsehat.com&quot; was already blocked on Facebook and Twitter, but JS Bin wasn&#39;t, it&#39;s an efficient way to share links to bad places, and hide under JS Bin.</p>
<p>It&#39;s kinda depressing that when I search Twitter for &quot;jsbin.com&quot;, it would mostly yield weirdos sharing things like webcams to their toilet fetish funsies.</p>
<h3>If you can&#39;t play nice...</h3><p>In August 2014, I made the hard decision that I would have to reduce JS Bin&#39;s functionality if it was going to continue to positively contribute to the web, instead of flooding it sludge filled spam.</p>
<p>I limited the full output <em>for anonymous bins</em> to last 90 minutes, then it would automatically revert to the edit view. Since the edit view is compiled using JavaScript, it had no use to SEO indexing. The live output <code>iframe</code> is also protected with a <code>sandbox</code> attribute that prevents location redirects, so the link hiding issue also (mostly) went away.</p>
<p>Finally, all output views (i.e. the full output without the &quot;JS Bin editor&quot; bit) include the <code>X-Robots-Tag: nofollow</code> header - which is the new way of doing <code>robots.txt</code>. This seems to have helped stamp out the &quot;SEO&quot; use of JS Bin.</p>
<p>But it didn&#39;t end there...</p>
<hr>
<p>Return for <a href="/jsbin-toxic-part-3">part 3</a>: how the registered users, who I thought were the goodies, wreaked havoc.</p>
]]></content:encoded></item><item><title>The toxic side of free. Or: how I lost the love for my side project (part 1)</title><guid isPermaLink="false">jsbin-toxic-part-1</guid><link>https://remysharp.com/2015/09/14/jsbin-toxic-part-1</link><pubDate>Mon, 14 Sep 2015 15:55:55 +0000</pubDate><description><![CDATA[This is a story about JS Bin. I&#39;ve told one story of JS Bin before, and this is the b-side: the dark side. But remember with everything I share with you, JS Bin is the longest running live pastebin, and it&#39;s not going anywhere. It will continue to run and serve its users. Even the scumbags.]]></description><content:encoded><![CDATA[<p>This is a story about JS Bin. I&#39;ve told one story of JS Bin before, and this is the b-side: the dark side. But remember with everything I share with you, JS Bin is the longest running live pastebin, and it&#39;s not going anywhere. It will continue to run and serve its users. Even the scumbags.</p>
<!--more-->
<p>The story has been broken into 5 parts, released over a series of days.</p>
<ul>
<li><a href="/jsbin-toxic-part-1">Part 1: The start of the DDoS</a></li>
<li><a href="/jsbin-toxic-part-2">Part 2: Spam</a></li>
<li><a href="/jsbin-toxic-part-3">Part 3: Registered users wreaking havoc</a></li>
<li><a href="/jsbin-toxic-part-4">Part 4: The cost</a></li>
<li><a href="/jsbin-toxic-part-5">Part 5: Police</a></li>
</ul>
<h2>Back story</h2><p>I was working mostly out of my bedroom in Brighton (since our flat was small) whilst still working full time in London amongst other designers and developers. jQuery was still new and I&#39;d often be asked in written English why some bit of code didn&#39;t work (the explanation often lacked the <em>actual</em> code!).</p>
<p>I knew I needed something that contained code and that would pare the issue down to it&#39;s smallest form, so I could investigate.</p>
<p><img src="/images/office-2009.jpg" alt="2009 office"></p>
<p>JS Bin was launched on <a href="https://remysharp.com/2008/10/06/js-bin-for-collaborative-javascript-debugging">September 2008</a> as my solution to needing to see a pastebin with an interactive component.</p>
<p>It was posted up on Ajaxian and had a good reception. I had also started seeding it by answering Stack Overflow questions and linking to live demos in JS Bin. To this day this method was a great success - particularly as Stack Overflow went on to create their own live pastebin support (though IMHO, it looks like a poor implementation of jsfiddle).</p>
<p>The concept from day one was simple: you could, anonymously, create a web page for anyone to view and edit (creating a new &quot;snapshot&quot;).</p>
<p>Initially around a 4 hour hack with 2 PHP files (<a href="https://github.com/jsbin/jsbin/blob/e895c32089ac1bd310b5d91aecabda219f2eccea/sandbox.php">sandbox.php</a> and <a href="https://github.com/jsbin/jsbin/blob/e895c32089ac1bd310b5d91aecabda219f2eccea/index.php">index.php</a>) and one very simple MySQL database. Over time it would become more complex, with many many more features - mostly tucked away a very sleek design (by <a href="https://twitter.com/yandle">Danny Hope</a>).</p>
<p>JS Bin grew and grew over the years. I&#39;ve gone through a couple of major rewrites and now settled on Node for it&#39;s backend (though still MySQL) on an AWS based architecture.</p>
<p>Somehow, JS Bin was the first to suffer real abuse, but I know jsfiddle has come under fire pretty heavily in recent years. I&#39;m unsure if CodePen has really had much, if any abuse <em>yet</em> (possibly because it&#39;s the newbie on the block).</p>
<hr>
<p>This is a story, and not a happy one, of some of the trials and tribulations that left my little open source project with a toxic taste in it&#39;s mouth.</p>
<p>Please also bear in mind throughout these tales, that I am the sole sysadmin, and my knowledge, though workable, is limited - as are the pennies in my pocket, so <em>no</em> there&#39;s no load balancers and heavy duty sentinel machines that protect my system from madness. It&#39;s <em>just</em> me.</p>
<hr>
<h2>Part 1: The start of the DDoS</h2><p>I don&#39;t recall if I had seen any abuse on JS Bin before this point in time, but in late April 2012, I received an email requesting my attention:</p>
<p><img src="/images/jsbin-first-ddos.png" alt="First DDoS"></p>
<p>I was travelling at the time and running workshops, and bin deletion was a manual job, but as soon as I could I investigated and removed the bin (today it resolves to a 404).</p>
<p>The bin was a <em>script kiddie&#39;s</em> paradise: enter the URL of your target, and it would repeatedly create image requests to the target. In fact, this kind of page would be the source of quite a few incidents over the years.</p>
<p>The thing that bugged me, and still bugs me to this day, was: <em>why do they host this on JS Bin? They have to share a link, why not share an HTML file?</em></p>
<p>This would mean that JS Bin wouldn&#39;t be caught in the middle. ¯\<em>(ツ)</em>/¯</p>
<h3>The alternative DDoS: self-attacks by the moronic</h3><p>Thankfully the self-attacks happened <em>after</em> JS Bin had moved to Node, otherwise I&#39;m not sure it would survive.</p>
<p>In truth though, JS Bin does not always remain calm during these attacks. <em>Self-attacks?</em> Yep. It&#39;s when the script kiddie page asks for a URL, but the page doesn&#39;t do any validation on the URL, and, since it takes very little brain cells to want to orchestrate the attack, some moron leaves off the preceding &quot;http://&quot; part in their attack.</p>
<p>The result? They start to attach URLs like <a href="http://jsbin.com/abcef/some-site-the-user-hates.com">http://jsbin.com/abcef/some-site-the-user-hates.com</a> - which does actually go through JS Bin&#39;s sub-system.</p>
<p>Sometimes, not always, but sometimes it results in this, and that&#39;s when it gets really hairy...</p>
<p><img src="/images/jsbin-502.jpg" alt="JS Bin 502"></p>
<h3>&quot;Always strike when they&#39;re sleeping...&quot;</h3><p><img src="/images/jsbin-twitter-reports.jpg" style="width: 50%; display: block; float: right" alt="Twitter reports"></p>
<p>Okay, so this might not be some secret mantra that arse hats always attack whilst the sys-admin sleeps, it might actually be that since I&#39;m based in the UK, most attacks happen during central America midday time...so yeah, I&#39;m sleeping and I wake up (around 6am) to twitter reports of JS Bin being unreachable.</p>
<p>It&#39;s pretty disheartening when most of the @replies to the product you&#39;ve poured your soul into are: the shit has hit the fan!</p>
<div style="clear:both"></div>

<h3>When there&#39;s an endless supply of shit</h3><p>I actually have a <a href="http://jsbin.com/help/runbook/slow-response">runbook</a> for when this happens. When JS Bin comes under heavy fire, whatever that attack looks like. Most of the time the solution would be to restart JS Bin. However, it would also tend to come from a few specific IP addresses.</p>
<p>I do also get AWS CloudWatch alerts when the CPU on JS Bin machines run high (for a number of seconds). The constant hitting traffic against the node process (yes...a single process) results in the process being constantly &quot;busy&quot;, i.e. high CPU rate, so there <em>are</em> alarms I get.</p>
<p>So the runbook would scan the latest 200 lines (or so) of the access log and spit out the unique IPs and the count of their hits. From there, would go about <code>iptable</code>&#39;ing the addresses (i.e. blocking the IP address).</p>
<p>One night got <em>so bad</em> that I had to write a script in a cronjob that would repeatedly scan the logs for any IP hitting JS Bin more than some arbitrary figure, and it would ban them.</p>
<p>It did resolve the issue. It also randomly blocked many, many more regular users who were keen to let me know via Twitter and the GitHub issues (which is a good thing, I&#39;m not complaining - it just sucks for them that they got caught in the cross fire).</p>
<h3>fail2ban</h3><p>Eventually I cottoned on to using <a href="http://www.fail2ban.org/wiki/index.php/Main_Page">fail2ban</a> to protect my machine from repeated hits from a specific IP address. Since installing around late 2014, it&#39;s massively reduced the attacks of this nature.</p>
<p>The unfortunate side effect is that it also blocks out classroom use of JS Bin, since JS Bin sends XHR writes <em>all the time</em>, fail2ban sees this all coming from a single IP, and goes ahead and denies the eager young class from learning.</p>
<p>In this situation, classes have got in touch via any channel possible, and I&#39;ve white listed their IP address manually. I know it&#39;s caught some people out, but, sadly, this is the cost I&#39;ve had to pay.</p>
<h3>null</h3><p>One other trick that I added to JS Bin, is that the iframe that the output is rendered into is forced to resolve to <a href="http://null.jsbin.com">http://null.jsbin.com</a>, which in turn returns a <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5">204</a> (this is done by injecting a <code>base</code> tag into the preview).</p>
<p>This small change also reduced a huge number of requests, particularly when users are putting placeholder images in their bins, and the bin re-renders automatically on every key press. The preview might load 10 blank images, but &quot;blank&quot; actually meant it didn&#39;t have a source, which means it was hitting JS Bin.</p>
<p>Now, the output simply resolves to null.jsbin.com, is responded to using nginx and never touches JS Bin.</p>
<hr>
<p>Come back for <a href="/jsbin-toxic-part-2">part 2</a>: the trials of dealing with spam in it&#39;s various forms!</p>
]]></content:encoded></item><item><title>A ship at my side spreads her white sails</title><guid isPermaLink="false">a-ship-at-my-side-spreads-her-white-sails</guid><link>https://remysharp.com/2015/09/02/a-ship-at-my-side-spreads-her-white-sails</link><pubDate>Wed, 02 Sep 2015 22:28:29 +0000</pubDate><description><![CDATA[&quot;I am standing upon the seashore. A ship at my side spreads her white sails to the morning breeze and starts for the blue ocean. She is an object of beauty and strength. I stand and watch her until at length she hangs like a speck of white cloud just where the sea and sky come to mingle with each other.
Then some one at my side says: &#39;There, she is gone!&#39;
&#39;Gone where?&#39;
Gone from my sight. That is all. She is just as large in mast and hull and spar as she was when she left my side and she is just as able to bear her load of living freight to her destined port.
Her diminished size is in me, not in her. And just at the moment when some one at my side says: &#39;There, she is gone!&#39; there are other eyes watching her coming, and other voices ready to take up the glad shout: &#39;Here she comes!&#39;
— Henry Van Dyke]]></description><content:encoded><![CDATA[<p><em>&quot;I am standing upon the seashore. A ship at my side spreads her white sails to the morning breeze and starts for the blue ocean. She is an object of beauty and strength. I stand and watch her until at length she hangs like a speck of white cloud just where the sea and sky come to mingle with each other.</em></p>
<p><em>Then some one at my side says: &#39;There, she is gone!&#39;</em></p>
<p><em>&#39;Gone where?&#39;</em></p>
<p><em>Gone from my sight. That is all. She is just as large in mast and hull and spar as she was when she left my side and she is just as able to bear her load of living freight to her destined port.</em></p>
<p><em>Her diminished size is in me, not in her. And just at the moment when some one at my side says: &#39;There, she is gone!&#39; there are other eyes watching her coming, and other voices ready to take up the glad shout: &#39;Here she comes!&#39;</em></p>
<p>— Henry Van Dyke</p>
<!--more-->
<hr>
<p>I&#39;ve put this on my blog so I can always find it in the future. A friend sent this quote shortly after <a href="https://remysharp.com/search?q=tia">Tia</a> was born, and had died during delivery.</p>
<p>It struck me extrmely deeply. Mostly, I think, because our daughter had been born, and our lives had not changed one bit. We couldn&#39;t bring her home with us, there were no celebrations, no baby clothes. Everything was supposed to change, and yet we had nothing to show for it.</p>
<p>This quote gave me something to hold on to. The idea that just because I couldn&#39;t see my baby anymore, it didn&#39;t mean she didn&#39;t hadn&#39;t existed. I had watched her at leangth until we had to leave.</p>
<p>Tia was gone from my sight. She is just as loved as she was when she was in our arms. Her diminished size is in me, not in her.</p>
]]></content:encoded></item><item><title>Diversity Scholarships for ffconf</title><guid isPermaLink="false">diversity-scholarships</guid><link>https://remysharp.com/2015/08/28/diversity-scholarships</link><pubDate>Fri, 28 Aug 2015 16:15:36 +0000</pubDate><description><![CDATA[This post outlines a new diversity scholarships programme that I want to introduce for ffconf. It&#39;s entirely possible that this does not apply to you, my dear reader, but you still have an important role to play: please pass on the message and this link to help seek those out who can make use of the scholarships.]]></description><content:encoded><![CDATA[<p>This post outlines a new diversity scholarships programme that I want to introduce for <a href="http://ffconf.org">ffconf</a>. It&#39;s entirely possible that this does not apply to you, my dear reader, but you still have an important role to play: please pass on the message and <a href="http://ffconf.org/scholarship">this link</a> to help seek those out who can make use of the scholarships.</p>
<!--more-->
<h2>What are the scholarships?</h2><p>Scholarships are available for anyone in an under-represented group in tech. This includes (but is not limited to): people of colour, LGBTQIA+ people, women and disabled people.</p>
<p>We have a limited number of scholarships available which includes a ticket to the day ffconf event, travel to Brighton (from your city) and hotel as required.</p>
<h2>How to apply</h2><p>Please answer the following questions and email <a href="mailto:julie@leftlogic.com">Julie</a> or <a href="mailto:remy@leftlogic.com">myself, Remy</a>. You don&#39;t have to explain your personal situation to us (but you can of course, if you want to). We trust you in this point :)</p>
<ol>
<li>Who are you?</li>
<li>Where would you be travelling from (airport or city)?</li>
<li>What do you do?</li>
<li>Why should you get a scholarship?</li>
</ol>
<p>Please note that your email will be treated with the utmost privacy, and we will not publicly announce who the diversity scholarships go to (though you&#39;re welcome to say so yourself).</p>
<p><strong>Deadline for applications: Friday 2nd Oct, 2015.</strong></p>
<h2>Why?</h2><p>In the early part of this year I had the idea that we could get every delegate to ffconf a &quot;keep cup&quot; with a nice simple ffconf logo on it as a cool little souvenir of the event. Something to make what is already (hopefully) a great day, that tiny bit more special.</p>
<p>The costs came back quoting us around £1,300. Not a huge amount, but it would also come out of my company, Left Logic&#39;s pocket.</p>
<p>Then a few days ago I saw <a href="https://twitter.com/una/status/636643450754994176">this tweet from Una Kravets (@una)</a>. She posted how she was able to attend SassConf 2013 through a diversity programme they provided, and has gone on to travel, speak, start a meetup, and closes with:</p>
<blockquote>
<p>[...] All of this is possible for me because I got that scholarship in 2013. Scholarships aren&#39;t just about increasing diversity numbers, or financial assistance: they can change an attendee&#39;s life.</p>
</blockquote>
<p>I hadn&#39;t quite wrapped my head around what a diversity scholarship looked like until I read Una&#39;s post in full, and then it clicked. The same night, I decided that instead of spending our money on something that was nice for a large group - we should spend this money on providing flight and hotels for diversity tickets.</p>
<p>So we have rounded the budget up to £1,500 for flights and hotel for at least 3 people (though it all depends on where you fly from, i.e. a diversity scholarship for someone travelling from Australia will blow our entire budget), but we&#39;ll stretch it as far as we can.</p>
<p>Again, this scholarship isn&#39;t sponsored, this is from Remy and Julie. No, I don&#39;t want a medal(!) just trying to help in a small way.</p>
<h2>Acknowledgements</h2><p>I&#39;ve taken either some copy or inspiration from <a href="http://sassconf.com/#scholarships">SassConf</a> and <a href="http://blog.otsconf.com/post/121589262220/how-to-apply-for-community-and-diversity-tickets">OTSConf</a>.</p>
<p>Again, if this doesn&#39;t apply to you, please please can you pass on the message and reach out to anyone you know that might benefit from one of these scholarship places.</p>
]]></content:encoded></item><item><title>Five</title><guid isPermaLink="false">five</guid><link>https://remysharp.com/2015/08/17/five</link><pubDate>Mon, 17 Aug 2015 15:45:32 +0000</pubDate><description><![CDATA[Tia was our first born. I know I don&#39;t write about Ellis and Seren, but I get to look into their eyes and tell them that I love them every day. Tia never heard my voice. She never opened her eyes. I&#39;ll never know what colour eyes she has. Ever.
Tia would be 5 this month. This is for her.]]></description><content:encoded><![CDATA[<p>Tia was our first born. I know I don&#39;t write about Ellis and Seren, but I get to look into their eyes and tell them that I love them every day. Tia never heard my voice. She never opened her eyes. I&#39;ll never know what colour eyes she has. Ever.</p>
<p>Tia would be 5 this month. This is for her.</p>
<!--more-->
<p>Tia was born on the last day of August and each year after August quietly creeps in with it&#39;s pain and sorrow. Often I&#39;ll need to stand still to notice it. Sometimes, like this year, it comes early and hits me harder.</p>
<p>It was mid-July and everything felt like it was shrouded in a heavy fog. I felt like any moment I would just collapse under the sheer weight of just existing without my daughter and I&#39;d be crushed. Literally.</p>
<p>Losing Tia to stillbirth is hard in a way that people around us don&#39;t see her and quite often don&#39;t really know what stillbirth means. They don&#39;t know that she existed, and those that do aren&#39;t sure whether or not to mention her name.</p>
<p>I feel like I have to explain that she died some point during labour, like I need to validate her existence in some way. That&#39;s no other people, that&#39;s <em>me</em>. Some people don&#39;t understand why I&#39;m explaining. Most people don&#39;t understand what they&#39;re supposed to say. I don&#39;t know what <em>I should say</em> at times. &quot;I&#39;m sorry for you loss&quot; says a lot. Mostly it says &quot;I&#39;m lost for words, but I know you&#39;re in pain and I see you.&quot;.</p>
<p>Words seem simple when there&#39;s no tragedy behind it. The weeks and  after Tia was born, my wife and I would constantly exchange &quot;are you okay?&quot;. It wasn&#39;t a question. It was a way of saying <em>Hey</em>. We were not okay. Our baby was dead. It would be a long time before we would be <em>okay</em>.</p>
<p>&quot;How many children do you have?&quot;. That&#39;s the worst. Though a close second is &quot;is this your first?&quot;.</p>
<p>There&#39;s no way to answer these questions without something feeling wrong.</p>
<p>After many, many months our answers have adapted to honour Tia but avoid the awkwardness when we respond fully and truthfully to those questions. Instead we&#39;ll reply with: &quot;we have two <em>at home</em>&quot;. Our first, she&#39;s not at home. We carry her in our hearts. She&#39;s all around us, and she lays in a place called Angel&#39;s Corner.</p>
<p><img src="/images/angels-corner.jpg" alt="Angel&#39;s Corner"></p>
<h2>My view on the world changed</h2><p>My view on the world changed entirely after Tia was born. When I&#39;m in a flower shop, to me, flowers are for funerals and gravesides, so it always surprises me when I see birthday balloons and cards with flowers celebrating babies. I have to remember people use flowers for other occasions too.</p>
<hr>
<p>I hate to admit it, but every one of my friends who are pregnant: I&#39;m scared for them. I don&#39;t want anyone going through what we did, and yet hundreds upon hundreds more will every year. It&#39;s a roll of the dice and nothing more. Some wont survive. Some will. We think we can control our lives and protect those around us. We can&#39;t. This breaks my heart and scares me <em>only</em> because it happened. The unthinkable happened. It happens. Unfairly. If you and your partner are pregnant, please take a look at <a href="http://www.countthekicks.org.uk/">count the kicks</a>.</p>
<hr>
<p>I can&#39;t live away from Brighton. I can&#39;t because my daughter is buried here. If we left to live in another country, who would bring flowers to her grave? This is too painful to think about. Her being forgotten amongst a sea of children&#39;s graves. It&#39;s hard enough to think about this after I&#39;m gone from this world, but this simple fact keeps me from going anywhere soon.</p>
<hr>
<p>Long shadows and the golden light that comes with August and September remind me of long walks with my wife after Tia was born. In pain and alone in the world. Nothing but us and our precious grief. The world looks different through shock. We&#39;re surrounded in unparalleled beauty which is near impossible for me to see these days with the chaos and love that my family has to offer today. But in extreme grief: the sunsets, the light, the flowers, the grass, the mornings, the nights: all beautiful. Beautiful in a way that it could all be lost in the blink of an eye.</p>
<hr>
<p>Tia would be 5 years old at the end of August 2015. She&#39;d have finished her first year of school. The oldest of three. A little girl full of life.</p>
<p>But she is not. She is not 5. She is not here. I had to leave her. Alone. At the hospital the day we met her. It still hurts today. At times my pain is anger that wants to burn the world to the ground for taking her from us. I left her, and it&#39;s the regret that I&#39;ll carry forever more and one that could never have any other outcome.</p>
<p>I miss her. Our family misses her.</p>
<p><img src="/images/family-on-hills-2015.jpg" alt="My family on the hills"></p>
<!--

Flowers are for gravesides.
I'm always fearful when friend's due dates are coming up.
I don't have any answer that isn't messy to: how many children do you have.
I notice the golden light and long shadows in August and September because we saw everything differently after Tia was born.
I can't ever see myself leaving Brighton because my baby is buried here, and if I didn't live here, who would visit her graveside?
I don't know what colour Tia's eyes are.

-->]]></content:encoded></item><item><title>I thought paypal was better...</title><guid isPermaLink="false">i-thought-paypal-was-better</guid><link>https://remysharp.com/2015/08/10/i-thought-paypal-was-better</link><pubDate>Mon, 10 Aug 2015 12:59:58 +0000</pubDate><description><![CDATA[We&#39;ve been using PayPal for ffconf since 2009. The first year it took the full 6 months of sale to sell ~200 tickets. In 2010 it took 3 months to sell 283 tickets. 2011, 4 days - and that was the first of the trouble. 2012 to 2015, it&#39;s taken under 10 minutes.]]></description><content:encoded><![CDATA[<p>We&#39;ve been using PayPal for <a href="http://ffconf.org">ffconf</a> since 2009. The first year it took the full 6 months of sale to sell ~200 tickets. In 2010 it took 3 months to sell 283 tickets. 2011, 4 days - and that was the first of the trouble. 2012 to 2015, it&#39;s taken under 10 minutes.</p>
<!--more-->
<h2>The first trouble</h2><p>The troubles that <a href="http://www.creativebloq.com/netmag/burned-paypal-9126093">PayPal had with effectively killing conferences was well documented</a>.</p>
<p>PayPal had &quot;limited&quot; our funds the first year (2011). There was an &quot;unexpected spike&quot; in our transactions which caused a red flag. Fair enough. The funds were locked until the event was over in November 2011 (IIRC we&#39;d moved most of the funds out quickly and they were only holding around £6,000) - but it&#39;s important to note that Julie and I have always bank-rolled the year&#39;s event with the previous year&#39;s profits.</p>
<p>Specifically, we know that the event covers our costs (both expenses like the venue, and our operating costs). So we can afford to pay the venue ahead of time without the funds from the tickets.</p>
<h2>A hero in the midst</h2><p>In 2013 it happened again, and somehow <a href="https://twitter.com/billwscott">Bill Scott</a> got wind of our troubles and explained that he was carrying the message back to the very top dogs (at the time a new CEO was in place and working hard to change PayPal&#39;s reputation).</p>
<p>He did an amazing job. Something had shifted in PayPal and they (the company) appeared to understand recurring events and how transactions would work.</p>
<p>2014&#39;s tickets sold and there wasn&#39;t a peep from PayPal at all. It seems like it was all good.</p>
<p>But...</p>
<h2>2015 and 1 month after selling out</h2><p>We released tickets for ffconf 2015 a month ago. We sold out in (two batched totalling) 7 minutes.</p>
<p>As usual, I removed <em>some</em> funds from PayPal, and left around £15,000 for any refunds and anticipation of any queries from PayPal (old habits and all).</p>
<p>And here&#39;s when it goes all wrong...</p>
<p>This account is so there&#39;s something written about how it&#39;s going wrong, because I&#39;m having <em>a lot</em> of trouble getting information into PayPal directly.</p>
<h2>Going wrong</h2><p>The timeline:</p>
<ul>
<li>I get a phone call (good) at 10am - but no information, just that &quot;John&quot; is calling from PayPal to speak to me, and that they&#39;ll email.</li>
<li>I get an email, asking for the following from me:</li>
</ul>
<blockquote>
<p>Your account has recently been reviewed by our merchant team due to the following:</p>
<ul>
<li>Increase in volumes processed</li>
</ul>
<p>We tried to call you on 10/08/2015, but we couldn&#39;t reach you. To allow time to review this in more detail, we&#39;ve temporarily limited what you can do with your account until you submit the information you need to provide and take the actions listed.</p>
<p>Check that you&#39;ve answered all questions and provided all information we ask for to restore your account as soon as possible.</p>
<ul>
<li>When is the event taking place?</li>
<li>What kind of service do you provide? (accommodation, registration, tours, etc)</li>
<li>Is the event organised by you or you are acting as intermediary between the buyers and the event organiser? (if so, please provide us with the contract with the event organiser).</li>
<li>How many tickets are being sold? How many tickets are you planning to sell via PayPal?</li>
<li>What is the average ticket cost?</li>
<li>Have you previously hosted events? (if yes, how many years have you hosted these events?)</li>
<li>Are the proceeds from Ticket Sales required as capital to run the event?</li>
<li>If so, can you provide an Event expense List and projected payment dates for each expense? Specifically, details on the expenses that need to be made in advance of the event.</li>
<li>Do you have a venue booked for the event? Need confirmation for the venue booking? Confirm capacity of the venue?</li>
<li>Do you have insurance in case of event being cancelled? Can they provide details of that insurance? (PayPal may be added as beneficiary to this insurance as a partial mitigant).</li>
<li>Expected Total Payment Volume to receive via PayPal? Is PayPal the only processor of this event? If no, what is the % processed through PayPal.</li>
<li>How often are you expecting to conduct these events?</li>
<li>What is the cancellation policy for this event?</li>
</ul>
<p>Once we receive the information, we aim to complete our review and respond to you within 72 hours.</p>
</blockquote>
<ul>
<li>I reply, mostly to say I&#39;ve given this information before, but include some other points...</li>
<li>The email <strong>bounces back</strong>... <em>deep breath</em></li>
<li>I visit PayPal.com - it doesn&#39;t say <em>how much</em> my account is limited by, just that I need to &quot;resolve&quot; the &quot;check your email for more information&quot;</li>
<li>I try to upload the text email I replied with...</li>
<li>&quot;Send files&quot; won&#39;t disable, I notice that I can only send PDF, PNG or JPG...</li>
<li>I print my email reply to a PDF, <em>then</em> upload that...</li>
</ul>
<p>Now I just wait. God knows how they&#39;ll get in touch, or whether they will again. I&#39;ve provided all the information about our transactions in previous years, and what annoys me the most is that the spike in our transactions <strong>is consistent with previous years</strong>.</p>
<p>Honestly, I don&#39;t really care what they do. I&#39;m expecting the funds to be held until after the event has finished (or 2 months after...which is just as annoying), after which I&#39;ll be expected to somehow prove that people didn&#39;t want a refund <em>post</em> event.</p>
<p>So, yeah, I thought PayPal was better... Filing under &quot;Funsies&quot;.</p>
<div class="update">
<strong>Updated 2015-08-11:</strong> the account limit has been removed. I&#39;m not 100% sure why, since the only information I provided was a slightly ranty email. It&#39;s quite possibly <em>this</em> blog post that helped, or not. I&#39;m not entirely sure!.
</div>
]]></content:encoded></item><item><title>Notes on porting my Pebble app to SDK3</title><guid isPermaLink="false">notes-on-porting-my-pebble-app-to-sdk-3</guid><link>https://remysharp.com/2015/07/29/notes-on-porting-my-pebble-app-to-sdk-3</link><pubDate>Wed, 29 Jul 2015 14:32:03 +0000</pubDate><description><![CDATA[Late last night I decided to update my Rest pebble app to make use of the colour features of BASALT, i.e. the Pebble Time&#39;s colour features.
In particular, I wanted the resting time to show in green and overtime to show as red. These are my notes that I gathered in porting the app to SDK 3 whilst still supporting the APLITE Pebble (or OG as I like to think).]]></description><content:encoded><![CDATA[<p>Late last night I decided to update my Rest pebble app to make use of the colour features of BASALT, i.e. the Pebble Time&#39;s colour features.</p>
<p>In particular, I wanted the resting time to show in green and overtime to show as red. These are my notes that I gathered in porting the app to SDK 3 whilst still supporting the APLITE Pebble (or OG as I like to think).</p>
<!--more-->
<h2>Layout</h2><p>With my app, I have a <code>ActionBarLayer</code> on the right with arrows and <code>TextLayer</code>s with the second countdown. I noticed when deploying to BASALT, the position was off, and in fact everything was closer.</p>
<p>I did some simple repositioning, but you can see from the screenshot below that the <code>ActionBarLayer</code> is actually slightly wider:</p>
<p><img src="/images/pebble-comparison1.png" alt="APLITE vs BASALT side-by-side"></p>
<p>This is emphasised when the count is actually going down:</p>
<p><img src="/images/pebble-comparison2.png" alt="APLITE vs BASALT side-by-side"></p>
<p>This is due to BASALT being &quot;full screen&quot; by default. So to compensate for this, I need to do conditional positioning on the elements. For the position of the <code>TextLayer</code>, I&#39;m using <code>134 - ACTION_BAR_WIDTH</code> (which is 30 for BASALT and 20 for APLITE):</p>
<pre><code class="language-cpp">s_textlayer_120 = text_layer_create(GRect(0, 12, 134 - ACTION_BAR_WIDTH, 42));
</code></pre>
<p>To get the top positioning on the <code>TextLayer</code>s I couldn&#39;t seem to calculate the values correctly, so I had a conditional set of defines:</p>
<pre><code class="language-cpp">#ifdef PBL_PLATFORM_BASALT
  #define MENU_TOP 16
  #define MENU_MIDDLE 64
  #define MENU_BOTTOM 112
#else
  #define MENU_TOP 6
  #define MENU_MIDDLE 54
  #define MENU_BOTTOM 102
#endif
</code></pre>
<h2>Developing for APLITE <em>and</em> BASALT</h2><p>I&#39;ve got an original (kickstarter) Pebble and a Pebble Time. I&#39;m used to deploying to devices (rather than emulators, though I&#39;ll come on to this).</p>
<p>However, I found (after a <em>lot</em> of failure) that you can&#39;t develop for more than one Pebble device at a time. Importantly, on the phone Pebble app (be it Pebble or Pebble Time) <strong>you can only have one watch enabled for development</strong>.</p>
<p>The workaround is to keep switching between the two apps, flipping the developer checkbox.</p>
<p>Or...use the emulator on the command line. It&#39;s pretty solid, and conveniently you can have both the BASALT <em>and</em> APLITE running side by side (as you seen from my shots above).</p>
<h2>UI tweaks</h2><p>Since my Rest app is designed to be used in the gym (I use the gym 4 times a week and use the Rest app <em>all</em> the time), there&#39;s a few important requirements:</p>
<ul>
<li>Clear to read (quickly)</li>
<li>Show the time</li>
</ul>
<p>Being clear to read was the motivation behind using colour in my app. Now I can quickly see if I&#39;m over or not based on colour.</p>
<p>However, BASALT apps all run in fullscreen - so you lose the time, which is useful to me because I need to know if my gym session is running over or not. Thankfully the developer docs include putting the time back in on their <a href="http://developer.getpebble.com/sdk/migration-guide/#using-the-status-bar">migration guide</a>.</p>
<p>What I needed to specifically do was ensure the <code>StatusBarLayer</code> was <em>under</em> my <code>ActionBarLayer</code>, otherwise you get this effect, where the <code>StatusBarLayer</code> cuts into the menu:</p>
<p><img src="/images/pebble-status-layer.png" alt="BASALT status bar layer order"></p>
<p>The fix is to simply ensure the <code>ActionBarLayer</code> is drawn <em>after</em> the <code>StatusBarLayer</code>.</p>
<h2>Get it</h2><p>So if you have a Pebble Time, or Pebble OG, and you use the gym, you can get the <a href="http://apps.getpebble.com/en_US/application/53ff41ed8cdf37902b000050">free app here</a> - and don&#39;t forget to <em>heart</em> it!</p>
]]></content:encoded></item><item><title>My Pebble</title><guid isPermaLink="false">my-pebble</guid><link>https://remysharp.com/2015/07/22/my-pebble</link><pubDate>Wed, 22 Jul 2015 15:37:23 +0000</pubDate><description><![CDATA[Back in April 2012 I joined the bandwagon and backed the hyped kickerstarter campaign for the very first Pebble.
After waiting way way too long and abandoning my original choice for an orange watch I was forced to choose the black, only to get my hands on it earlier.
I also hadn&#39;t worn a watch in well over 15 years. I&#39;m not 100% what prompted me to buy the watch. Perhaps the promise of an open source platform...?
When it fin-nal-ly arrived, what I noticed immediately was that it was massive on my wrist. The strap was particularly large and never really felt snug.
I figured it wouldn&#39;t even last 3 months on my wrist.

What was the point of the Pebble?The Pebble gave me one important (to me) feature. Text messages (and calls) would vibrate on my wrist.
I&#39;d found that when I was away from home, I&#39;d nearly always miss text messages from my wife. Even when my phone was on vibrate and loud, I&#39;d still miss them.
A small vibration on my wrist would subtlety alert me to something I could decide to action or not. For me, this was a big deal and an important feature.

For the first 3 months it was a novelty. I kept reading about cool apps that could do text responses - but alas I was using an iPhone and none of this functionality was available to my phone.
The first turning point to my unimpressed state was spending 1 month trailing a move to Android. This experience totally opened up the Pebble&#39;s functionality to me. But that was just a trial, and I would move back to the (limiting) iPhone.
So, why and how am I still wearing my Pebble today?
My Pebble todaySome 2 years later I still wear my Pebble. Every day. It helps that I finally ditched my iPhone for an Android (a OnePlus One - and that&#39;s another blog post).
The strap has broken, it needs charging once a week (insane if you compare to a regular watch) and the bottom right action button (1 out of 4 buttons) is playing up.
One strange thing that kept happening, particularly strange if you consider how conservative the British are: random people would ask my &quot;how am I finding my watch?&quot;. A guy on a plane, someone in the gym changing rooms, it was all very strange (to me).
But with all these issues, the clunkiness and being forced to converse with other human beings: why am I still wearing it??!
I customised it. I made it mine. It&#39;s my watch, and there&#39;s no other watch like it.
Open source: learning &amp; modifying other people&#39;s&nbsp;codeI&#39;d tried in the past to make my own watch face but failed pretty hard. But then my second attempt took an existing watch face and made my own modifications, including using a custom font.
There is a memory leak in the original code that causes the watch face to crash every now and then, and I&#39;ll likely get around to debugging and fixing it...one day.
A tiny note: since I forked the project, the license on Simply Clean has changed/been removed. It doesn&#39;t affect my code, but I thought it was fair to point out.
I used CloudPebble for all of the development I&#39;ve done so far on the Pebble, and it&#39;s an absolutely superb resource.

I know JavaScript!Although there&#39;s a couple of limitations in the JS apps, the simple fact is: I can create my ideas as JavaScript based Pebble apps in a matter of hours.
I recently wrote a quick interface to a local bus time webapp that I wrote. Now from my wrist, in a few presses I have the bus times on my wrist.
From a practical use, this is actually easier than using my phone because it takes a few seconds to do the geo-lookup and then request the content from the bus website, so when I&#39;m rushing around in the morning, I don&#39;t have to mess around with my phone.
I also wrote a simple prototype with a Spark that I could control LEDs from my watch. Pointless, but cool (see this short video demo).
There is, however, a small cost to pay with JavaScript apps:

They only work whilst you have a connection from your watch to your phone (since the actual JS is executed on the phone)
There&#39;s a laggy response time on the button presses, particularly (I&#39;ve noticed) going backwards through the app (or unloading)
Firing up the JS based Pebble app can interfere with apps running on the phone - I noticed that it would stop my OnePlus One&#39;s camera from recording video as I launch the JS app (which is where there&#39;s no video yet)

I (kinda) know C too...The actual reason the button is failing on my Pebble is because I use it so much: I wrote a C based app that I use in the gym to time my rest time between sets. I called it (cleverly...) Rest.

Its simple. No animations, no nonsense. Three pre-set (configurable) times in seconds, and a timer. I&#39;m in the gym 4 times a week, and usually have around 20-25 sets. I use my app between every set. My app is exactly what I need for the task I perform multiple times a day.
How it affects my daily routineAs with the Rest app being part of my daily routing, the alarms are also an important part of my routing. I have alarms set throughout the day to remind me exactly when I need to eat. Silly as it sounds, making the watch integral to my daily routine is what&#39;s given me a reason to keep it charged and keep it on.
Being able to customise it, using my knowledge of code and knowing how to hack through other people&#39;s code has lulled me into loving this small piece of tech.
Being able to express myself in my pebble is what&#39;s made me love it.
I&#39;ve also realised that I always prefered the look of services like de.licio.us (circa 2005) over Magnolia, and in a way, the Pebble is when compared to the other smart watches out there.
A lot of my friends have asked me &quot;when are you getting the iWatch&quot;, to which I say I&#39;m not interested (seriously, follow me on twitter if you need an idea of how sick I am of Apple) - and in fact, I also backed the new Pebble Time project and I can&#39;t wait to get my hands on that device and play some more.
Next: TimeAkin with simplicity of the Pebble, my Pebble Time arrived in this simple cardboard, no-frills packaging, and I&#39;m keen to see how I can customise this watch and make it mine, again.

And when this happened, it totally made my day:
Okay @Pebble, this is awesome. No charge, but still tells the time. 💙💚💛💜 pic.twitter.com/fZdBfrFb88&mdash; Remy Sharp (@rem) July 11, 2015]]></description><content:encoded><![CDATA[<p>Back in April 2012 I joined the bandwagon and backed the hyped kickerstarter campaign for the very first Pebble.</p>
<p>After waiting way way too long and abandoning my original choice for an orange watch I was forced to choose the black, only to get my hands on it earlier.</p>
<p>I also hadn&#39;t worn a watch in well over 15 years. I&#39;m not 100% what prompted me to buy the watch. Perhaps the promise of an open source platform...?</p>
<p>When it <em>fin-nal-ly</em> arrived, what I noticed immediately was that it was massive on my wrist. The strap was particularly large and never really felt snug.</p>
<p><strong>I figured it wouldn&#39;t even last 3 months on my wrist.</strong></p>
<hr>
<h2>What was the point of the Pebble?</h2><p>The Pebble gave me one important (to me) feature. Text messages (and calls) would vibrate on my wrist.</p>
<p>I&#39;d found that when I was away from home, I&#39;d nearly always miss text messages from my wife. Even when my phone was on vibrate and loud, I&#39;d still miss them.</p>
<p>A small vibration on my wrist would <em>subtlety</em> alert me to something I could decide to action or not. For me, this was a big deal and an important feature.</p>
<hr>
<p>For the first 3 months it was a novelty. I kept reading about cool apps that could do text responses - but alas I was using an iPhone and none of this functionality was available to my phone.</p>
<p>The first turning point to my unimpressed state was spending 1 month trailing a move to Android. This experience totally opened up the Pebble&#39;s functionality to me. But that was <em>just</em> a trial, and I would move back to the (limiting) iPhone.</p>
<p>So, why and how am I still wearing my Pebble today?</p>
<h2>My Pebble today</h2><p>Some 2 years later I still wear my Pebble. Every day. It helps that I finally ditched my iPhone for an Android (a OnePlus One - and that&#39;s another blog post).</p>
<p>The strap has broken, it needs charging once a week (insane if you compare to a regular watch) and the bottom right action button (1 out of 4 buttons) is playing up.</p>
<p>One strange thing that kept happening, particularly strange if you consider how conservative the British are: random people would ask my &quot;how am I finding my watch?&quot;. A guy on a plane, someone in the gym changing rooms, it was all very strange (to me).</p>
<p>But with all these issues, the clunkiness and being forced to converse with other human beings: <em>why</em> am I still wearing it??!</p>
<p>I customised it. I made it mine. It&#39;s <em>my</em> watch, and there&#39;s no other watch like it.</p>
<h2>Open source: learning &amp; modifying other people&#39;s&nbsp;code</h2><p>I&#39;d tried in the past to make my own watch face but failed pretty hard. But then my second attempt took an existing <a href="https://github.com/edwinfinch/simplyclean">watch face</a> and made <a href="https://github.com/remy/simplyclean/">my own</a> modifications, including using a custom font.</p>
<p>There <em>is</em> a memory leak in the original code that causes the watch face to crash every now and then, and I&#39;ll likely get around to debugging and fixing it...one day.</p>
<p><small>A tiny note: since I forked the project, the license on Simply Clean has changed/been removed. It doesn&#39;t affect my code, but I thought it was fair to point out.</small></p>
<p>I used <a href="https://cloudpebble.net">CloudPebble</a> for all of the development I&#39;ve done so far on the Pebble, and it&#39;s an absolutely superb resource.</p>
<p><img src="/images/pebble-og.jpg" alt="My OG Pebble"></p>
<h2>I know JavaScript!</h2><p>Although there&#39;s a couple of limitations in the JS apps, the simple fact is: I can create my ideas as JavaScript based Pebble apps in a matter of hours.</p>
<p>I recently wrote a <a href="https://github.com/remy/pebble-brighton-buses">quick interface</a> to a <a href="http://buses.leftlogic.com">local bus time webapp</a> that I wrote. Now from my wrist, in a few presses I have the bus times on my wrist.</p>
<p>From a practical use, this is actually easier than using my phone because it takes a few seconds to do the geo-lookup and then request the content from the bus website, so when I&#39;m rushing around in the morning, I don&#39;t have to mess around with my phone.</p>
<p>I also wrote a simple prototype with a Spark that I could control LEDs from my watch. Pointless, but cool (<a href="https://instagram.com/p/sDFL0aqavo/">see this short video demo</a>).</p>
<p>There is, however, a small cost to pay with JavaScript apps:</p>
<ul>
<li>They <em>only</em> work whilst you have a connection from your watch to your phone (since the actual JS is executed on the phone)</li>
<li>There&#39;s a laggy response time on the button presses, particularly (I&#39;ve noticed) going backwards through the app (or unloading)</li>
<li>Firing up the JS based Pebble app can interfere with apps running on the phone - I noticed that it would stop my OnePlus One&#39;s camera from recording video as I launch the JS app (which is where there&#39;s no video yet)</li>
</ul>
<h3>I (kinda) know C too...</h3><p>The <em>actual reason</em> the button is failing on my Pebble is because I use it so much: I wrote a C based app that I use in the gym to time my rest time between sets. I called it (cleverly...) <a href="https://apps.getpebble.com/en_US/application/53ff41ed8cdf37902b000050">Rest</a>.</p>
<p><img src="/images/pebble-rest.jpg" alt="Rest app"></p>
<p>Its simple. No animations, no nonsense. Three pre-set (configurable) times in seconds, and a timer. I&#39;m in the gym 4 times a week, and usually have around 20-25 sets. I use my app between <em>every</em> set. My app is <strong>exactly</strong> what I need for the task I perform multiple times a day.</p>
<h2>How it affects my daily routine</h2><p>As with the Rest app being part of my daily routing, the alarms are also an important part of my routing. I have alarms set throughout the day to remind me exactly when I need to eat. Silly as it sounds, making the watch integral to my daily routine is what&#39;s given me a reason to keep it charged and keep it on.</p>
<p>Being able to customise it, using my knowledge of code and knowing how to hack through other people&#39;s code has lulled me into loving this small piece of tech.</p>
<p><strong>Being able to express myself in my pebble is what&#39;s made me love it.</strong></p>
<p>I&#39;ve also realised that I always prefered the look of services like de.licio.us (circa 2005) over Magnolia, and in a way, the Pebble is when compared to the other smart watches out there.</p>
<p>A <em>lot</em> of my friends have asked me &quot;when are you getting the iWatch&quot;, to which I say I&#39;m not interested (<em>seriously</em>, <a href="https://twitter.com/rem">follow me on twitter</a> if you need an idea of how <a href="https://twitter.com/search?q=from%3Arem%20apple&amp;src=typd">sick I am of Apple</a>) - and in fact, I <em>also</em> backed the new Pebble Time project and I can&#39;t wait to get my hands on that device and play some more.</p>
<h2>Next: Time</h2><p>Akin with simplicity of the Pebble, my Pebble Time arrived in this simple cardboard, no-frills packaging, and I&#39;m keen to see how I can customise this watch and make it mine, again.</p>
<p><img src="/images/pebble-time-packaging.jpg" alt="Pebble Time packaging"></p>
<p>And when this happened, it totally made my day:</p>
<p><blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">Okay <a href="https://twitter.com/Pebble">@Pebble</a>, this is awesome. No charge, but still tells the time. 💙💚💛💜 <a href="http://t.co/fZdBfrFb88">pic.twitter.com/fZdBfrFb88</a></p>&mdash; Remy Sharp (@rem) <a href="https://twitter.com/rem/status/619767989605376000">July 11, 2015</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content:encoded></item><item><title>Optimising a canvas animation</title><guid isPermaLink="false">optimising-a-canvas-animation</guid><link>https://remysharp.com/2015/07/13/optimising-a-canvas-animation</link><pubDate>Mon, 13 Jul 2015 7:50:37 +0000</pubDate><description><![CDATA[I&#39;ve been working on a small canvas animation for ffconf 2015 and realised two important optimisations that I&#39;ve missed out on the past.
The net result: no more humming fan on my laptop.]]></description><content:encoded><![CDATA[<p>I&#39;ve been working on a small canvas animation for <a href="http://2015.ffconf.org">ffconf 2015</a> and realised two important optimisations that I&#39;ve missed out on the past.</p>
<p>The net result: no more humming fan on my laptop.</p>
<!--more-->
<p>The result is this simple retro animation that will only last a few days in production, so I&#39;ve included a tweaked version here:</p>
<p><a class="jsbin-embed" href="https://jsbin.com/zulaha/8/embed?js,output">JS Bin on jsbin.com</a><script src="https://static.jsbin.com/js/embed.min.js?3.30.3"></script></p>
<p>For the sake of brevity (and actually getting this post written under the usual <em>several hours</em>), I&#39;m just going to talk about what I changed.</p>
<h2>Pinning FPS</h2><p>I knew that the &quot;right&quot; approach was to use <code>requestAnimationFrame</code> (rAF) for animation, but my problems historically is that the call rate of my update function was way, way too often. This can either cause my animation to appear to be <em>too</em> quick, or results in the CPU overheating.</p>
<p>One nice advantage of rAF for animation is that it will stop firing when the tab is out of focus (i.e. if you switch to another tab). Whereas <code>setInterval</code> not only doesn&#39;t hit the timing you want, but it&#39;ll <em>keep</em> firing, burning up battery.</p>
<p><strong>TIL</strong> <code>requestAnimationFrame</code> passes in a <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame#Parameters">high resolution timestamp</a> to the callback.</p>
<p>Using the timestamp, we can get a delta of the last run, and if, and only if, the last frame was drawn X FPS ago, then we&#39;ll draw a new frame. For example:</p>
<pre><code class="language-js">var lastFrameTime = 0;
function draw(elapsedTime) {
  // calculate the delta since the last frame
  var delta = elapsedTime - (lastFrameTime || 0);

  // queue up an rAF draw call
  window.requestAnimationFrame(draw);

  // if we *don&#39;t* already have a first frame, and the
  // delta is less than 33ms (30fps in this case) then
  // don&#39;t do anything and return
  if (lastFrameTime &amp;&amp; delta &lt; 33) {
    return;
  }
  // else we have a frame we want to draw at 30fps...

  // capture the last frame draw time so we can work out
  // a delta next time.
  lastFrameTime = elapsedTime;

  // now do the frame update and render work
  // ...
}
</code></pre>
<h2>Minimise your paints</h2><p>Originally my demo was drawing a number of squares that would scale towards the viewer giving the impression of movement. Initially innocuous:</p>
<pre><code class="language-js">function draw() {
  // ... calculate x, y, scale, etc
  // makes the shape: |_|
  ctx.beginPath();
  ctx.moveTo(x, y);
  ctx.lineTo(x, y + y2);
  ctx.lineTo(x + x2, y + y2);
  ctx.lineTo(x + x2, y);
  ctx.stroke();
  ctx.closePath();
}

// update is called on a new frame
function update() {
  // ... update state then draw:
  for (i = 0; i &lt; boxes.length; i++) {
    boxes[i].draw();
  }
}
</code></pre>
<p>This would be repeated for every &quot;box&quot; animating towards the viewer. Since I&#39;m just drawing lines, I could batch all these together all in one go and group the collective shapes under one path, then run a <em>single</em> stroke:</p>
<pre><code class="language-js">function draw() {
  // ... calculate x, y, scale, etc
  // makes the shape: |_|
  ctx.moveTo(x, y);
  ctx.lineTo(x, y + y2);
  ctx.lineTo(x + x2, y + y2);
  ctx.lineTo(x + x2, y);
}

// update is called on a new frame
function update() {
  // ... update state then draw:
  ctx.beginPath();
  for (i = 0; i &lt; boxes.length; i++) {
    boxes[i].draw();
  }
  ctx.stroke();
  ctx.closePath();
}
</code></pre>
<p>It&#39;s a fairly tiny optimisation, but the result is the same, but with less interaction with the canvas, and given we&#39;re aiming to be in and out quickly, it&#39;s not a bad thing.</p>
<h2>Single rAF handler</h2><p>If you&#39;ve got more than one animation running, you&#39;ll need to set-up multiple callbacks to <code>requestAnimationFrame</code>, but having multiple rAF callbacks isn&#39;t ideal, and starts to get unwieldy when you&#39;re working with others who <em>also</em> want to queue up their animations.</p>
<p>You really want everything to be handled in a <em>single</em> rAF handler.</p>
<p>I&#39;ve written a small gist called <strong><a href="https://gist.github.com/remy/36f388d72c1ef161582f">raf.js</a></strong> that allows me to put all my rAF calls through a single handler (and added some niceties like the FPS pinning and a <code>running</code> boolean flag).</p>
]]></content:encoded></item><item><title>You know what they say about assumptions...</title><guid isPermaLink="false">assumptions</guid><link>https://remysharp.com/2015/07/02/assumptions</link><pubDate>Thu, 02 Jul 2015 14:49:53 +0000</pubDate><description><![CDATA[During our heated panel at EdgeConf 2015 on progressive enhancement Jeremy points out that by trying to anticipate your users&#39; needs, you&#39;re making assumptions, and you know what they say about assumptions.
Although he didn&#39;t say so explicitly, there was certainly an undertone that it was something we should admit to ourselves. I&#39;d like to add: for better or worse.
The wider impact of assumptions about your user (for example that they&#39;re viewing on a desktop device) is the exclusion of others.
Jeremy argued, rightly, that you should aim to develop for the absolute lowest technological solution as possible to suit your all your visitors basic needs: known and unknown.
I&#39;ll say it now: I make all kinds of assumptions about my users. A couple of the most common assumption I make is that they can read English, and that they&#39;re visiting using a browser that&#39;s capable of rendering HTML correctly.
Then my base level assumption changes depending on the application and adjusts over time depending on feedback.

Just one example was that JS Bin&#39;s static code used to be served from a single server which suited most users. One day a bug was filed by an individual in Iran notifying me that JS Bin simply would get past the loader (an example of JavaScript was enabled, but not getting down the wire in time before the connection timed out). Putting the static content (scripts, etc) on a CDN fixed this instantly. A simple retroactive fix.
Lee Byron, working for Facebook, was a fellow panellist brought up an excellent case study that users in Japan, unbeknownst to Facebook had such oddball (but popular) devices that HTML and CSS wasn&#39;t rendering as expected leaving the site in an unusable (or very difficult to use) state.
How low do you go? The real answer is you can never go too low because there&#39;s always going to be a case that isn&#39;t catered for because you can&#39;t test for it.
I believe, that progressive enhancing should be part of your workflow. Common HTML elements, delivering baseline functionality to all users, and then enhancing. All does not mean it has to work with cURL. That&#39;s my take. You have to decide for yourself.
We all make assumptions. Ranging from the language our users can read, to the HTML and CSS support, to the level of JavaScript and the prerequisite on high level JavaScript APIs.
Don&#39;t be ashamed. Just own those assumptions.
Also, thank you to Jeremy for running his eyes over this post.]]></description><content:encoded><![CDATA[<p>During our heated panel at EdgeConf 2015 on progressive enhancement <a href="https://adactio.com">Jeremy</a> points out that by trying to anticipate your users&#39; needs, <strong>you&#39;re making assumptions</strong>, and <a href="https://www.youtube.com/watch?v=G-2NimrRPAQ">you know what they say about assumptions</a>.</p>
<p>Although he didn&#39;t say so explicitly, there was certainly an undertone that it was something we should admit to ourselves. I&#39;d like to add: <em>for better or worse</em>.</p>
<p>The wider impact of assumptions about your user (for example that they&#39;re viewing on a desktop device) is the exclusion of others.</p>
<p>Jeremy argued, rightly, that you should aim to develop for the absolute lowest technological solution as possible to suit your <em>all</em> your visitors basic needs: known and unknown.</p>
<p>I&#39;ll say it now: I make all kinds of assumptions about my users. A couple of the most common assumption I make is that they can read English, and that they&#39;re visiting using a browser that&#39;s capable of rendering HTML correctly.</p>
<p>Then my base level assumption changes depending on the application and adjusts over time depending on feedback.</p>
<!-- [Talky.io](https://talky.io/) is an excellent example to zoom in on. Their technology *requires* WebRTC. This assumes that their users have JavaScript, for without it, there is no product. -->
<p>Just one example was that JS Bin&#39;s static code used to be served from a single server which suited most users. One day a bug was filed by an individual in Iran notifying me that JS Bin simply would get past the loader (an example of JavaScript was enabled, but not getting down the wire in time before the connection timed out). Putting the static content (scripts, etc) on a CDN fixed this instantly. A simple retroactive fix.</p>
<p><a href="https://twitter.com/leeb">Lee Byron</a>, working for Facebook, was a fellow panellist brought up an <a href="https://twitter.com/leeb/status/616612662718427136">excellent case study</a> that users in Japan, unbeknownst to Facebook had such oddball (but popular) devices that HTML and CSS wasn&#39;t rendering as expected leaving the site in an unusable (or very difficult to use) state.</p>
<p>How low do you go? The real answer is you can never go too low because there&#39;s always going to be a case that isn&#39;t catered for because <a href="https://twitter.com/triblondon/status/615894823384420354">you can&#39;t test for it</a>.</p>
<p>I believe, that progressive enhancing <strong>should</strong> be part of your workflow. Common HTML elements, delivering baseline functionality to all users, and then enhancing. <strong>All does not mean it has to work with cURL</strong>. That&#39;s <em>my</em> take. You have to decide for yourself.</p>
<p>We <em>all</em> make assumptions. Ranging from the language our users can read, to the HTML and CSS support, to the level of JavaScript and the prerequisite on high level JavaScript APIs.</p>
<p>Don&#39;t be ashamed. Just <strong>own</strong> those assumptions.</p>
<p><small>Also, thank you to Jeremy for running his eyes over this post.</small></p>
]]></content:encoded></item><item><title>Reducing my CPU load from 95% to 20%</title><guid isPermaLink="false">how-i-reduced-cpu-load-from-95-to-20</guid><link>https://remysharp.com/2015/06/16/how-i-reduced-cpu-load-from-95-to-20</link><pubDate>Tue, 16 Jun 2015 22:04:43 +0000</pubDate><description><![CDATA[I&#39;ve recently released a number of changes to JS Bin after I started to tinker (again) with Service Worker support in JS Bin (no, there&#39;s nothing there right now). However, since the release on Saturday, the CPU has been steadily sitting at 95% - which is dangerously close to the 502-o-death page.
Except, if I&#39;m honest with myself, the CPU has been high since...well, since I can remember (going further back into 2013).
Until this afternoon. I made one change, and boom: 20%. Stable. Also, I&#39;ll be filling this under &quot;duh&quot;.]]></description><content:encoded><![CDATA[<p>I&#39;ve recently released a number of changes to JS Bin after I started to tinker (again) with Service Worker support in JS Bin (no, there&#39;s nothing there right now). However, since the release on Saturday, the CPU has been steadily sitting at 95% - which is dangerously close to the <a href="https://jsbin.com/test/error/502">502</a>-o-death page.</p>
<p>Except, if I&#39;m honest with myself, the CPU has been high since...well, since I can remember (going further back into 2013).</p>
<p>Until this afternoon. I made one change, and boom: 20%. Stable. Also, I&#39;ll be filling this under <a href="https://remysharp.com/search?q=%22duh%22">&quot;duh&quot;</a>.</p>
<!--more-->
<h2>Solution</h2><p>Although JS Bin&#39;s code would load a config file and <a href="https://github.com/jsbin/jsbin/blob/master/lib/app.js#L61">set the</a> <code>NODE_ENV</code> dynamically. Except...it wasn&#39;t actually being set early enough.</p>
<p>I changed the <a href="https://github.com/jsbin/production/blob/master/apps.jsbin.com/etc/init/jsbin.conf#L18">upstart script</a> to execute <em>directly</em> in production mode, and voilà, the CPU dropped to a nice stable 20% (or so, rising and falling as I&#39;d expect).</p>
<h2>The how</h2><p>The obvious thing was that the CPU was running very hot and consistently. JS Bin has a lot of traffic, but when the CPU is that high, it&#39;s usually going to die rather soon. As I had released some changes at the weekend, I knew that it was potentially a problem in the new code - the problem was also that JS Bin has run around the 70-90% mark for many, many months.</p>
<h3>Instrumentation</h3><p>The code would need instrumentation, so I looked at some tools to see if I could get some insights into what was going wrong. I <em>used</em> to have a (free) nodetime account but that wouldn&#39;t let me in because I had somehow run more than one application with the API key.</p>
<p>I tried out New Relic, which after first was pretty awesome, amazing charts, very pretty (though didn&#39;t lead me to anything obvious) - but something seemed wrong in the JS Bin process. The memory footprint was going up pretty steadily to capacity. Soon enough the process topped out and I removed the New Relic code. It turns out there&#39;s a <a href="https://discuss.newrelic.com/t/memory-leaking-only-with-node-js-agent-installed/14448/28?u=cjones">memory leak that&#39;s being addressed</a>, but it&#39;s not solved at the core (since it&#39;s a node problem rather than New Relic).</p>
<p>StrongLoop was next, but once I got the CLI tool installed (after some issues), I couldn&#39;t work out how to connect to the client using the web interface...at all. Another abandon.</p>
<p><a href="https://keymetrics.io/">Keymetrics</a> was also suggested (which, I believe, is produced by the makers of <a href="https://github.com/Unitech/pm2">PM2</a> a Process Management tool for node) - but it didn&#39;t look like it could do instrumentation, so I didn&#39;t proceed.</p>
<p>In the end though, and randomly, my nodetime account started working..!</p>
<p>The problem was: I&#39;ve never really been able to read the nodetime data to make head nor tail of it...</p>
<h3>Clues</h3><p>Heading straight for the transaction profiler, I started watching the operations. The transactions refer to routes being hit, as since there&#39;s so much varied traffic, it doesn&#39;t really give any clues as to what&#39;s slow (unless there&#39;s a specific bin causing the problem). But there it was, clear as day:</p>
<p><img src="/images/nodetime-transactions.png" alt="Nodetime transaction operations"></p>
<p>All that file IO shouldn&#39;t be happening. When looked closer, I could see the <code>readFile</code>s were all around my <code>view</code> directories. My templates. I had switched from <a href="https://www.npmjs.com/package/hbs">hbs</a> to <a href="https://www.npmjs.com/package/express-hbs">express-hbs</a> but it seemed weird that it wouldn&#39;t use pre-compiled templates in production mode.</p>
<p>I did some digging, of course there&#39;s no mention of switching to compiled templates in production mode in either npm modules (pre-compiled templates would mean it wouldn&#39;t read from disc to constantly be serving files).</p>
<p>Realising this, I figured my process must think it was in a development mode, and immediately updated my upstart script to run JS Bin with <code>NODE_ENV=production</code>.</p>
<p>The result was going from this (note <code>run.js</code> CPU):</p>
<p><img src="/images/jsbin-top-bad.png" alt="JS Bin top: bad"></p>
<p>To this:</p>
<p><img src="/images/jsbin-top-good.png" alt="JS Bin top: good"></p>
<p>So, yeah. Filed under &quot;duh&quot;.</p>
]]></content:encoded></item><item><title>Devtool tricks for when I forget</title><guid isPermaLink="false">devtool-tricks-for-when-i-forget</guid><link>https://remysharp.com/2015/06/09/devtool-tricks-for-when-i-forget</link><pubDate>Tue, 09 Jun 2015 14:50:20 +0000</pubDate><description><![CDATA[I&#39;ve recently completed a few of my mastering devtools workshops, so I&#39;m all over devtools again, and just this week spotted two tricks (I use) for when I &quot;forget&quot;.]]></description><content:encoded><![CDATA[<p>I&#39;ve recently completed a few of my <a href="http://leftlogic.com/training/debug">mastering devtools workshops</a>, so I&#39;m all over devtools again, and just this week spotted two tricks (I use) for when I &quot;forget&quot;.</p>
<!--more-->
<h2>Capturing XHR results</h2><p>One of my favourite commands in devtools is the <code>copy</code> function. It&#39;ll copy DOM nodes, it&#39;ll stringify objects and it saves that horrible long and tricky select, highlight, copy, edit, faff process.</p>
<p>However, sometimes I forget to set a breakpoint when my XHR requests come back so I can copy the response. But it&#39;s to fix.</p>
<p>Right click on the XHR request in the network panel, and select &quot;Copy response&quot;. Boom. I&#39;ve now captured the JSON response and I&#39;m good.</p>
<p><img src="/images/devtools-copy-response.jpg" alt="devtools copy response"></p>
<h2>Retrieving results from the ether</h2><p>It&#39;s not uncommon for me to run a command in the console, then realise I forgot to capture the result so I could run it through a <code>map</code> or some such process.</p>
<p><strong>This is where <code>$_</code> is a live saver, which contains the result of the last command run in the console.</strong></p>
<p>In the example below, I&#39;ve forgotten to capture the result of the promise so I can manipulate (or in this case, <code>copy</code>) the result. This is simply fixed by running a new command with <code>$_.then(...)</code>.</p>
<p><img src="/images/devtools-dollar-underscore.png" alt="devtools dollar underscore"></p>
<h2>Copy any <em>dead</em> logged value</h2><p>Sometimes I&#39;ll <code>console.log</code> out a value or object that I want to inspect. Then realise that actually I want to copy it. Old me would go back to the source code, and log out a <code>JSON.stringify</code>, but not new me.</p>
<p>It&#39;s really easy, right click on the object in the console, and &quot;Store as Global Variable&quot; (usually stored to <code>temp1</code>). Now it&#39;s easy to <code>copy(temp1)</code> and it&#39;ll automatically be converted into a JSON for me:</p>
<p><img src="/images/devtools-capture-for-copy.png" alt="devtools copy a global"></p>
<p>What&#39;s a trick, neat or otherwise, that you use on a regular basis?</p>
]]></content:encoded></item><item><title>Tiny two way data binding</title><guid isPermaLink="false">bind</guid><link>https://remysharp.com/2015/06/02/bind</link><pubDate>Tue, 02 Jun 2015 11:42:26 +0000</pubDate><description><![CDATA[Data binding to the DOM is just one of those things that&#39;s damn handy when you&#39;ve got it and super laborious when you don&#39;t. The problem is that it usually comes at a price of a hefty framework (hefty can apply to byte-size, but more often: the learning curve to use said framework).
So, as any good re-inventer of wheels, I wrote my own two-way data binding library, partly to experiment, partly to solve existing needs in my own projects - weighing in at &lt; 2K compressed.
I present (cleverly named): bind.js]]></description><content:encoded><![CDATA[<p>Data binding to the DOM is just one of those things that&#39;s damn handy when you&#39;ve got it and super laborious when you don&#39;t. The problem is that it usually comes at a price of a hefty framework (hefty can apply to byte-size, but more often: the learning curve to use said framework).</p>
<p>So, as any good re-inventer of wheels, I wrote my own two-way data binding library, partly to experiment, partly to solve existing needs in my own projects - weighing in at &lt; 2K compressed.</p>
<p>I present (cleverly named): <strong><a href="https://github.com/remy/bind.js">bind.js</a></strong></p>
<!--more-->
<h2>Demo time</h2><p>Below is an <a href="http://rem.jsbin.com/nepuda/edit?console,output">interactive demo</a> of bind in action. As you change the state of the form, you&#39;ll see the object update on the right (a <code>JSON.stringify</code> output).</p>
<p><a class="jsbin-embed" href="https://rem.jsbin.com/nepuda/embed?console,output">JS Bin on jsbin.com</a><script src="https://static.jsbin.com/js/embed.js"></script></p>
<h2>Example usage</h2><p>The concept behind the API is fairly simple: take an object bind it to functions and/selectors given a particular mapping.</p>
<p><a href="https://jsbin.com/remutu/edit?js,console,output">For example</a>, to bind a score and player name to the DOM:</p>
<pre><code class="language-js">var user = Bind({
  name: &#39;[new user]&#39;,
  game: { score: 0 }
}, {
  &#39;game.score&#39;: &#39;span.score&#39;,
  name: &#39;input[name=&quot;username&quot;]&#39;
})

// in the game
user.game.score += 25;
</code></pre>
<p>...and the HTML updates take care of themselves. Then the user enters their name in the input field, it&#39;ll update the <code>user</code> object.</p>
<p>The mapping value is flexible too, and can be:</p>
<ul>
<li>A string representing a selector</li>
<li>A function which receives the new value</li>
<li>An object that supports any of the following properties: <code>dom</code>, <code>callback</code> and <code>transform</code></li>
</ul>
<p>With an object as the value of the mapping, it allows you to do a transform on your data before it lands in the DOM. This is obviously useful for things like updating <a href="https://jsbin.com/nemubo/1/edit?js,output">list elements</a>:</p>
<pre><code class="language-js">var data = Bind({
  cats: [&#39;nap&#39;, &#39;sam&#39;, &#39;prince&#39;]
}, {
  cats: {
    dom: &#39;#cats&#39;,
    transform: function (value) {
      return &#39;&lt;li&gt;I had a cat called &lt;em&gt;&#39; + this.safe(value) + &#39;&lt;/em&gt;&lt;/li&gt;&#39;;
    }
  },
  &#39;cats.0&#39;: {
    dom: &#39;#first-cat&#39;,
    transform: function (value) {
      return &#39;My first cat was &#39; + this.safe(value);
    }
  }
});
</code></pre>
<p>Inside the <code>transform</code> function also has a helper, <code>this.safe()</code> which will escape your content safe for HTML.</p>
<h2>Object.observe?</h2><p>Nope. I&#39;m not using it, which is also why there&#39;s some limitations (property deletion being the main/only one).</p>
<p>Why not? Mostly for a larger platform of support. This library supports IE9 upwards (and thus all other browsers) and includes feature detection.</p>
<p>I also tried an <code>Object.observe</code> polyfill early on, but didn&#39;t have much success (though I don&#39;t recall what the issues were). I also fancies the code challenge :)</p>
<h2>HTML decorators?</h2><p>Nope (again). I was recently debugging some Knockout code, and found myself struggling as I realised that the actual binding was happening in the HTML, and the manipulation was happening in the separate JavaScript file.</p>
<p>So no, there&#39;s no <code>data-*</code> support, intentionally. All the code lives in one place: in the JavaScript.</p>
<p>I personally like that my data binding is all in one place. If you&#39;re not so keen, there&#39;s always Angular, Knockout and the like.</p>
<h2>Nice to haves</h2><p>I&#39;ve started opening a few <a href="https://github.com/remy/bind/issues">issues</a> on things I&#39;d like, but they currently include:</p>
<ul>
<li>Root object mapping support (i.e. to be able to hook a callback on <em>anything</em> changing)</li>
<li>Glob support, i.e. <code>me.*.name</code> will fire callbacks matching any path starting with <code>me</code> and ending with <code>name</code></li>
<li>Test to test every individual form element (currently it&#39;s a bit of a mishmash)</li>
</ul>
<p>Feel free to <a href="https://github.com/remy/bind/issues">raise an issue</a> or feature request or let me know if you&#39;d use this even!</p>
]]></content:encoded></item><item><title>Call for proposals at ffconf 2015</title><guid isPermaLink="false">call-for-proposals-at-ffconf-2015</guid><link>https://remysharp.com/2015/05/25/call-for-proposals-at-ffconf-2015</link><pubDate>Mon, 25 May 2015 12:44:33 +0000</pubDate><description><![CDATA[ffconf has it&#39;s event date (6-Nov 2015) and I&#39;ve been in the process of carefully curating the content I want to hear at this year&#39;s event again. As with each year, it takes place at the Duke of Yorks in Brighton, UK.
As always, I also make sure I allot a few positions for CFP, so here&#39;s what our CFP looks like.]]></description><content:encoded><![CDATA[<p><a href="http://2015.ffconf.org">ffconf</a> has it&#39;s event date (6-Nov 2015) and I&#39;ve been in the process of carefully curating the content I want to hear at this year&#39;s event again. As with each year, it takes place at the <a href="https://www.flickr.com/groups/fullfrontalconf/pool/">Duke of Yorks</a> in Brighton, UK.</p>
<p>As always, I also make sure I allot a few positions for CFP, so here&#39;s what our CFP looks like.</p>
<!--more-->
<p>If you think you&#39;ve got something to share, then get in touch. I&#39;ve included a few guidelines as to what I prefer from a proposal, and given you an idea of the kinds of topics I&#39;m interested in hearing about this year.</p>
<p>You can also follow the <a href="https://twitter.com/ffconf">@ffconf</a> twitter account for the latest announcements.</p>
<p><img src="/images/ffconf-2015.gif" alt="ffconf 2015 site"></p>
<h2>Proposal topic advice</h2><p>I&#39;ve also included what you can expect as a speaker at our event too.</p>
<p>A few topics that are of particular interest to me:</p>
<ul>
<li>Isomorphic JavaScript (or <em>&quot;something less contentious&quot;</em>) code and applications (ideally outside the world of &quot;easy with React&quot;)</li>
<li>Sysops for web developers (I&#39;m particularly interested in Docker/container solutions for web developers)</li>
<li>What we can learn in web development from other technology/disciplines</li>
<li>&quot;You&#39;re doing it wrong&quot;</li>
</ul>
<p>If you want to get an idea of the audience or who you proposal is for, the answer is simple: me. I curate for content that <em>I want to hear and see</em>. So if you (roughly) know my work, then you know the audience.</p>
<p>Topics that don&#39;t work, unless they&#39;re genuinely going to change the World, then CFPs like these generally fall to the bottom of the pile (sorry!):</p>
<ul>
<li>Big library specific talks (React, Ember, Angular, jQuery, etc)</li>
<li>Your company&#39;s new shiny product</li>
<li>Talks that are very similar to recent years of ffconf talks</li>
</ul>
<p>Send me the title of your talk, an outline of the talk and any extra information you want me to know about the idea: <a href="mailto:events@leftlogic.com?subject=ffconf2015%20speaking%20propsal">events@leftlogic.com</a>.</p>
<p><strong>It takes me a long time to process and decide on CFPs, so whilst there&#39;s no 8 sessions up on the site, it means your talk is still up for consideration. I will respond to everyone with a yay or nay eventually.</strong> If you want to come to ffconf, regardless of whether your CFP is selected, please buy a ticket and if your talk is selected, the ticket will be refunded and returns to the public pool of tickets.</p>
<h2>Our promise to you</h2><p>All our speakers are treated the same. We will:</p>
<ul>
<li>Pay for your travel. If you&#39;re flying long haul, we&#39;ll upgrade you to premium class (or whatever the name is for &quot;above economy&quot;)</li>
<li>Put you up in our &quot;speaker hotel&quot;. It&#39;s not that cool, but it&#39;s right in town and two minutes walk from our venue. We&#39;re also open to offering the hotel stay. If you want an extra day or two here and there, then that&#39;s cool too (obviously if everyone does this, it breaks our bank, but so far it&#39;s worked)</li>
<li>Arrange your travel and help you with anything you need ahead of the event</li>
<li>We can, if you need or want it, provide you with a mifi preloaded with data</li>
<li>All your food and drinks provided for you during the day before and the day of the conference (don&#39;t expect to buy a drink at the after party)</li>
<li>40 minute talk, generally we don&#39;t do Q&amp;A and it&#39;s best to err on the side of &quot;there is no wifi&quot;</li>
<li>£500 honourium - I know it&#39;s not much, but it&#39;s a bit of spending money to say thanks</li>
<li>A free pass to the next ffconf, and for evermore part of our growing and much loved speaker alumni</li>
<li>If you bought a ticket for ffconf2015, we&#39;ll refund the ticket (as we don&#39;t expect, or want, our speakers to pay)</li>
<li>Uphold our conference code of conduct, both for you, and our attendees (either will be, or based on <a href="http://confcodeofconduct.com">confcodeofconduct.com</a>)</li>
</ul>
<p>So I hope to hear from you soon!</p>
]]></content:encoded></item><item><title>Quick technique for API mocking</title><guid isPermaLink="false">quick-technique-for-api-mocking</guid><link>https://remysharp.com/2015/05/18/quick-technique-for-api-mocking</link><pubDate>Mon, 18 May 2015 13:00:00 +0000</pubDate><description><![CDATA[During server software development (i.e. node) I always strive to work offline, in that my development workflow doesn&#39;t depend on any online services.
However, sometimes that&#39;s not possible as there&#39;s some 3rd party API dependancy - as there was in my latest client work. The problem I found, was that the latency between my location and the 3rd party API was so high, that it was impacting on the workflow cycle of: debug, change, test, repeat. The load time was taking anywhere from 15-30 seconds each time.
So this was my quick work around to easily mock out the API so my development process could be faster.]]></description><content:encoded><![CDATA[<p>During server software development (i.e. node) I always strive to work offline, in that my development workflow doesn&#39;t depend on any online services.</p>
<p>However, sometimes that&#39;s not possible as there&#39;s some 3rd party API dependancy - as there was in my latest client work. The problem I found, was that the latency between my location and the 3rd party API was so high, that it was impacting on the workflow cycle of: debug, change, test, repeat. The load time was taking anywhere from 15-30 seconds each time.</p>
<p>So this was my quick work around to easily mock out the API so my development process could be faster.</p>
<!--more-->
<h2>The aims</h2><p>The aim was to, without much work at all, replicate specific API calls <em>without</em> modifying my application code. i.e. I could switch my mock API on and off as I needed.</p>
<p>It was also important that the time required to put a mock API in place, did <em>not</em> outweigh the time lost on the latency. Specifically, if the custom mock API turned into days of work, it would have been a total waste of time.</p>
<h2>The simple solution</h2><p>This code uses <a href="http://expressjs.com">Express 4</a>. It&#39;s entirely possible that there was a library that already existed, but the small amount of code that I had to write wins over finding, researching, checking and learning a new library.</p>
<h3>Capturing mock data</h3><p>First I had to run my way through each API call and save the raw output as a <code>.json</code> file in a local directory (not tracked in git) called <code>mock-data</code>.</p>
<p>Since all my internal API calls used a config value as the root of the API URL, it meant I could change my local config to point to my local mock API instead of the staging or production endpoint:</p>
<pre><code class="language-js">var config = require(&#39;./config&#39;);
var root = config.api;

function getOrder(id) {
  return request({ // a promise
    url: root + &#39;/order&#39;,
    type: &#39;json&#39;,
    body {
      id: id
    }
  });
}
</code></pre>
<p>I would change my <code>config.api</code> value to point to `<a href="http://localhost/mock-api">http://localhost/mock-api</a>&#39; and the server I was developing would actually reply to the API requests using the code in the next section.</p>
<h3>Mock API Code</h3><p>The following code would be in (something like) <code>routes/mock-api.js</code>:</p>
<pre><code class="language-js">var express = require(&#39;express&#39;);
var fs = require(&#39;fs&#39;);
var router = express.Router();
// directory path to the mock json files
var mockPath = __dirname + &#39;/mock-data/&#39;;

var design = {
  &#39;POST /order&#39;: &#39;getOrder&#39;,
  &#39;POST /order/tickets&#39;: &#39;addTickets&#39;,
  &#39;DELETE /order/tickets&#39;: &#39;removeTicket&#39;,
}

module.exports = router;

Object.keys(design).forEach(function (req) {
  var method = req.split(&#39; &#39;).shift();
  var path = req.split(&#39; &#39;).pop();
  var mock = &#39;{}&#39;;
  try {
    mock = require(mockPath + design[req]);
  } catch (e) {}

  router.route(path)[method.toLowerCase()](function (req, res) {
    res.send(mock);
  });
});
</code></pre>
<p>In my main <code>routes.js</code> file I can then conditionally load up my mock router:</p>
<pre><code>// snip...
if (config.mock) {
  app.use(&#39;/mock-api&#39;, require(&#39;./routes/mock-api&#39;));
}
</code></pre><p>Now requests to my server (the same server I&#39;m doing my main development against), can respond to API requests with pre-baked data. Now my damn latency is a thing of the past!</p>
<h2>Taking it further</h2><p>I struggle to look at the above code without seeing ways to improve it - but as I pointed out in the aims: keep it simple, and keep the solution quick.</p>
<p>Here&#39;s a few ideas that spring to mind that might make the code more useful in different situations:</p>
<ul>
<li>Respond with different file types (rather than only <code>.json</code>)</li>
<li>Respond with inline JSON data (that would be defined in the <code>design</code>)</li>
<li>Support variables in the URL to pick different static responses (like <code>GET /order/:id</code>)</li>
</ul>
<p>I have done some similar work in my <a href="https://github.com/remy/servedir#mocked-router">static server</a> which also has limited support for interpolation in the response.</p>
<p>For now though, this simple version suits my requirements!</p>
]]></content:encoded></item><item><title>screen: Persistent Terminal Sessions</title><guid isPermaLink="false">screen</guid><link>https://remysharp.com/2015/04/27/screen</link><pubDate>Mon, 27 Apr 2015 11:45:00 +0000</pubDate><description><![CDATA[Have you ever had a remote terminal session running only have your connection drop out half way through a large task? Then you reconnect not knowing where it go up to, whether it crashed or what.
Screen is the solution to this problem. Screen allows you to start terminal sessions that you can disconnect from and resume at any time.]]></description><content:encoded><![CDATA[<p>Have you ever had a remote terminal session running only have your connection drop out half way through a large task? Then you reconnect not knowing where it go up to, whether it crashed or what.</p>
<p><a href="http://www.gnu.org/software/screen/manual/screen.html">Screen</a> is the solution to this problem. Screen allows you to start terminal sessions that you can disconnect from and resume at any time.</p>
<!--more-->
<p>I personally use screen a lot with <a href="http://nodejs.org">Node.js</a> web servers - so I can kick off the process, and resume my terminal session to check logs or errors or to restart the process in case it died.</p>
<p>This article is an introduction to screen for the average Joe/anne developers with a few tips and tricks.</p>
<h2>Installing</h2><p>Screen is a unix-y tool, so with Ubuntu I&#39;d use <code>apt-get</code> - it&#39;s also possible it&#39;s pre-installed on the machine (just type <code>screen</code> to find out):</p>
<pre><code>sudo apt-get install screen
</code></pre><h2>Instant win with screen</h2><p>When I remote in to a machine, I run <code>screen</code> and it starts a new session (actually called a window - but I&#39;ll come on to more about these later). There&#39;s some blurb about what screen is, I hit return, and the session is ready.</p>
<p>From here I might start my process. Let&#39;s say I&#39;m doing some large database export.</p>
<p>Now I need to <em>detach</em> from the screen so I can cleanly close the remote session or do something else whilst the export is happening. I type the command sequence:</p>
<pre><code>ctrl-a d
</code></pre><p>This will leave the session running and detach from the screen so you&#39;re back to your original terminal prompt.</p>
<p>To resume your screen session:</p>
<pre><code>screen -r
</code></pre><p>This will take you back to your screen session.</p>
<p>But what if my connection drops and closes whilst I&#39;m inside of screen? When I resume my ssh session, the screen <em>could</em> still be attached, so that when I run <code>screen -r</code> it won&#39;t resume. This is simple to get around, you can detach the screen from <em>outside</em> of the screen session (and in our case, immediately resume using <code>-r</code>):</p>
<pre><code>screen -rd
</code></pre><p>So now you&#39;ve got basic minimum use of screen, how about using some of it&#39;s features? Multiple screens, multiple windows, naming screen sessions &amp; windows, setting defaults in the screen like scroll back, or displaying the title of the screen in the terminal.</p>
<h2>Screen commands</h2><p>When you run screen more than once, you&#39;ll have multiple screen sessions on the go. To list the available screens:</p>
<pre><code>screen -ls
</code></pre><p>If you have more than one, you&#39;ll need to name the screen you want to resume:</p>
<pre><code>$ screen -ls
There are screens on:
    17566.ttys001.remys-mba (Detached)
    18778.ttys001.remys-mba (Detached)
    19014.ttys001.remys-mba (Detached)

$ screen -r 18778
</code></pre><p>This will resume the second screen (identified by it&#39;s process id). You can also resume last screen using <code>screen -RR</code>. But resuming using PIDs is ugly, so let&#39;s name the screens as we create them using the <code>-S</code> argument (this names the socket the screen connects to):</p>
<pre><code>$ screen -S database-dump
[ctrl-a d]
$ screen -ls
There are screens on:
    17566.ttys001.remys-mba (Detached)
    18778.ttys001.remys-mba (Detached)
    19014.ttys001.remys-mba (Detached)
    18898.database-dump (Detached)

$ screen -r database-dump
</code></pre><p>Now we have multiple named screens, let&#39;s look at multiple windows inside of a screen.</p>
<h2>Screen windowing</h2><p>Screen supports having multiple &quot;windows&quot; inside a screen session. So you can have one screen and multiple windows dealing with specific jobs.</p>
<p>Inside of a screen, use the command sequence to create a new window:</p>
<pre><code>ctrl-a c
</code></pre><p>The initial window is 0, second is 1 and so on, and there&#39;s a number of ways to switch windows:</p>
<pre><code>ctrl-a [n]     // where [n] is the window number
ctrl-a ctrl-a  // switch to the last used window
ctrl-a &quot;       // show a list of all the windows
ctrl-a A       // change the title of this window
</code></pre><p>There&#39;s <a href="http://linux.about.com/od/Bash_Scripting_Solutions/a/The-Linux-Screen-Terminal-Window-Manager-Key-Bindings.htm">lots more key bindings</a> you can use inside of screen that allows you to navigate the windows beyond the scope of this article.</p>
<h2>Tricks</h2><p>Even if you use screen in it&#39;s simplest form (as I usually do), I wanted to share a few tricks I found whilst digging deeper in to screen.</p>
<h3>Lazy continuous integration</h3><p>This is a pretty dirty method, but it&#39;s worked for me in the past when I&#39;ve just wanted something to quickly work: <code>screen</code> + <code>watch</code> + <code>git pull</code> = <a href="https://remysharp.com/2012/06/16/development-trick-auto-updating-auto-reloading">auto deploy</a></p>
<h3>Multiuser screens</h3><p>To connect a second (or more) users to an existing screen session, use:</p>
<pre><code>screen -rx
</code></pre><p>Instead of detaching any users attached to the session (which is what would happen if we used <code>-r</code>) this allows me to join the session and anything I type in my window is echoed to any other users connected to the screen.</p>
<p>Maybe this could useful for remote support, or perhaps training. I&#39;ve not used this in the wild yet, but it&#39;s certainly a fun idea!</p>
<h3>Keeping History</h3><p>One problem with screen is the scroll back. If you scroll up in a screen, it doesn&#39;t scroll the history back, but the screen itself just scrolls away. To scroll back <em>inside</em> of the screen, you execute the <code>ctrl-a [</code> command. Now you can use your keyboard to navigate up and down (this is actually in &quot;copy mode&quot;). You can hit escape to return back to the prompt.</p>
<p>What might be more useful than a scroll back is a log of the screen session, which can be toggled on using <code>ctrl-a H</code>. This can be enabled by default with a <code>.screenrc</code> file though.</p>
<h3>Screen Defaults</h3><p>Finally, I&#39;ll you with my own <code>.screenrc</code>. Create this file in your home directory, and this can configure your startup options for screen:</p>
<pre><code># Always show a status line in the window footer
hardstatus on
hardstatus alwayslastline
hardstatus string &quot;%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %C%a &quot;

# Autodetach session on hangup instead of
# terminating screen completely
autodetach on

# Turn off the splash screen
startup_message off

# set log on all windows
deflog on
</code></pre><p><small>Reposted from <a href="http://webadvent.org/2012/persistent-terminal-sessions-by-remy-sharp">Web Advent 2012</a></small></p>
]]></content:encoded></item><item><title>Moment is quickly becoming my new jQuery!</title><guid isPermaLink="false">moment-is-quickly-becoming-my-new-jquery</guid><link>https://remysharp.com/2015/04/06/moment-is-quickly-becoming-my-new-jquery</link><pubDate>Mon, 06 Apr 2015 14:00:46 +0000</pubDate><description><![CDATA[What exactly does that mean? Well, working with the DOM pre-jQuery was a total nightmare of hoop jumping and remembering strange, backward, twisty-hand ways of moving and manipulating the DOM. Back in 2006, you drop in jQuery, and boom, you&#39;re done. But, over the years, I could see my jQuery code was getting lazy (and overly heavy handed).
Working with dates is a nightmare. The library moment.js beautifully and simply removes quite a bit of the pain.]]></description><content:encoded><![CDATA[<p>What exactly does that mean? Well, working with the DOM pre-jQuery was a total nightmare of hoop jumping and remembering strange, backward, twisty-hand ways of moving and manipulating the DOM. Back in 2006, you drop in jQuery, and boom, you&#39;re done. But, over the years, I could see my jQuery code was getting lazy (and overly heavy handed).</p>
<p>Working with <a href="https://www.youtube.com/watch?v=-5wpm-gesOY">dates is a nightmare</a>. The library <a href="http://momentjs.com">moment.js</a> beautifully and simply removes <em>quite a bit</em> of the pain.</p>
<!--more-->
<p>In JavaScript, the <code>Date</code> object was originally a straight port from the Java (<a href="https://twitter.com/rem/status/585074626868445184">ref</a>), which means getting into a nice format like <code>2015-09-13</code> is quite a bit of fudderling. Moment takes the pain away.</p>
<p>Then it also gives us comparisons, formatting options, parsing, loads and loads of awesome stuff. Which explains why it&#39;s part of my default stack and appears in all my projects.</p>
<p>Nearly all my handlebar projects have this partial included for instance:</p>
<pre><code class="language-js">hbs.registerHelper(&#39;moment&#39;, function (date, format) {
  return moment(date).format(format);
});
</code></pre>
<p>Except here&#39;s the rub, as with my jQuery code, I&#39;ve gotten a little too generous with moment, and now I&#39;m seeing one of our production projects with the CPU running at 100+% (how?!) most of the time, and dipping inside (via <code>node --prof</code>), I can see most of the time is spent in moment (doing regexp, parsing, formatting and so on).</p>
<p>There&#39;s a bunch of optimisations I can, and <em>am</em> doing, but here&#39;s an example I wanted to share.</p>
<h2>Refactoring out the laziness</h2><p>I have a handlebar helper that will try to match the day of two arguments, typically these arguments are timestamps, but it can also be the word &quot;today&quot;.</p>
<p>Here&#39;s the original source:</p>
<pre><code class="language-js">// healthy doses of line breaks for legibility in this blog post
hbs.registerHelper(&#39;matchDate&#39;, function (date, match, opts) {
  var matchDate = moment(
    match === &#39;today&#39; ?
    moment().add(config.offset, &#39;hour&#39;) :
    match
  );

  if (moment(date).format(&#39;YYYY-MM-DD&#39;) ==
    moment(matchDate).format(&#39;YYYY-MM-DD&#39;)) {

    return opts.fn(this);

  }
});

/* usage:
{{#matchDate @root.showtime date}}class=&quot;highlight&quot;{{/matchDate}}
*/
</code></pre>
<p>Reasonably cruft free, and pretty quick to write. But wait a second...looking at the code carefully, I can <em>now</em> see that in the best case, there&#39;s <em>three</em> calls to moment. Worst case: there&#39;s four!</p>
<p>Moment is great, but it&#39;s too easy (for me) to get lazy. I&#39;ve re-factored the code, and now it looks like this:</p>
<pre><code class="language-js">hbs.registerHelper(&#39;matchDate&#39;, function (date, match, opts) {
  var matchDate;
  if (match === &#39;today&#39;) {
    matchDate = moment().add(config.offset, &#39;hour&#39;);
  } else {
    matchDate = moment(match);
  }

  // using &#39;day&#39; on isSame will check if it&#39;s the same &quot;day&quot;
  if (matchDate.isSame(date, &#39;day&#39;)) {
    return opts.fn(this);
  }
});
</code></pre>
<p>Now just <em>one</em> call to moment (regardless of the path). There&#39;s probably an additional constructor call to moment (in the <code>isSame</code> parser), but it&#39;s still a lot better. The wider impact was this function (and many others like it) were being called hundreds of times on our main pages, which meant hundreds multiplied upwards many times, and quickly I understand the CPU hog.</p>
<h2>TL;DR: know your APIs</h2><p>This laziness was partly due to being really familiar with the low hanging functions, like <code>format</code>, instead of knowing the API really well and understanding all the ways I could have used the library.</p>
<p>// filed under &quot;duh&quot;</p>
]]></content:encoded></item></channel></rss>