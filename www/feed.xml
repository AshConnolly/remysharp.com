<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/"><channel><title>remy sharp's b:log</title><atom:link href="http://remysharp.com/feed/" rel="self" type="application/rss+xml"></atom:link><link>http://remysharp.com</link><description>About [code] and all that jazz</description><lastBuildDate>Wed, 29 Jul 2015 14:32:03 +0000</lastBuildDate><language>en-US</language><sy:updatePeriod>hourly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><item><title>Notes on porting my Pebble app to SDK3</title><guid isPermaLink="false">notes-on-porting-my-pebble-app-to-sdk-3</guid><link>http://remysharp.com/2015/07/29/notes-on-porting-my-pebble-app-to-sdk-3</link><pubDate>Wed, 29 Jul 2015 14:32:03 +0000</pubDate><description><![CDATA[Late last night I decided to update my Rest pebble app to make use of the colour features of BASALT, i.e. the Pebble Time&#39;s colour features.
In particular, I wanted the resting time to show in green and overtime to show as red. These are my notes that I gathered in porting the app to SDK 3 whilst still supporting the APLITE Pebble (or OG as I like to think).]]></description><content:encoded><![CDATA[
<p>Late last night I decided to update my Rest pebble app to make use of the colour features of BASALT, i.e. the Pebble Time&#39;s colour features.</p>
<p>In particular, I wanted the resting time to show in green and overtime to show as red. These are my notes that I gathered in porting the app to SDK 3 whilst still supporting the APLITE Pebble (or OG as I like to think).</p>
<h2>Layout</h2>
<p>With my app, I have a <code>ActionBarLayer</code> on the right with arrows and <code>TextLayer</code>s with the second countdown. I noticed when deploying to BASALT, the position was off, and in fact everything was closer.</p>
<p>I did some simple repositioning, but you can see from the screenshot below that the <code>ActionBarLayer</code> is actually slightly wider:</p>
<p><img src="/images/pebble-comparison1.png" alt="APLITE vs BASALT side-by-side"></p>
<p>This is emphasised when the count is actually going down:</p>
<p><img src="/images/pebble-comparison2.png" alt="APLITE vs BASALT side-by-side"></p>
<p>This is due to BASALT being &quot;full screen&quot; by default. So to compensate for this, I need to do conditional positioning on the elements. For the position of the <code>TextLayer</code>, I&#39;m using <code>134 - ACTION_BAR_WIDTH</code> (which is 30 for BASALT and 20 for APLITE):</p>
<pre><code class="language-cpp">s_textlayer_120 = text_layer_create(GRect(0, 12, 134 - ACTION_BAR_WIDTH, 42));</code></pre>
<p>To get the top positioning on the <code>TextLayer</code>s I couldn&#39;t seem to calculate the values correctly, so I had a conditional set of defines:</p>
<pre><code class="language-cpp">#ifdef PBL_PLATFORM_BASALT
  #define MENU_TOP 16
  #define MENU_MIDDLE 64
  #define MENU_BOTTOM 112
#else
  #define MENU_TOP 6
  #define MENU_MIDDLE 54
  #define MENU_BOTTOM 102
#endif</code></pre>
<h2>Developing for APLITE <em>and</em> BASALT</h2>
<p>I&#39;ve got an origial (kickstarter) Pebble and a Pebble Time. I&#39;m used to deploying to devices (rather than emulators, though I&#39;ll come on to this).</p>
<p>However, I found (after a <em>lot</em> of failure) that you can&#39;t develop for more than one Pebble device at a time. Importantly, on the phone Pebble app (be it Pebble or Pebble Time) <strong>you can only have one watch enabled for development</strong>.</p>
<p>The workaround is to keep switching between the two apps, flipping the developer checkbox.</p>
<p>Or...use the emulator on the command line. It&#39;s pretty solid, and conviently you can have both the BASALT <em>and</em> APLITE running side by side (as you seen from my shots above).</p>
<h2>UI tweaks</h2>
<p>Since my Rest app is designed to be used in the gym (I use the gym 4 times a week and use the Rest app <em>all</em> the time), there&#39;s a few important requirements:</p>
<ul>
<li>Clear to read (quickly)</li>
<li>Show the time</li>
</ul>
<p>Being clear to read was the motivation behind using colour in my app. Now I can quickly see if I&#39;m over or not based on colour.</p>
<p>However, BASALT apps all run in fullscreen - so you lose the time, which is useful to me because I need to know if my gym session is running over or not. Thankfully the developer docs include putting the time back in on their <a href="http://developer.getpebble.com/sdk/migration-guide/#using-the-status-bar">migration guide</a>.</p>
<p>What I needed to specifically do was ensure the <code>StatusBarLayer</code> was <em>under</em> my <code>ActionBarLayer</code>, otherwise you get this effect, where the <code>StatusBarLayer</code> cuts into the menu:</p>
<p><img src="/images/pebble-status-layer.png" alt="BASALT status bar layer order"></p>
<p>The fix is to simply ensure the <code>ActionBarLayer</code> is drawn <em>after</em> the <code>StatusBarLayer</code>.</p>
<h2>Get it</h2>
<p>So if you have a Pebble Time, or Pebble OG, and you use the gym, you can get the <a href="http://apps.getpebble.com/en_US/application/53ff41ed8cdf37902b000050">free app here</a> - and don&#39;t forget to <em>heart</em> it!</p>
]]></content:encoded></item><item><title>My Pebble</title><guid isPermaLink="false">my-pebble</guid><link>http://remysharp.com/2015/07/22/my-pebble</link><pubDate>Wed, 22 Jul 2015 15:37:23 +0000</pubDate><description><![CDATA[Back in April 2012 I joined the bandwagon and backed the hyped kickerstarter campaign for the very first Pebble.
After waiting way way too long and abandoning my original choice for an orange watch I was forced to choose the black, only to get my hands on it earlier.
I also hadn&#39;t worn a watch in well over 15 years. I&#39;m not 100% what prompted me to buy the watch. Perhaps the promise of an open source platform...?
When it fin-nal-ly arrived, what I noticed immediately was that it was massive on my wrist. The strap was particularly large and never really felt snug.
I figured it wouldn&#39;t even last 3 months on my wrist.

What was the point of the Pebble?
The Pebble gave me one important (to me) feature. Text messages (and calls) would vibrate on my wrist.
I&#39;d found that when I was away from home, I&#39;d nearly always miss text messages from my wife. Even when my phone was on vibrate and loud, I&#39;d still miss them.
A small vibration on my wrist would subtlety alert me to something I could decide to action or not. For me, this was a big deal and an important feature.

For the first 3 months it was a novelty. I kept reading about cool apps that could do text responses - but alas I was using an iPhone and none of this functionality was available to my phone.
The first turning point to my unimpressed state was spending 1 month trailing a move to Android. This experience totally opened up the Pebble&#39;s functionality to me. But that was just a trial, and I would move back to the (limiting) iPhone.
So, why and how am I still wearing my Pebble today?
My Pebble today
Some 2 years later I still wear my Pebble. Every day. It helps that I finally ditched my iPhone for an Android (a OnePlus One - and that&#39;s another blog post).
The strap has broken, it needs charging once a week (insane if you compare to a regular watch) and the bottom right action button (1 out of 4 buttons) is playing up.
One strange thing that kept happening, particularly strange if you consider how conservative the British are: random people would ask my &quot;how am I finding my watch?&quot;. A guy on a plane, someone in the gym changing rooms, it was all very strange (to me).
But with all these issues, the clunkiness and being forced to converse with other human beings: why am I still wearing it??!
I customised it. I made it mine. It&#39;s my watch, and there&#39;s no other watch like it.
Open source: learning &amp; modifying other people&#39;s&nbsp;code
I&#39;d tried in the past to make my own watch face but failed pretty hard. But then my second attempt took an existing watch face and made my own modifications, including using a custom font.
There is a memory leak in the original code that causes the watch face to crash every now and then, and I&#39;ll likely get around to debugging and fixing it...one day.
A tiny note: since I forked the project, the license on Simply Clean has changed/been removed. It doesn&#39;t affect my code, but I thought it was fair to point out.
I used CloudPebble for all of the development I&#39;ve done so far on the Pebble, and it&#39;s an absolutely superb resource.

I know JavaScript!
Although there&#39;s a couple of limitations in the JS apps, the simple fact is: I can create my ideas as JavaScript based Pebble apps in a matter of hours.
I recently wrote a quick interface to a local bus time webapp that I wrote. Now from my wrist, in a few presses I have the bus times on my wrist.
From a practical use, this is actually easier than using my phone because it takes a few seconds to do the geo-lookup and then request the content from the bus website, so when I&#39;m rushing around in the morning, I don&#39;t have to mess around with my phone.
I also wrote a simple prototype with a Spark that I could control LEDs from my watch. Pointless, but cool (see this short video demo).
There is, however, a small cost to pay with JavaScript apps:

They only work whilst you have a connection from your watch to your phone (since the actual JS is executed on the phone)
There&#39;s a laggy response time on the button presses, particularly (I&#39;ve noticed) going backwards through the app (or unloading)
Firing up the JS based Pebble app can interfere with apps running on the phone - I noticed that it would stop my OnePlus One&#39;s camera from recording video as I launch the JS app (which is where there&#39;s no video yet)

I (kinda) know C too...
The actual reason the button is failing on my Pebble is because I use it so much: I wrote a C based app that I use in the gym to time my rest time between sets. I called it (cleverly...) Rest.

Its simple. No animations, no nonsense. Three pre-set (configurable) times in seconds, and a timer. I&#39;m in the gym 4 times a week, and usually have around 20-25 sets. I use my app between every set. My app is exactly what I need for the task I perform multiple times a day.
How it affects my daily routine
As with the Rest app being part of my daily routing, the alarms are also an important part of my routing. I have alarms set throughout the day to remind me exactly when I need to eat. Silly as it sounds, making the watch integral to my daily routine is what&#39;s given me a reason to keep it charged and keep it on.
Being able to customise it, using my knowledge of code and knowing how to hack through other people&#39;s code has lulled me into loving this small piece of tech.
Being able to express myself in my pebble is what&#39;s made me love it.
I&#39;ve also realised that I always prefered the look of services like de.licio.us (circa 2005) over Magnolia, and in a way, the Pebble is when compared to the other smart watches out there.
A lot of my friends have asked me &quot;when are you getting the iWatch&quot;, to which I say I&#39;m not interested (seriously, follow me on twitter if you need an idea of how sick I am of Apple) - and in fact, I also backed the new Pebble Time project and I can&#39;t wait to get my hands on that device and play some more.
Next: Time
Akin with simplicity of the Pebble, my Pebble Time arrived in this simple cardboard, no-frills packaging, and I&#39;m keen to see how I can customise this watch and make it mine, again.

And when this happened, it totally made my day:
Okay @Pebble, this is awesome. No charge, but still tells the time. 💙💚💛💜 pic.twitter.com/fZdBfrFb88&mdash; Remy Sharp (@rem) July 11, 2015]]></description><content:encoded><![CDATA[
<p>Back in April 2012 I joined the bandwagon and backed the hyped kickerstarter campaign for the very first Pebble.</p>
<p>After waiting way way too long and abandoning my original choice for an orange watch I was forced to choose the black, only to get my hands on it earlier.</p>
<p>I also hadn&#39;t worn a watch in well over 15 years. I&#39;m not 100% what prompted me to buy the watch. Perhaps the promise of an open source platform...?</p>
<p>When it <em>fin-nal-ly</em> arrived, what I noticed immediately was that it was massive on my wrist. The strap was particularly large and never really felt snug.</p>
<p><strong>I figured it wouldn&#39;t even last 3 months on my wrist.</strong></p>
<hr>
<h2>What was the point of the Pebble?</h2>
<p>The Pebble gave me one important (to me) feature. Text messages (and calls) would vibrate on my wrist.</p>
<p>I&#39;d found that when I was away from home, I&#39;d nearly always miss text messages from my wife. Even when my phone was on vibrate and loud, I&#39;d still miss them.</p>
<p>A small vibration on my wrist would <em>subtlety</em> alert me to something I could decide to action or not. For me, this was a big deal and an important feature.</p>
<hr>
<p>For the first 3 months it was a novelty. I kept reading about cool apps that could do text responses - but alas I was using an iPhone and none of this functionality was available to my phone.</p>
<p>The first turning point to my unimpressed state was spending 1 month trailing a move to Android. This experience totally opened up the Pebble&#39;s functionality to me. But that was <em>just</em> a trial, and I would move back to the (limiting) iPhone.</p>
<p>So, why and how am I still wearing my Pebble today?</p>
<h2>My Pebble today</h2>
<p>Some 2 years later I still wear my Pebble. Every day. It helps that I finally ditched my iPhone for an Android (a OnePlus One - and that&#39;s another blog post).</p>
<p>The strap has broken, it needs charging once a week (insane if you compare to a regular watch) and the bottom right action button (1 out of 4 buttons) is playing up.</p>
<p>One strange thing that kept happening, particularly strange if you consider how conservative the British are: random people would ask my &quot;how am I finding my watch?&quot;. A guy on a plane, someone in the gym changing rooms, it was all very strange (to me).</p>
<p>But with all these issues, the clunkiness and being forced to converse with other human beings: <em>why</em> am I still wearing it??!</p>
<p>I customised it. I made it mine. It&#39;s <em>my</em> watch, and there&#39;s no other watch like it.</p>
<h2>Open source: learning &amp; modifying other people&#39;s&nbsp;code</h2>
<p>I&#39;d tried in the past to make my own watch face but failed pretty hard. But then my second attempt took an existing <a href="https://github.com/edwinfinch/simplyclean">watch face</a> and made <a href="https://github.com/remy/simplyclean/">my own</a> modifications, including using a custom font.</p>
<p>There <em>is</em> a memory leak in the original code that causes the watch face to crash every now and then, and I&#39;ll likely get around to debugging and fixing it...one day.</p>
<p><small>A tiny note: since I forked the project, the license on Simply Clean has changed/been removed. It doesn&#39;t affect my code, but I thought it was fair to point out.</small></p>
<p>I used <a href="https://cloudpebble.net">CloudPebble</a> for all of the development I&#39;ve done so far on the Pebble, and it&#39;s an absolutely superb resource.</p>
<p><img src="/images/pebble-og.jpg" alt="My OG Pebble"></p>
<h2>I know JavaScript!</h2>
<p>Although there&#39;s a couple of limitations in the JS apps, the simple fact is: I can create my ideas as JavaScript based Pebble apps in a matter of hours.</p>
<p>I recently wrote a <a href="https://github.com/remy/pebble-brighton-buses">quick interface</a> to a <a href="http://buses.leftlogic.com">local bus time webapp</a> that I wrote. Now from my wrist, in a few presses I have the bus times on my wrist.</p>
<p>From a practical use, this is actually easier than using my phone because it takes a few seconds to do the geo-lookup and then request the content from the bus website, so when I&#39;m rushing around in the morning, I don&#39;t have to mess around with my phone.</p>
<p>I also wrote a simple prototype with a Spark that I could control LEDs from my watch. Pointless, but cool (<a href="https://instagram.com/p/sDFL0aqavo/">see this short video demo</a>).</p>
<p>There is, however, a small cost to pay with JavaScript apps:</p>
<ul>
<li>They <em>only</em> work whilst you have a connection from your watch to your phone (since the actual JS is executed on the phone)</li>
<li>There&#39;s a laggy response time on the button presses, particularly (I&#39;ve noticed) going backwards through the app (or unloading)</li>
<li>Firing up the JS based Pebble app can interfere with apps running on the phone - I noticed that it would stop my OnePlus One&#39;s camera from recording video as I launch the JS app (which is where there&#39;s no video yet)</li>
</ul>
<h3>I (kinda) know C too...</h3>
<p>The <em>actual reason</em> the button is failing on my Pebble is because I use it so much: I wrote a C based app that I use in the gym to time my rest time between sets. I called it (cleverly...) <a href="https://apps.getpebble.com/en_US/application/53ff41ed8cdf37902b000050">Rest</a>.</p>
<p><img src="/images/pebble-rest.jpg" alt="Rest app"></p>
<p>Its simple. No animations, no nonsense. Three pre-set (configurable) times in seconds, and a timer. I&#39;m in the gym 4 times a week, and usually have around 20-25 sets. I use my app between <em>every</em> set. My app is <strong>exactly</strong> what I need for the task I perform multiple times a day.</p>
<h2>How it affects my daily routine</h2>
<p>As with the Rest app being part of my daily routing, the alarms are also an important part of my routing. I have alarms set throughout the day to remind me exactly when I need to eat. Silly as it sounds, making the watch integral to my daily routine is what&#39;s given me a reason to keep it charged and keep it on.</p>
<p>Being able to customise it, using my knowledge of code and knowing how to hack through other people&#39;s code has lulled me into loving this small piece of tech.</p>
<p><strong>Being able to express myself in my pebble is what&#39;s made me love it.</strong></p>
<p>I&#39;ve also realised that I always prefered the look of services like de.licio.us (circa 2005) over Magnolia, and in a way, the Pebble is when compared to the other smart watches out there.</p>
<p>A <em>lot</em> of my friends have asked me &quot;when are you getting the iWatch&quot;, to which I say I&#39;m not interested (<em>seriously</em>, <a href="https://twitter.com/rem">follow me on twitter</a> if you need an idea of how <a href="https://twitter.com/search?q=from%3Arem%20apple&amp;src=typd">sick I am of Apple</a>) - and in fact, I <em>also</em> backed the new Pebble Time project and I can&#39;t wait to get my hands on that device and play some more.</p>
<h2>Next: Time</h2>
<p>Akin with simplicity of the Pebble, my Pebble Time arrived in this simple cardboard, no-frills packaging, and I&#39;m keen to see how I can customise this watch and make it mine, again.</p>
<p><img src="/images/pebble-time-packaging.jpg" alt="Pebble Time packaging"></p>
<p>And when this happened, it totally made my day:</p>
<p><blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">Okay <a href="https://twitter.com/Pebble">@Pebble</a>, this is awesome. No charge, but still tells the time. 💙💚💛💜 <a href="http://t.co/fZdBfrFb88">pic.twitter.com/fZdBfrFb88</a></p>&mdash; Remy Sharp (@rem) <a href="https://twitter.com/rem/status/619767989605376000">July 11, 2015</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content:encoded></item><item><title>Optimising a canvas animation</title><guid isPermaLink="false">optimising-a-canvas-animation</guid><link>http://remysharp.com/2015/07/13/optimising-a-canvas-animation</link><pubDate>Mon, 13 Jul 2015 7:50:37 +0000</pubDate><description><![CDATA[I&#39;ve been working on a small canvas animation for ffconf 2015 and realised two important optimisations that I&#39;ve missed out on the past.
The net result: no more humming fan on my laptop.]]></description><content:encoded><![CDATA[
<p>I&#39;ve been working on a small canvas animation for <a href="http://2015.ffconf.org">ffconf 2015</a> and realised two important optimisations that I&#39;ve missed out on the past.</p>
<p>The net result: no more humming fan on my laptop.</p>
<p>The result is this simple retro animation that will only last a few days in production, so I&#39;ve included a tweaked version here:</p>
<p><a class="jsbin-embed" href="https://jsbin.com/zulaha/8/embed?js,output">JS Bin on jsbin.com</a><script src="https://static.jsbin.com/js/embed.min.js?3.30.3"></script></p>
<p>For the sake of brevity (and actually getting this post written under the usual <em>several hours</em>), I&#39;m just going to talk about what I changed.</p>
<h2>Pinning FPS</h2>
<p>I knew that the &quot;right&quot; approach was to use <code>requestAnimationFrame</code> (rAF) for animation, but my problems historically is that the call rate of my update function was way, way too often. This can either cause my animation to appear to be <em>too</em> quick, or results in the CPU overheating.</p>
<p>One nice advantage of rAF for animation is that it will stop firing when the tab is out of focus (i.e. if you switch to another tab). Whereas <code>setInterval</code> not only doesn&#39;t hit the timing you want, but it&#39;ll <em>keep</em> firing, burning up battery.</p>
<p><strong>TIL</strong> <code>requestAnimationFrame</code> passes in a <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame#Parameters">high resolution timestamp</a> to the callback.</p>
<p>Using the timestamp, we can get a delta of the last run, and if, and only if, the last frame was drawn X FPS ago, then we&#39;ll draw a new frame. For example:</p>
<pre><code class="language-js">var lastFrameTime = 0;
function draw(elapsedTime) {
  // calculate the delta since the last frame
  var delta = elapsedTime - (lastFrameTime || 0);

  // queue up an rAF draw call
  window.requestAnimationFrame(draw);

  // if we *don&#39;t* already have a first frame, and the
  // delta is less than 33ms (30fps in this case) then
  // don&#39;t do anything and return
  if (lastFrameTime &amp;&amp; delta &lt; 33) {
    return;
  }
  // else we have a frame we want to draw at 30fps...

  // capture the last frame draw time so we can work out
  // a delta next time.
  lastFrameTime = elapsedTime;

  // now do the frame update and render work
  // ...
}</code></pre>
<h2>Minimise your paints</h2>
<p>Originally my demo was drawing a number of squares that would scale towards the viewer giving the impression of movement. Initially innocuous:</p>
<pre><code class="language-js">function draw() {
  // ... calculate x, y, scale, etc
  // makes the shape: |_|
  ctx.beginPath();
  ctx.moveTo(x, y);
  ctx.lineTo(x, y + y2);
  ctx.lineTo(x + x2, y + y2);
  ctx.lineTo(x + x2, y);
  ctx.stroke();
  ctx.closePath();
}

// update is called on a new frame
function update() {
  // ... update state then draw:
  for (i = 0; i &lt; boxes.length; i++) {
    boxes[i].draw();
  }
}</code></pre>
<p>This would be repeated for every &quot;box&quot; animating towards the viewer. Since I&#39;m just drawing lines, I could batch all these together all in one go and group the collective shapes under one path, then run a <em>single</em> stroke:</p>
<pre><code class="language-js">function draw() {
  // ... calculate x, y, scale, etc
  // makes the shape: |_|
  ctx.moveTo(x, y);
  ctx.lineTo(x, y + y2);
  ctx.lineTo(x + x2, y + y2);
  ctx.lineTo(x + x2, y);
}

// update is called on a new frame
function update() {
  // ... update state then draw:
  ctx.beginPath();
  for (i = 0; i &lt; boxes.length; i++) {
    boxes[i].draw();
  }
  ctx.stroke();
  ctx.closePath();
}</code></pre>
<p>It&#39;s a fairly tiny optimisation, but the result is the same, but with less interaction with the canvas, and given we&#39;re aiming to be in and out quickly, it&#39;s not a bad thing.</p>
<h2>Single rAF handler</h2>
<p>If you&#39;ve got more than one animation running, you&#39;ll need to set-up multiple callbacks to <code>requestAnimationFrame</code>, but having multiple rAF callbacks isn&#39;t ideal, and starts to get unwieldy when you&#39;re working with others who <em>also</em> want to queue up their animations.</p>
<p>You really want everything to be handled in a <em>single</em> rAF handler.</p>
<p>I&#39;ve written a small gist called <strong><a href="https://gist.github.com/remy/36f388d72c1ef161582f">raf.js</a></strong> that allows me to put all my rAF calls through a single handler (and added some niceties like the FPS pinning and a <code>running</code> boolean flag).</p>
]]></content:encoded></item><item><title>You know what they say about assumptions...</title><guid isPermaLink="false">assumptions</guid><link>http://remysharp.com/2015/07/02/assumptions</link><pubDate>Thu, 02 Jul 2015 14:49:53 +0000</pubDate><description><![CDATA[During our heated panel at EdgeConf 2015 on progressive enhancement Jeremy points out that by trying to anticipate your users&#39; needs, you&#39;re making assumptions, and you know what they say about assumptions.
Although he didn&#39;t say so explicitly, there was certainly an undertone that it was something we should admit to ourselves. I&#39;d like to add: for better or worse.
The wider impact of assumptions about your user (for example that they&#39;re viewing on a desktop device) is the exclusion of others.
Jeremy argued, rightly, that you should aim to develop for the absolute lowest technological solution as possible to suit your all your visitors basic needs: known and unknown.
I&#39;ll say it now: I make all kinds of assumptions about my users. A couple of the most common assumption I make is that they can read English, and that they&#39;re visiting using a browser that&#39;s capable of rendering HTML correctly.
Then my base level assumption changes depending on the application and adjusts over time depending on feedback.


Just one example was that JS Bin&#39;s static code used to be served from a single server which suited most users. One day a bug was filed by an individual in Iran notifying me that JS Bin simply would get past the loader (an example of JavaScript was enabled, but not getting down the wire in time before the connection timed out). Putting the static content (scripts, etc) on a CDN fixed this instantly. A simple retroactive fix.
Lee Byron, working for Facebook, was a fellow panellist brought up an excellent case study that users in Japan, unbeknownst to Facebook had such oddball (but popular) devices that HTML and CSS wasn&#39;t rendering as expected leaving the site in an unusable (or very difficult to use) state.
How low do you go? The real answer is you can never go too low because there&#39;s always going to be a case that isn&#39;t catered for because you can&#39;t test for it.
I believe, that progressive enhancing should be part of your workflow. Common HTML elements, delivering baseline functionality to all users, and then enhancing. All does not mean it has to work with cURL. That&#39;s my take. You have to decide for yourself.
We all make assumptions. Ranging from the language our users can read, to the HTML and CSS support, to the level of JavaScript and the prerequisite on high level JavaScript APIs.
Don&#39;t be ashamed. Just own those assumptions.
Also, thank you to Jeremy for running his eyes over this post.]]></description><content:encoded><![CDATA[
<p>During our heated panel at EdgeConf 2015 on progressive enhancement <a href="https://adactio.com">Jeremy</a> points out that by trying to anticipate your users&#39; needs, <strong>you&#39;re making assumptions</strong>, and <a href="https://www.youtube.com/watch?v=G-2NimrRPAQ">you know what they say about assumptions</a>.</p>
<p>Although he didn&#39;t say so explicitly, there was certainly an undertone that it was something we should admit to ourselves. I&#39;d like to add: <em>for better or worse</em>.</p>
<p>The wider impact of assumptions about your user (for example that they&#39;re viewing on a desktop device) is the exclusion of others.</p>
<p>Jeremy argued, rightly, that you should aim to develop for the absolute lowest technological solution as possible to suit your <em>all</em> your visitors basic needs: known and unknown.</p>
<p>I&#39;ll say it now: I make all kinds of assumptions about my users. A couple of the most common assumption I make is that they can read English, and that they&#39;re visiting using a browser that&#39;s capable of rendering HTML correctly.</p>
<p>Then my base level assumption changes depending on the application and adjusts over time depending on feedback.</p>
<!-- [Talky.io](https://talky.io/) is an excellent example to zoom in on. Their technology *requires* WebRTC. This assumes that their users have JavaScript, for without it, there is no product. -->

<p>Just one example was that JS Bin&#39;s static code used to be served from a single server which suited most users. One day a bug was filed by an individual in Iran notifying me that JS Bin simply would get past the loader (an example of JavaScript was enabled, but not getting down the wire in time before the connection timed out). Putting the static content (scripts, etc) on a CDN fixed this instantly. A simple retroactive fix.</p>
<p><a href="https://twitter.com/leeb">Lee Byron</a>, working for Facebook, was a fellow panellist brought up an <a href="https://twitter.com/leeb/status/616612662718427136">excellent case study</a> that users in Japan, unbeknownst to Facebook had such oddball (but popular) devices that HTML and CSS wasn&#39;t rendering as expected leaving the site in an unusable (or very difficult to use) state.</p>
<p>How low do you go? The real answer is you can never go too low because there&#39;s always going to be a case that isn&#39;t catered for because <a href="https://twitter.com/triblondon/status/615894823384420354">you can&#39;t test for it</a>.</p>
<p>I believe, that progressive enhancing <strong>should</strong> be part of your workflow. Common HTML elements, delivering baseline functionality to all users, and then enhancing. <strong>All does not mean it has to work with cURL</strong>. That&#39;s <em>my</em> take. You have to decide for yourself.</p>
<p>We <em>all</em> make assumptions. Ranging from the language our users can read, to the HTML and CSS support, to the level of JavaScript and the prerequisite on high level JavaScript APIs.</p>
<p>Don&#39;t be ashamed. Just <strong>own</strong> those assumptions.</p>
<p><small>Also, thank you to Jeremy for running his eyes over this post.</small></p>
]]></content:encoded></item><item><title>Reducing my CPU load from 95% to 20%</title><guid isPermaLink="false">how-i-reduced-cpu-load-from-95-to-20</guid><link>http://remysharp.com/2015/06/16/how-i-reduced-cpu-load-from-95-to-20</link><pubDate>Tue, 16 Jun 2015 22:04:43 +0000</pubDate><description><![CDATA[I&#39;ve recently released a number of changes to JS Bin after I started to tinker (again) with Service Worker support in JS Bin (no, there&#39;s nothing there right now). However, since the release on Saturday, the CPU has been steadily sitting at 95% - which is dangerously close to the 502-o-death page.
Except, if I&#39;m honest with myself, the CPU has been high since...well, since I can remember (going further back into 2013).
Until this afternoon. I made one change, and boom: 20%. Stable. Also, I&#39;ll be filling this under &quot;duh&quot;.]]></description><content:encoded><![CDATA[
<p>I&#39;ve recently released a number of changes to JS Bin after I started to tinker (again) with Service Worker support in JS Bin (no, there&#39;s nothing there right now). However, since the release on Saturday, the CPU has been steadily sitting at 95% - which is dangerously close to the <a href="https://jsbin.com/test/error/502">502</a>-o-death page.</p>
<p>Except, if I&#39;m honest with myself, the CPU has been high since...well, since I can remember (going further back into 2013).</p>
<p>Until this afternoon. I made one change, and boom: 20%. Stable. Also, I&#39;ll be filling this under <a href="https://remysharp.com/search?q=%22duh%22">&quot;duh&quot;</a>.</p>
<h2>Solution</h2>
<p>Although JS Bin&#39;s code would load a config file and <a href="https://github.com/jsbin/jsbin/blob/master/lib/app.js#L61">set the</a> <code>NODE_ENV</code> dynamically. Except...it wasn&#39;t actually being set early enough.</p>
<p>I changed the <a href="https://github.com/jsbin/production/blob/master/apps.jsbin.com/etc/init/jsbin.conf#L18">upstart script</a> to execute <em>directly</em> in production mode, and voilà, the CPU dropped to a nice stable 20% (or so, rising and falling as I&#39;d expect).</p>
<h2>The how</h2>
<p>The obvious thing was that the CPU was running very hot and consistently. JS Bin has a lot of traffic, but when the CPU is that high, it&#39;s usually going to die rather soon. As I had released some changes at the weekend, I knew that it was potentially a problem in the new code - the problem was also that JS Bin has run around the 70-90% mark for many, many months.</p>
<h3>Instrumentation</h3>
<p>The code would need instrumentation, so I looked at some tools to see if I could get some insights into what was going wrong. I <em>used</em> to have a (free) nodetime account but that wouldn&#39;t let me in because I had somehow run more than one application with the API key.</p>
<p>I tried out New Relic, which after first was pretty awesome, amazing charts, very pretty (though didn&#39;t lead me to anything obvious) - but something seemed wrong in the JS Bin process. The memory footprint was going up pretty steadily to capacity. Soon enough the process topped out and I removed the New Relic code. It turns out there&#39;s a <a href="https://discuss.newrelic.com/t/memory-leaking-only-with-node-js-agent-installed/14448/28?u=cjones">memory leak that&#39;s being addressed</a>, but it&#39;s not solved at the core (since it&#39;s a node problem rather than New Relic).</p>
<p>StrongLoop was next, but once I got the CLI tool installed (after some issues), I couldn&#39;t work out how to connect to the client using the web interface...at all. Another abandon.</p>
<p><a href="https://keymetrics.io/">Keymetrics</a> was also suggested (which, I believe, is produced by the makers of <a href="https://github.com/Unitech/pm2">PM2</a> a Process Management tool for node) - but it didn&#39;t look like it could do instrumentation, so I didn&#39;t proceed.</p>
<p>In the end though, and randomly, my nodetime account started working..!</p>
<p>The problem was: I&#39;ve never really been able to read the nodetime data to make head nor tail of it...</p>
<h3>Clues</h3>
<p>Heading straight for the transaction profiler, I started watching the operations. The transactions refer to routes being hit, as since there&#39;s so much varied traffic, it doesn&#39;t really give any clues as to what&#39;s slow (unless there&#39;s a specific bin causing the problem). But there it was, clear as day:</p>
<p><img src="/images/nodetime-transactions.png" alt="Nodetime transaction operations"></p>
<p>All that file IO shouldn&#39;t be happening. When looked closer, I could see the <code>readFile</code>s were all around my <code>view</code> directories. My templates. I had switched from <a href="https://www.npmjs.com/package/hbs">hbs</a> to <a href="https://www.npmjs.com/package/express-hbs">express-hbs</a> but it seemed weird that it wouldn&#39;t use pre-compiled templates in production mode.</p>
<p>I did some digging, of course there&#39;s no mention of switching to compiled templates in production mode in either npm modules (pre-compiled templates would mean it wouldn&#39;t read from disc to constantly be serving files).</p>
<p>Realising this, I figured my process must think it was in a development mode, and immediately updated my upstart script to run JS Bin with <code>NODE_ENV=production</code>.</p>
<p>The result was going from this (note <code>run.js</code> CPU):</p>
<p><img src="/images/jsbin-top-bad.png" alt="JS Bin top: bad"></p>
<p>To this:</p>
<p><img src="/images/jsbin-top-good.png" alt="JS Bin top: good"></p>
<p>So, yeah. Filed under &quot;duh&quot;.</p>
]]></content:encoded></item><item><title>Devtool tricks for when I forget</title><guid isPermaLink="false">devtool-tricks-for-when-i-forget</guid><link>http://remysharp.com/2015/06/09/devtool-tricks-for-when-i-forget</link><pubDate>Tue, 09 Jun 2015 14:50:20 +0000</pubDate><description><![CDATA[I&#39;ve recently completed a few of my mastering devtools workshops, so I&#39;m all over devtools again, and just this week spotted two tricks (I use) for when I &quot;forget&quot;.]]></description><content:encoded><![CDATA[
<p>I&#39;ve recently completed a few of my <a href="http://leftlogic.com/training/debug">mastering devtools workshops</a>, so I&#39;m all over devtools again, and just this week spotted two tricks (I use) for when I &quot;forget&quot;.</p>
<h2>Capturing XHR results</h2>
<p>One of my favourite commands in devtools is the <code>copy</code> function. It&#39;ll copy DOM nodes, it&#39;ll stringify objects and it saves that horrible long and tricky select, highlight, copy, edit, faff process.</p>
<p>However, sometimes I forget to set a breakpoint when my XHR requests come back so I can copy the response. But it&#39;s to fix.</p>
<p>Right click on the XHR request in the network panel, and select &quot;Copy response&quot;. Boom. I&#39;ve now captured the JSON response and I&#39;m good.</p>
<p><img src="/images/devtools-copy-response.jpg" alt="devtools copy response"></p>
<h2>Retrieving results from the ether</h2>
<p>It&#39;s not uncommon for me to run a command in the console, then realise I forgot to capture the result so I could run it through a <code>map</code> or some such process.</p>
<p><strong>This is where <code>$_</code> is a live saver, which contains the result of the last command run in the console.</strong></p>
<p>In the example below, I&#39;ve forgotten to capture the result of the promise so I can manipulate (or in this case, <code>copy</code>) the result. This is simply fixed by running a new command with <code>$_.then(...)</code>.</p>
<p><img src="/images/devtools-dollar-underscore.png" alt="devtools dollar underscore"></p>
<h2>Copy any <em>dead</em> logged value</h2>
<p>Sometimes I&#39;ll <code>console.log</code> out a value or object that I want to inspect. Then realise that actually I want to copy it. Old me would go back to the source code, and log out a <code>JSON.stringify</code>, but not new me.</p>
<p>It&#39;s really easy, right click on the object in the console, and &quot;Store as Global Variable&quot; (usually stored to <code>temp1</code>). Now it&#39;s easy to <code>copy(temp1)</code> and it&#39;ll automatically be converted into a JSON for me:</p>
<p><img src="/images/devtools-capture-for-copy.png" alt="devtools copy a global"></p>
<p>What&#39;s a trick, neat or otherwise, that you use on a regular basis?</p>
]]></content:encoded></item><item><title>Tiny two way data binding</title><guid isPermaLink="false">bind</guid><link>http://remysharp.com/2015/06/02/bind</link><pubDate>Tue, 02 Jun 2015 11:42:26 +0000</pubDate><description><![CDATA[Data binding to the DOM is just one of those things that&#39;s damn handy when you&#39;ve got it and super laborious when you don&#39;t. The problem is that it usually comes at a price of a hefty framework (hefty can apply to byte-size, but more often: the learning curve to use said framework).
So, as any good re-inventer of wheels, I wrote my own two-way data binding library, partly to experiment, partly to solve existing needs in my own projects - weighing in at &lt; 2K compressed.
I present (cleverly named): bind.js]]></description><content:encoded><![CDATA[
<p>Data binding to the DOM is just one of those things that&#39;s damn handy when you&#39;ve got it and super laborious when you don&#39;t. The problem is that it usually comes at a price of a hefty framework (hefty can apply to byte-size, but more often: the learning curve to use said framework).</p>
<p>So, as any good re-inventer of wheels, I wrote my own two-way data binding library, partly to experiment, partly to solve existing needs in my own projects - weighing in at &lt; 2K compressed.</p>
<p>I present (cleverly named): <strong><a href="https://github.com/remy/bind.js">bind.js</a></strong></p>
<h2>Demo time</h2>
<p>Below is an <a href="http://rem.jsbin.com/nepuda/edit?console,output">interactive demo</a> of bind in action. As you change the state of the form, you&#39;ll see the object update on the right (a <code>JSON.stringify</code> output).</p>
<p><a class="jsbin-embed" href="https://rem.jsbin.com/nepuda/embed?console,output">JS Bin on jsbin.com</a><script src="https://static.jsbin.com/js/embed.js"></script></p>
<h2>Example usage</h2>
<p>The concept behind the API is fairly simple: take an object bind it to functions and/selectors given a particular mapping.</p>
<p><a href="https://jsbin.com/remutu/edit?js,console,output">For example</a>, to bind a score and player name to the DOM:</p>
<pre><code class="language-js">var user = Bind({
  name: &#39;[new user]&#39;,
  game: { score: 0 }
}, {
  &#39;game.score&#39;: &#39;span.score&#39;,
  name: &#39;input[name=&quot;username&quot;]&#39;
})

// in the game
user.game.score += 25;</code></pre>
<p>...and the HTML updates take care of themselves. Then the user enters their name in the input field, it&#39;ll update the <code>user</code> object.</p>
<p>The mapping value is flexible too, and can be:</p>
<ul>
<li>A string representing a selector</li>
<li>A function which receives the new value</li>
<li>An object that supports any of the following properties: <code>dom</code>, <code>callback</code> and <code>transform</code></li>
</ul>
<p>With an object as the value of the mapping, it allows you to do a transform on your data before it lands in the DOM. This is obviously useful for things like updating <a href="https://jsbin.com/nemubo/1/edit?js,output">list elements</a>:</p>
<pre><code class="language-js">var data = Bind({
  cats: [&#39;nap&#39;, &#39;sam&#39;, &#39;prince&#39;]
}, {
  cats: {
    dom: &#39;#cats&#39;,
    transform: function (value) {
      return &#39;&lt;li&gt;I had a cat called &lt;em&gt;&#39; + this.safe(value) + &#39;&lt;/em&gt;&lt;/li&gt;&#39;;
    }
  },
  &#39;cats.0&#39;: {
    dom: &#39;#first-cat&#39;,
    transform: function (value) {
      return &#39;My first cat was &#39; + this.safe(value);
    }
  }
});</code></pre>
<p>Inside the <code>transform</code> function also has a helper, <code>this.safe()</code> which will escape your content safe for HTML.</p>
<h2>Object.observe?</h2>
<p>Nope. I&#39;m not using it, which is also why there&#39;s some limitations (property deletion being the main/only one).</p>
<p>Why not? Mostly for a larger platform of support. This library supports IE9 upwards (and thus all other browsers) and includes feature detection.</p>
<p>I also tried an <code>Object.observe</code> polyfill early on, but didn&#39;t have much success (though I don&#39;t recall what the issues were). I also fancies the code challenge :)</p>
<h2>HTML decorators?</h2>
<p>Nope (again). I was recently debugging some Knockout code, and found myself struggling as I realised that the actual binding was happening in the HTML, and the manipulation was happening in the separate JavaScript file.</p>
<p>So no, there&#39;s no <code>data-*</code> support, intentionally. All the code lives in one place: in the JavaScript.</p>
<p>I personally like that my data binding is all in one place. If you&#39;re not so keen, there&#39;s always Angular, Knockout and the like.</p>
<h2>Nice to haves</h2>
<p>I&#39;ve started opening a few <a href="https://github.com/remy/bind/issues">issues</a> on things I&#39;d like, but they currently include:</p>
<ul>
<li>Root object mapping support (i.e. to be able to hook a callback on <em>anything</em> changing)</li>
<li>Glob support, i.e. <code>me.*.name</code> will fire callbacks matching any path starting with <code>me</code> and ending with <code>name</code></li>
<li>Test to test every individual form element (currently it&#39;s a bit of a mishmash)</li>
</ul>
<p>Feel free to <a href="https://github.com/remy/bind/issues">raise an issue</a> or feature request or let me know if you&#39;d use this even!</p>
]]></content:encoded></item><item><title>Call for proposals at ffconf 2015</title><guid isPermaLink="false">call-for-proposals-at-ffconf-2015</guid><link>http://remysharp.com/2015/05/25/call-for-proposals-at-ffconf-2015</link><pubDate>Mon, 25 May 2015 12:44:33 +0000</pubDate><description><![CDATA[ffconf has it&#39;s event date (6-Nov 2015) and I&#39;ve been in the process of carefully curating the content I want to hear at this year&#39;s event again. As with each year, it takes place at the Duke of Yorks in Brighton, UK.
As always, I also make sure I allot a few positions for CFP, so here&#39;s what our CFP looks like.]]></description><content:encoded><![CDATA[
<p><a href="http://2015.ffconf.org">ffconf</a> has it&#39;s event date (6-Nov 2015) and I&#39;ve been in the process of carefully curating the content I want to hear at this year&#39;s event again. As with each year, it takes place at the <a href="https://www.flickr.com/groups/fullfrontalconf/pool/">Duke of Yorks</a> in Brighton, UK.</p>
<p>As always, I also make sure I allot a few positions for CFP, so here&#39;s what our CFP looks like.</p>
<p>If you think you&#39;ve got something to share, then get in touch. I&#39;ve included a few guidelines as to what I prefer from a proposal, and given you an idea of the kinds of topics I&#39;m interested in hearing about this year.</p>
<p>You can also follow the <a href="https://twitter.com/ffconf">@ffconf</a> twitter account for the latest announcements.</p>
<p><img src="/images/ffconf-2015.gif" alt="ffconf 2015 site"></p>
<h2>Proposal topic advice</h2>
<p>I&#39;ve also included what you can expect as a speaker at our event too.</p>
<p>A few topics that are of particular interest to me:</p>
<ul>
<li>Isomorphic JavaScript (or <em>&quot;something less contentious&quot;</em>) code and applications (ideally outside the world of &quot;easy with React&quot;)</li>
<li>Sysops for web developers (I&#39;m particularly interested in Docker/container solutions for web developers)</li>
<li>What we can learn in web development from other technology/disciplines</li>
<li>&quot;You&#39;re doing it wrong&quot;</li>
</ul>
<p>If you want to get an idea of the audience or who you proposal is for, the answer is simple: me. I curate for content that <em>I want to hear and see</em>. So if you (roughly) know my work, then you know the audience.</p>
<p>Topics that don&#39;t work, unless they&#39;re genuinely going to change the World, then CFPs like these generally fall to the bottom of the pile (sorry!):</p>
<ul>
<li>Big library specific talks (React, Ember, Angular, jQuery, etc)</li>
<li>Your company&#39;s new shiny product</li>
<li>Talks that are very similar to recent years of ffconf talks</li>
</ul>
<p>Send me the title of your talk, an outline of the talk and any extra information you want me to know about the idea: <a href="mailto:events@leftlogic.com?subject=ffconf2015%20speaking%20propsal">events@leftlogic.com</a>.</p>
<p><strong>It takes me a long time to process and decide on CFPs, so whilst there&#39;s no 8 sessions up on the site, it means your talk is still up for consideration. I will respond to everyone with a yay or nay eventually.</strong> If you want to come to ffconf, regardless of whether your CFP is selected, please buy a ticket and if your talk is selected, the ticket will be refunded and returns to the public pool of tickets.</p>
<h2>Our promise to you</h2>
<p>All our speakers are treated the same. We will:</p>
<ul>
<li>Pay for your travel. If you&#39;re flying long haul, we&#39;ll upgrade you to premium class (or whatever the name is for &quot;above economy&quot;)</li>
<li>Put you up in our &quot;speaker hotel&quot;. It&#39;s not that cool, but it&#39;s right in town and two minutes walk from our venue. We&#39;re also open to offering the hotel stay. If you want an extra day or two here and there, then that&#39;s cool too (obviously if everyone does this, it breaks our bank, but so far it&#39;s worked)</li>
<li>Arrange your travel and help you with anything you need ahead of the event</li>
<li>We can, if you need or want it, provide you with a mifi preloaded with data</li>
<li>All your food and drinks provided for you during the day before and the day of the conference (don&#39;t expect to buy a drink at the after party)</li>
<li>40 minute talk, generally we don&#39;t do Q&amp;A and it&#39;s best to err on the side of &quot;there is no wifi&quot;</li>
<li>£500 honourium - I know it&#39;s not much, but it&#39;s a bit of spending money to say thanks</li>
<li>A free pass to the next ffconf, and for evermore part of our growing and much loved speaker alumni</li>
<li>If you bought a ticket for ffconf2015, we&#39;ll refund the ticket (as we don&#39;t expect, or want, our speakers to pay)</li>
<li>Uphold our conference code of conduct, both for you, and our attendees (either will be, or based on <a href="http://confcodeofconduct.com">confcodeofconduct.com</a>)</li>
</ul>
<p>So I hope to hear from you soon!</p>
]]></content:encoded></item><item><title>Quick technique for API mocking</title><guid isPermaLink="false">quick-technique-for-api-mocking</guid><link>http://remysharp.com/2015/05/18/quick-technique-for-api-mocking</link><pubDate>Mon, 18 May 2015 13:00:00 +0000</pubDate><description><![CDATA[During server software development (i.e. node) I always strive to work offline, in that my development workflow doesn&#39;t depend on any online services.
However, sometimes that&#39;s not possible as there&#39;s some 3rd party API dependancy - as there was in my latest client work. The problem I found, was that the latency between my location and the 3rd party API was so high, that it was impacting on the workflow cycle of: debug, change, test, repeat. The load time was taking anywhere from 15-30 seconds each time.
So this was my quick work around to easily mock out the API so my development process could be faster.]]></description><content:encoded><![CDATA[
<p>During server software development (i.e. node) I always strive to work offline, in that my development workflow doesn&#39;t depend on any online services.</p>
<p>However, sometimes that&#39;s not possible as there&#39;s some 3rd party API dependancy - as there was in my latest client work. The problem I found, was that the latency between my location and the 3rd party API was so high, that it was impacting on the workflow cycle of: debug, change, test, repeat. The load time was taking anywhere from 15-30 seconds each time.</p>
<p>So this was my quick work around to easily mock out the API so my development process could be faster.</p>
<h2>The aims</h2>
<p>The aim was to, without much work at all, replicate specific API calls <em>without</em> modifying my application code. i.e. I could switch my mock API on and off as I needed.</p>
<p>It was also important that the time required to put a mock API in place, did <em>not</em> outweigh the time lost on the latency. Specifically, if the custom mock API turned into days of work, it would have been a total waste of time.</p>
<h2>The simple solution</h2>
<p>This code uses <a href="http://expressjs.com">Express 4</a>. It&#39;s entirely possible that there was a library that already existed, but the small amount of code that I had to write wins over finding, researching, checking and learning a new library.</p>
<h3>Capturing mock data</h3>
<p>First I had to run my way through each API call and save the raw output as a <code>.json</code> file in a local directory (not tracked in git) called <code>mock-data</code>.</p>
<p>Since all my internal API calls used a config value as the root of the API URL, it meant I could change my local config to point to my local mock API instead of the staging or production endpoint:</p>
<pre><code class="language-js">var config = require(&#39;./config&#39;);
var root = config.api;

function getOrder(id) {
  return request({ // a promise
    url: root + &#39;/order&#39;,
    type: &#39;json&#39;,
    body {
      id: id
    }
  });
}</code></pre>
<p>I would change my <code>config.api</code> value to point to `<a href="http://localhost/mock-api">http://localhost/mock-api</a>&#39; and the server I was developing would actually reply to the API requests using the code in the next section.</p>
<h3>Mock API Code</h3>
<p>The following code would be in (something like) <code>routes/mock-api.js</code>:</p>
<pre><code class="language-js">var express = require(&#39;express&#39;);
var fs = require(&#39;fs&#39;);
var router = express.Router();
// directory path to the mock json files
var mockPath = __dirname + &#39;/mock-data/&#39;;

var design = {
  &#39;POST /order&#39;: &#39;getOrder&#39;,
  &#39;POST /order/tickets&#39;: &#39;addTickets&#39;,
  &#39;DELETE /order/tickets&#39;: &#39;removeTicket&#39;,
}

module.exports = router;

Object.keys(design).forEach(function (req) {
  var method = req.split(&#39; &#39;).shift();
  var path = req.split(&#39; &#39;).pop();
  var mock = &#39;{}&#39;;
  try {
    mock = require(mockPath + design[req]);
  } catch (e) {}

  router.route(path)[method.toLowerCase()](function (req, res) {
    res.send(mock);
  });
});</code></pre>
<p>In my main <code>routes.js</code> file I can then conditionally load up my mock router:</p>
<pre><code>// snip...
if (config.mock) {
  app.use(&#39;/mock-api&#39;, require(&#39;./routes/mock-api&#39;));
}</code></pre>
<p>Now requests to my server (the same server I&#39;m doing my main development against), can respond to API requests with pre-baked data. Now my damn latency is a thing of the past!</p>
<h2>Taking it further</h2>
<p>I struggle to look at the above code without seeing ways to improve it - but as I pointed out in the aims: keep it simple, and keep the solution quick.</p>
<p>Here&#39;s a few ideas that spring to mind that might make the code more useful in different situations:</p>
<ul>
<li>Respond with different file types (rather than only <code>.json</code>)</li>
<li>Respond with inline JSON data (that would be defined in the <code>design</code>)</li>
<li>Support variables in the URL to pick different static responses (like <code>GET /order/:id</code>)</li>
</ul>
<p>I have done some similar work in my <a href="https://github.com/remy/servedir#mocked-router">static server</a> which also has limited support for interpolation in the response.</p>
<p>For now though, this simple version suits my requirements!</p>
]]></content:encoded></item><item><title>screen: Persistent Terminal Sessions</title><guid isPermaLink="false">screen</guid><link>http://remysharp.com/2015/04/27/screen</link><pubDate>Mon, 27 Apr 2015 11:45:00 +0000</pubDate><description><![CDATA[Have you ever had a remote terminal session running only have your connection drop out half way through a large task? Then you reconnect not knowing where it go up to, whether it crashed or what.
Screen is the solution to this problem. Screen allows you to start terminal sessions that you can disconnect from and resume at any time.]]></description><content:encoded><![CDATA[
<p>Have you ever had a remote terminal session running only have your connection drop out half way through a large task? Then you reconnect not knowing where it go up to, whether it crashed or what.</p>
<p><a href="http://www.gnu.org/software/screen/manual/screen.html">Screen</a> is the solution to this problem. Screen allows you to start terminal sessions that you can disconnect from and resume at any time.</p>
<p>I personally use screen a lot with <a href="http://nodejs.org">Node.js</a> web servers - so I can kick off the process, and resume my terminal session to check logs or errors or to restart the process in case it died.</p>
<p>This article is an introduction to screen for the average Joe/anne developers with a few tips and tricks.</p>
<h2>Installing</h2>
<p>Screen is a unix-y tool, so with Ubuntu I&#39;d use <code>apt-get</code> - it&#39;s also possible it&#39;s pre-installed on the machine (just type <code>screen</code> to find out):</p>
<pre><code>sudo apt-get install screen</code></pre>
<h2>Instant win with screen</h2>
<p>When I remote in to a machine, I run <code>screen</code> and it starts a new session (actually called a window - but I&#39;ll come on to more about these later). There&#39;s some blurb about what screen is, I hit return, and the session is ready.</p>
<p>From here I might start my process. Let&#39;s say I&#39;m doing some large database export.</p>
<p>Now I need to <em>detach</em> from the screen so I can cleanly close the remote session or do something else whilst the export is happening. I type the command sequence:</p>
<pre><code>ctrl-a d</code></pre>
<p>This will leave the session running and detach from the screen so you&#39;re back to your original terminal prompt.</p>
<p>To resume your screen session:</p>
<pre><code>screen -r</code></pre>
<p>This will take you back to your screen session.</p>
<p>But what if my connection drops and closes whilst I&#39;m inside of screen? When I resume my ssh session, the screen <em>could</em> still be attached, so that when I run <code>screen -r</code> it won&#39;t resume. This is simple to get around, you can detach the screen from <em>outside</em> of the screen session (and in our case, immediately resume using <code>-r</code>):</p>
<pre><code>screen -rd</code></pre>
<p>So now you&#39;ve got basic minimum use of screen, how about using some of it&#39;s features? Multiple screens, multiple windows, naming screen sessions &amp; windows, setting defaults in the screen like scroll back, or displaying the title of the screen in the terminal.</p>
<h2>Screen commands</h2>
<p>When you run screen more than once, you&#39;ll have multiple screen sessions on the go. To list the available screens:</p>
<pre><code>screen -ls</code></pre>
<p>If you have more than one, you&#39;ll need to name the screen you want to resume:</p>
<pre><code>$ screen -ls
There are screens on:
    17566.ttys001.remys-mba (Detached)
    18778.ttys001.remys-mba (Detached)
    19014.ttys001.remys-mba (Detached)

$ screen -r 18778</code></pre>
<p>This will resume the second screen (identified by it&#39;s process id). You can also resume last screen using <code>screen -RR</code>. But resuming using PIDs is ugly, so let&#39;s name the screens as we create them using the <code>-S</code> argument (this names the socket the screen connects to):</p>
<pre><code>$ screen -S database-dump
[ctrl-a d]
$ screen -ls
There are screens on:
    17566.ttys001.remys-mba (Detached)
    18778.ttys001.remys-mba (Detached)
    19014.ttys001.remys-mba (Detached)
    18898.database-dump (Detached)

$ screen -r database-dump</code></pre>
<p>Now we have multiple named screens, let&#39;s look at multiple windows inside of a screen.</p>
<h2>Screen windowing</h2>
<p>Screen supports having multiple &quot;windows&quot; inside a screen session. So you can have one screen and multiple windows dealing with specific jobs.</p>
<p>Inside of a screen, use the command sequence to create a new window:</p>
<pre><code>ctrl-a c</code></pre>
<p>The initial window is 0, second is 1 and so on, and there&#39;s a number of ways to switch windows:</p>
<pre><code>ctrl-a [n]     // where [n] is the window number
ctrl-a ctrl-a  // switch to the last used window
ctrl-a &quot;       // show a list of all the windows
ctrl-a A       // change the title of this window</code></pre>
<p>There&#39;s <a href="http://linux.about.com/od/Bash_Scripting_Solutions/a/The-Linux-Screen-Terminal-Window-Manager-Key-Bindings.htm">lots more key bindings</a> you can use inside of screen that allows you to navigate the windows beyond the scope of this article.</p>
<h2>Tricks</h2>
<p>Even if you use screen in it&#39;s simplest form (as I usually do), I wanted to share a few tricks I found whilst digging deeper in to screen.</p>
<h3>Lazy continuous integration</h3>
<p>This is a pretty dirty method, but it&#39;s worked for me in the past when I&#39;ve just wanted something to quickly work: <code>screen</code> + <code>watch</code> + <code>git pull</code> = <a href="https://remysharp.com/2012/06/16/development-trick-auto-updating-auto-reloading">auto deploy</a></p>
<h3>Multiuser screens</h3>
<p>To connect a second (or more) users to an existing screen session, use:</p>
<pre><code>screen -rx</code></pre>
<p>Instead of detaching any users attached to the session (which is what would happen if we used <code>-r</code>) this allows me to join the session and anything I type in my window is echoed to any other users connected to the screen.</p>
<p>Maybe this could useful for remote support, or perhaps training. I&#39;ve not used this in the wild yet, but it&#39;s certainly a fun idea!</p>
<h3>Keeping History</h3>
<p>One problem with screen is the scroll back. If you scroll up in a screen, it doesn&#39;t scroll the history back, but the screen itself just scrolls away. To scroll back <em>inside</em> of the screen, you execute the <code>ctrl-a [</code> command. Now you can use your keyboard to navigate up and down (this is actually in &quot;copy mode&quot;). You can hit escape to return back to the prompt.</p>
<p>What might be more useful than a scroll back is a log of the screen session, which can be toggled on using <code>ctrl-a H</code>. This can be enabled by default with a <code>.screenrc</code> file though.</p>
<h3>Screen Defaults</h3>
<p>Finally, I&#39;ll you with my own <code>.screenrc</code>. Create this file in your home directory, and this can configure your startup options for screen:</p>
<pre><code># Always show a status line in the window footer
hardstatus on
hardstatus alwayslastline
hardstatus string &quot;%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %C%a &quot;

# Autodetach session on hangup instead of
# terminating screen completely
autodetach on

# Turn off the splash screen
startup_message off

# set log on all windows
deflog on</code></pre>
<p><small>Reposted from <a href="http://webadvent.org/2012/persistent-terminal-sessions-by-remy-sharp">Web Advent 2012</a></small></p>
]]></content:encoded></item><item><title>Moment is quickly becoming my new jQuery!</title><guid isPermaLink="false">moment-is-quickly-becoming-my-new-jquery</guid><link>http://remysharp.com/2015/04/06/moment-is-quickly-becoming-my-new-jquery</link><pubDate>Mon, 06 Apr 2015 14:00:46 +0000</pubDate><description><![CDATA[What exactly does that mean? Well, working with the DOM pre-jQuery was a total nightmare of hoop jumping and remembering strange, backward, twisty-hand ways of moving and manipulating the DOM. Back in 2006, you drop in jQuery, and boom, you&#39;re done. But, over the years, I could see my jQuery code was getting lazy (and overly heavy handed).
Working with dates is a nightmare. The library moment.js beautifully and simply removes quite a bit of the pain.]]></description><content:encoded><![CDATA[
<p>What exactly does that mean? Well, working with the DOM pre-jQuery was a total nightmare of hoop jumping and remembering strange, backward, twisty-hand ways of moving and manipulating the DOM. Back in 2006, you drop in jQuery, and boom, you&#39;re done. But, over the years, I could see my jQuery code was getting lazy (and overly heavy handed).</p>
<p>Working with <a href="https://www.youtube.com/watch?v=-5wpm-gesOY">dates is a nightmare</a>. The library <a href="http://momentjs.com">moment.js</a> beautifully and simply removes <em>quite a bit</em> of the pain.</p>
<p>In JavaScript, the <code>Date</code> object was originally a straight port from the Java (<a href="https://twitter.com/rem/status/585074626868445184">ref</a>), which means getting into a nice format like <code>2015-09-13</code> is quite a bit of fudderling. Moment takes the pain away.</p>
<p>Then it also gives us comparisons, formatting options, parsing, loads and loads of awesome stuff. Which explains why it&#39;s part of my default stack and appears in all my projects.</p>
<p>Nearly all my handlebar projects have this partial included for instance:</p>
<pre><code class="language-js">hbs.registerHelper(&#39;moment&#39;, function (date, format) {
  return moment(date).format(format);
});</code></pre>
<p>Except here&#39;s the rub, as with my jQuery code, I&#39;ve gotten a little too generous with moment, and now I&#39;m seeing one of our production projects with the CPU running at 100+% (how?!) most of the time, and dipping inside (via <code>node --prof</code>), I can see most of the time is spent in moment (doing regexp, parsing, formatting and so on).</p>
<p>There&#39;s a bunch of optimisations I can, and <em>am</em> doing, but here&#39;s an example I wanted to share.</p>
<h2>Refactoring out the laziness</h2>
<p>I have a handlebar helper that will try to match the day of two arguments, typically these arguments are timestamps, but it can also be the word &quot;today&quot;.</p>
<p>Here&#39;s the original source:</p>
<pre><code class="language-js">// healthy doses of line breaks for legibility in this blog post
hbs.registerHelper(&#39;matchDate&#39;, function (date, match, opts) {
  var matchDate = moment(
    match === &#39;today&#39; ?
    moment().add(config.offset, &#39;hour&#39;) :
    match
  );

  if (moment(date).format(&#39;YYYY-MM-DD&#39;) ==
    moment(matchDate).format(&#39;YYYY-MM-DD&#39;)) {

    return opts.fn(this);

  }
});

/* usage:
{{#matchDate @root.showtime date}}class=&quot;highlight&quot;{{/matchDate}}
*/</code></pre>
<p>Reasonably cruft free, and pretty quick to write. But wait a second...looking at the code carefully, I can <em>now</em> see that in the best case, there&#39;s <em>three</em> calls to moment. Worst case: there&#39;s four!</p>
<p>Moment is great, but it&#39;s too easy (for me) to get lazy. I&#39;ve re-factored the code, and now it looks like this:</p>
<pre><code class="language-js">hbs.registerHelper(&#39;matchDate&#39;, function (date, match, opts) {
  var matchDate;
  if (match === &#39;today&#39;) {
    matchDate = moment().add(config.offset, &#39;hour&#39;);
  } else {
    matchDate = moment(match);
  }

  // using &#39;day&#39; on isSame will check if it&#39;s the same &quot;day&quot;
  if (matchDate.isSame(date, &#39;day&#39;)) {
    return opts.fn(this);
  }
});</code></pre>
<p>Now just <em>one</em> call to moment (regardless of the path). There&#39;s probably an additional constructor call to moment (in the <code>isSame</code> parser), but it&#39;s still a lot better. The wider impact was this function (and many others like it) were being called hundreds of times on our main pages, which meant hundreds multiplied upwards many times, and quickly I understand the CPU hog.</p>
<h2>TL;DR: know your APIs</h2>
<p>This laziness was partly due to being really familiar with the low hanging functions, like <code>format</code>, instead of knowing the API really well and understanding all the ways I could have used the library.</p>
<p>// filed under &quot;duh&quot;</p>
]]></content:encoded></item><item><title>Diet</title><guid isPermaLink="false">diet</guid><link>http://remysharp.com/2015/03/11/diet</link><pubDate>Wed, 11 Mar 2015 14:30:00 +0000</pubDate><description><![CDATA[I&#39;ve been asked a few times what&#39;s my diet like, specifically, and I wanted to write it up here so I actually remember in years to come. This is because I&#39;ve gone from 30%+ body fat (obese) to 11.75% (inside athlete categorisation) over 2 years.]]></description><content:encoded><![CDATA[
<p>I&#39;ve been asked a few times what&#39;s my diet like, specifically, and I wanted to write it up here so I actually remember in years to come. This is because I&#39;ve gone from 30%+ body fat (obese) to 11.75% (inside athlete categorisation) over 2 years.</p>
<p><img src="/images/2012-2014.jpg" alt="2012 - 2014"></p>
<div class="update"><small><strong>Updated 4-July 2015:</strong> I recently watched a video of a male (a few years younger than me) taking a DEXA scan (the best that science can throw at a body fat value) and coming out at 12.5% body fat. He was ripped—a full on fitness model, and the type of body that I do not have. This tells me that if you chopped me up and analysed the fat on my body, you&#39;d get more than the 11.75% I&#39;m claiming above. I&#39;m just adding this for my own disclosure. For me however, I&#39;ve still made huge progress.</small></div>

<h2>Purpose</h2>
<p>The first consideration I had back at the start of 2013 was how do I start and what do I want to achieve?</p>
<p>I&#39;d read a lot around the <a href="http://en.wikipedia.org/wiki/Paleolithic_diet">Palio diet</a> and the <a href="http://en.wikipedia.org/wiki/Slow-Carb_Diet">Slow-Carb diet</a> and a decided that if I was to get outside of the obese categorisation, I needed something simple. I needed to lose weight (body fat) and diet is 80% of the job (20% is the gym).</p>
<p>I decided that I would cut wheat and dairy out of my diet. That&#39;s all (to start off with).</p>
<p>That means no cheese. No sandwiches. No cheese sandwiches either. I can&#39;t say it was easy, and lunch was very hard. Lunchtime became falafel or burrito salad boxes. But there&#39;s no avoiding it, what you ultimately have to do is cook your own food ahead of time.</p>
<p>In addition, by mid-March that year, I also quit drinking for 3 months, long enough that I&#39;m not really bothered about drinking today.</p>
<p>This diet change, combined with the gym (not cardio, just lifting heavy and compound lifts) 3 days a week go me what I needed: down to 25% in 4 months.</p>
<h2>66 days</h2>
<p>You can&#39;t change your habits overnight. It typically takes <a href="http://www.telegraph.co.uk/health/healthnews/5857845/It-takes-66-days-to-form-a-habit.html">two months</a> to create a new habit. For me, that was my change of diet (and knowing what to eat at lunchtime!) and the gym.</p>
<p>It&#39;s hard, there&#39;s no doubt, but for me, it was, and is: worth it.</p>
<p>But to achieve that first hurdle of 2 months, you need to prevent failing.</p>
<h2>Failing</h2>
<p>I&#39;ve written <a href="https://remysharp.com/2014/01/27/cheat">about this before</a>, but here&#39;s the short version: cheat and do everything you can to make it impossible to fail.</p>
<p>Too often have I tried to start something new, only to miss one day of that something, then a week, then I&#39;m procrastinating, then I&#39;m embarrassed and eventually I admit I&#39;ve failed.</p>
<p>In this case, if I miss a day (of the gym or slip up on the diet), then it&#39;s a <em>cheat</em>. I&#39;ll tell myself I&#39;m allowed to, and it&#39;s intentional. If it&#39;s going to be two days of cheating, the <em>it&#39;s all part of the plan</em>.</p>
<p>I plan Saturday as my cheat day. And I go bananas...</p>
<figure><img class="withcredit" src="/images/cheat-day.jpg" title="Cheat day"><figcaption class="credit">And sometimes <a href="https://www.youtube.com/watch?v=VWgwJfbeCeU">I&#39;ll go crazy on the Butterfield diet</a>!</figcaption></figure>

<p>It&#39;s possibly not ideal to go <em>so</em> nuts, and more recently I&#39;ve backed off a bit, but it&#39;s my cheat day, and it keeps me sane and it can be fun too!</p>
<h2>My diet</h2>
<p>Just to be clear: this is not <em>a</em> diet, this is just <em>my</em> diet. This is based on a roughly 1,500-1,700 calories consumed aiming for a carb, protein and fat split of 30%, 50% and 20% respectively (though gym days would tend to be at the high end).</p>
<p>I&#39;ve broken my day into the times that I eat. When I include more than one item, it means that I&#39;ll rotate any of these foods. Where I&#39;ve included links, it&#39;s either to the specific product or recipes.</p>
<p>Note that this is also based on working from an office that only had a fridge, but no heating equipment. And yes, it&#39;s dull. It doesn&#39;t vary that much, but heck, when I was buying the same sandwich 3 times a week from the cornershop it&#39;s like that was variation!</p>
<table>
<thead>
<tr>
<th>When</th>
<th align="center">What</th>
</tr>
</thead>
<tbody>
<tr>
<td>7am / breakfast<br>within 30mins of waking</td>
<td align="center"><a href="http://www.tesco.com/groceries/product/details/?id=283691370">Breakfast on the go</a><br><a href="http://www.sci-mx.co.uk/product-a-z/pro2go-duo-bar.html">Protein bar</a><br><a href="http://www.dolphinfitness.co.uk/en/optimum-nutrition-natural-whey-and-oats/21659">Oats &amp; Whey shake</a> (choc with a scoop of almond butter)<br><a href="http://www.tesco.com/groceries/product/details/?id=250926075">Smoked Salmon</a> on 2x wholemeal toast</td>
</tr>
<tr>
<td>10am (gym day only)</td>
<td align="center"><a href="http://www.dolphinfitness.co.uk/en/optimum-nutrition-100-whey-gold-2.2kg/16825">Protein shake</a> (mint or extreme milk choc)</td>
</tr>
<tr>
<td>10:30am</td>
<td align="center">1 precooked <a href="http://www.tesco.com/groceries/product/details/?id=264465356">chicken breast</a> (skin removed)<br><a href="http://www.tesco.com/groceries/product/details/?id=279817782">Sweet chilli chicken</a><br>Additional raw broccoli is optional</td>
</tr>
<tr>
<td>1:30pm / lunch</td>
<td align="center">~150g Chicken &amp; 50g egg noodles + hot sauce<br><a href="https://gist.github.com/remy/7c55ff6fbec15fe88ba3#file-taco-salad-md">Taco salad</a><br><a href="https://gist.github.com/remy/7c55ff6fbec15fe88ba3#file-guac-omlette-md">Guacamole Omelette</a> (looks bad, tastes great!)<br>Mexican chicken salad with avocado <a href="http://www.lachoza.co.uk/">from La Choza</a></td>
</tr>
<tr>
<td>4:15pm</td>
<td align="center"><a href="http://uk.fage.eu/product/yoghurt/total-0-170g">0% fat Total yoghurt</a><br><a href="http://danio.co.uk/">Danio</a><br>Protein bar<br>20-45g Cashew nuts</td>
</tr>
<tr>
<td>6:45pm</td>
<td align="center">Protein shake<br><a href="https://gist.github.com/remy/7c55ff6fbec15fe88ba3#file-mocha-shake-md">Mocha shake</a></td>
</tr>
<tr>
<td>8pm / dinner</td>
<td align="center"><a href="https://gist.github.com/remy/7c55ff6fbec15fe88ba3#file-fajitas-md">Fajita chicken, fresh guacamole &amp; refried beans</a><br>Tescos Healthy Living Oven chicken with refried beans<br>Turkey stuffed peppers<br>Nandos 1/2 chicken &amp; beans<br>Sweet chilli salmon fillet, rocket &amp; 100g of soya beans</td>
</tr>
<tr>
<td>10:30pm / bed<br>(optional)</td>
<td align="center">Vanilla Casein protein shake</td>
</tr>
</tbody>
</table>
<p>I would pre-cook 3-4 lunches (chicken and taco salad) each week (ideally on Sunday, but possibly in the morning when I&#39;ve been slack). I&#39;ve got lots of tupperware and keep it in the fridge (and yeah, the chicken gets dry). I&#39;m definitely weakest at breakfast. I&#39;d love it to be scrambled eggs with salmon flakes, but this has worked for me.</p>
<p>My big pro tip: I have alarms reminding me when I need to eat, because without them, I&#39;d just soldier on and forget. Not good.</p>
<div class="update">
<strong>Addendum:</strong> since I wrote this post quite a while ago now (even though I&#39;ve just published it), I&#39;ve since changed my diet. For 2 months I increased from 1,500kcals to 2,000kcals, and as of this week, I&#39;m trying to hit 2,200kcals.

I&#39;m eating larger meals throughout the day in place of the &quot;snack&quot; bars, and my breakfast is around 400-500kcals via a <a href="https://gist.github.com/remy/7c55ff6fbec15fe88ba3#file-oatmea-choco-banana-strawberry-shake-md">shake I make</a>, which I rather like.
</div>

<h2>Resources</h2>
<p>Here&#39;s a few resources I found useful:</p>
<ul>
<li><a href="http://www.nerdfitness.com/">Nerd fitness</a> - there&#39;s a few inspiring stories along with some good information</li>
<li><a href="http://www.amazon.co.uk/4-Hour-Body-uncommon-incredible-superhuman/dp/0091939526/ref=sr_1_1">The 4 Hour Body</a></li>
<li><a href="http://www.myfitnesspal.com/">My Fitness Pal</a> - site and app for Android &amp; iPhone, allowing you to scan barcodes to determine your macros</li>
<li><a href="http://thedk.co.uk/">The Diet Kitchen</a> - just recently found this &amp; <a href="https://www.youtube.com/user/thedietkitchen">youtube channel</a>, but lots of good looking recipes available</li>
<li><a href="https://twitter.com/kamilogorek">Kamil Ogórek</a>&#39;s <a href="http://kamilogorek.pl/nutrition/">nutrition</a> &amp; <a href="http://kamilogorek.pl/training/">training</a> resources</li>
<li><a href="http://evidencemag.com/why-calories-count/">Why Calories Count</a></li>
<li>Recommended book by Kamil: <a href="http://evidencemag.com/flexible-dieting-book/">Flexible Dieting Book</a></li>
</ul>
<h2>Questions?</h2>
<p>If this is useful to anyone, that&#39;s awesome. If you have <strong>any</strong> questions, please do ask in the comments below, I&#39;m more than happy to answer or update the blog post with more details.</p>
]]></content:encoded></item><item><title>I'm a web developer. Not an engineer.</title><guid isPermaLink="false">i-am-web-developer</guid><link>http://remysharp.com/2015/02/26/i-am-web-developer</link><pubDate>Thu, 26 Feb 2015 11:00:00 +0000</pubDate><description><![CDATA[Something I’m starting to realise and accept for myself: I’m a web developer. Not an engineer. Mostly an approach &amp; understanding difference

– Me, 6-Feb 2015
This seemed to strike a chord with a few people, and others asked if I could embellish on those thoughts. So here it is.]]></description><content:encoded><![CDATA[
<blockquote>
<p>Something I’m starting to realise and accept for myself: I’m a web developer. Not an engineer. Mostly an approach &amp; understanding difference</p>
</blockquote>
<p>– Me, <a href="https://twitter.com/rem/status/563708407337996288">6-Feb 2015</a></p>
<p>This seemed to strike a chord with a few people, and others asked if I could embellish on those thoughts. So here it is.</p>
<h2>On titles</h2>
<p>&quot;We&quot; love titles. Personally, in the last 5 years, I&#39;ve preferred the <em>sound</em> of being an engineer, or a JavaScript engineer. I actually quite like <em>software designer</em>. But let&#39;s face it, it&#39;s all fluff.</p>
<p>Actually, where titles aren&#39;t fluff, is when you work in a larger company. Quite often titles relate directly to pay scales. I digress.</p>
<p>The <em>engineer</em> bit is a little less fluffy and does actually carry meaning.</p>
<h2>Engineers</h2>
<p>Calling yourself an engineer, when you&#39;re not actually qualified as an engineer is <em>sort of</em> a no-no. In fact, there&#39;s some <a href="http://en.wikipedia.org/wiki/Engineer#Regulation">regulation</a> around the engineering titles - and certainly in the UK (according to the Wikipedia page), there&#39;s been petitions to protect the title.</p>
<p>Ignoring the regulations, to me, engineers are smart, educated (ideally in a form of engineering...) and specifically: solving complex computer engineering problems.</p>
<p>In a conversation (over twitter) I was having with <a href="https://twitter.com/trek">Trek Glowacki</a>, midway he replied with:</p>
<blockquote>
<p>Take a step back and understand the real engineering goal: SRP</p>
</blockquote>
<p>I wasn&#39;t aware of any engineering goal, nor what <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">SRP</a> stood for, nor did I <em>really</em> understand what the Wikipedia page was saying to me.</p>
<p>Honestly, I kind of feel out of my depth amongst engineers aka those people who *really&quot; took the time to study computer science and grok the shit out of it.</p>
<h2>I am web developer</h2>
<p>I don&#39;t know why I thought it was uncool to be a &quot;web developer&quot;. Perhaps because it&#39;s utterly vague.</p>
<p>What &quot;web developer&quot; <em>does</em> mean <em>to me</em> though, is this:</p>
<p>Someone who writes code for browsers. Likely from the school of view source, is comfortable with drop-in libraries, understands standards and <em>best practice</em> techniques. But mostly, <strong>a tinkerer.</strong></p>
<h2>I am not alone</h2>
<p><img src="https://remysharp.com/images/tbl-developer.jpg" alt="Tim Berners-Lee: web developer"></p>
<p>The picture above is an (infamous) screen grab from the <a href="http://www.webplatform.org/">Web Platform</a> introduction <a href="https://www.youtube.com/watch?v=Ug6XAw6hzaw">video</a>. Of Sir Tim Berners-Lee. The <em>creator</em> of The Web.</p>
<p>I saw a lot of posts and tweets suggesting that this was a joke, or a disservice to his work, or that the title was utterly understated.</p>
<p>I&#39;m not sure it was. There&#39;s no doubt that this man is responsible for a <em>lot</em> more, but he <em>is</em> The Web Developer.</p>
<p>I&#39;m proud to say that I work on that same web. Making it better (and sometimes, perhaps, a little worse).</p>
<h2>Embrace it</h2>
<p>I&#39;ve personally learnt my web development skills over a long period of time and nearly entirely through trial and error. I suspect most of us have.</p>
<p>Being a web developer doesn&#39;t have to mean you have to be a JavaScript wiz, or that you <em>don&#39;t</em> touch the server side. By virtue of tinkering, it&#39;s quite likely you&#39;re getting better at <em>all</em> these things.</p>
<p>Coming to this realisation is by no means a slur against those people who call themselves engineers. If you do, it&#39;s quite likely I already have a great deal of respect for your knowledge and understanding if I&#39;ve come across your work already.</p>
<p>As for me, I&#39;m proud to say: I am a web developer. I am a tinkerer.</p>
]]></content:encoded></item><item><title>What do you mean, you don't like IE6...X?</title><guid isPermaLink="false">you-dont-like-iex</guid><link>http://remysharp.com/2015/02/06/you-dont-like-iex</link><pubDate>Fri, 06 Feb 2015 16:00:00 +0000</pubDate><description><![CDATA[I wrote an offsite blog post entitled &quot;What do you mean, you don&#39;t like IE6? Really?&quot; back in 2011. The post is still relevant, but in the last 4 years I&#39;m pretty confident that the complaint isn&#39;t IE6, it&#39;s IE7, or IE8, or...you get the idea.
So, for your special reading pleasure, I&#39;ve made it so that this post can updated to your particular IE complaint.]]></description><content:encoded><![CDATA[
<p>I wrote an offsite blog post entitled &quot;What do you mean, you don&#39;t like IE6? Really?&quot; <em>back in 2011</em>. The post is still relevant, but in the last 4 years I&#39;m pretty confident that the complaint isn&#39;t IE6, it&#39;s IE7, or IE8, or...you get the idea.</p>
<p>So, for your special reading pleasure, I&#39;ve made it so that this post can updated to your particular IE complaint.</p>
<p>Which IE don&#39;t you like: <select id="ie-selection" style="font-size: 20px; width: 100px"></p>
<p><option>ALL THE BROWSERS!!!</option></p>
<p><option>IE5</option></p>
<p><option selected>IE6</option></p>
<p><option>IE7</option></p>
<p><option>IE8</option></p>
<p><option>IE9</option></p>
<p><option>IE10</option></p>
<p><option>FUTURE IE!</option>
</select></p>
<script>
window.onload = function () {
  $('#ie-selection').on('change', function () {
    $('.browser').text(this.value);
  });
};
</script>

<hr>
<p>Today I read the latest in the long, long, long line of why I won&#39;t support <strong class="browser">IE6</strong>. How fucking droll. If <strong class="browser">IE6</strong> support is part of your job or your contract - then that&#39;s what it is, that&#39;s the job, that&#39;s the challenge of your work.</p>
<figure>
<figure><img class="withcredit" src="https://farm4.staticflickr.com/3609/3629069606_3d1a1cd8fb_b.jpg" title="Photo by John Martz"><figcaption class="credit">Photo by John Martz / <a href="http://RobotJohnny.com">RobotJohnny.com</a></figcaption></figure>
</figure>

<hr>
<p>I am sick and tired of the same old boring posts and even web sites dedicated to why <strong class="browser">IE6</strong> should die. We all know <strong class="browser">IE6</strong> should die. Microsoft knows <strong class="browser">IE6</strong> should die. Heck, even <strong class="browser">IE6</strong> knows it needs to die. It&#39;s been walking around like a fucking zombie for years.</p>
<p>See now, here&#39;s the thing: not one person today installs <strong class="browser">IE6</strong> as their main browser. In fact, given the choice, I&#39;m willing to bet that no person would choose to use <strong class="browser">IE6</strong> as their main browser over any other browser. But that&#39;s not the problem. So that we&#39;re clear: nobody is fucking choosing to use <strong class="browser">IE6</strong> and they&#39;re certainly not using that browser just to piss you off!</p>
<p>While we&#39;re at it - when <strong class="browser">IE6</strong> does eventually die, who&#39;s going to do the find and replace on all the blog posts from IE6 to IE7, then IE7 to IE8, etc.?</p>
<hr>
<p>It&#39;s a simple matter of when XYZ company bought all their machines for the users back in the XP / <strong class="browser">IE6</strong> days, it cost them a butt load of money. Companies don&#39;t like spending money where they (think) they don&#39;t have to. So upgrading all those PCs again is not a priority for them. Remember that upgrade comes with support, maintenance, down time, etc - something that costs (another butt load of) money.</p>
<p>I ran some training once fairly recently at an institute of science where the developers told me that the browser with the highest usage, by far, was <strong class="browser">IE6</strong>. It was their job to support that browser.</p>
<p>Their job. They get paid. If you don&#39;t want to support <strong class="browser">IE6</strong> - then don&#39;t. Nobody is twisting your arm to accept that job as a freelancer. If you&#39;re so against <strong class="browser">IE6</strong> and you&#39;ve got a full time job - I do hope you brought that up during the interview - and if not, if you&#39;re really hate <strong class="browser">IE6</strong> - you could quit and find another job, right?</p>
<p>The fact is that <strong class="browser">IE6</strong> is a difficult environment because it&#39;s unsupported, particularly against todays requirements of web sites. So we charge more for it.</p>
<p>If your client is building a brand new product, and unless they have hard stats showing they need to support <strong class="browser">IE6</strong>, you&#39;ve no reason to support older browsers, and there&#39;s lots of ways of determining the types of browser usage those potential users will have. However, if they&#39;re an existing company, and they do have <strong class="browser">IE6</strong> traffic that warrants supporting by their business - then that&#39;s just part of your job.</p>
<p>Some development teams are the size they are, and employ the people they do just because of browsers like IE. If it weren&#39;t hard, there&#39;d be a bunch of people out of the job.</p>
<hr>
<p>Developing for the web requires that you know how browsers work. The challenge of the job is making those web sites work everywhere. Knowing the ins and outs of browsers is what separates a regular Joe Average apart from the Mr James Awesome. If you don&#39;t want to learn about <strong class="browser">IE6&#39;s</strong> quirks (or IE7 or IE8 or IE9&#39;s) then don&#39;t. Someone else will take the work.</p>
<p>As for me, I&#39;ll be holding my breath waiting for the next reason why <strong class="browser">IE6</strong> should die - like it&#39;s not documented well enough already.</p>
<p><small>Reposted from <a href="http://remy.tumblr.com/post/8334086394/what-do-you-mean-you-dont-like-ie6-really">rem @ &gt; 140 characters</a></small></p>
]]></content:encoded></item><item><title>Lessons learnt from nodemon 1.3</title><guid isPermaLink="false">lessons-learnt-from-nodemon-1-3</guid><link>http://remysharp.com/2015/02/02/lessons-learnt-from-nodemon-1-3</link><pubDate>Mon, 02 Feb 2015 11:00:00 +0000</pubDate><description><![CDATA[I recently pushed out an update to nodemon going from 1.2 to 1.3 containing a few new features and insights which I wanted to share here.]]></description><content:encoded><![CDATA[
<p>I recently pushed out an update to <a href="https://www.npmjs.org/nodemon">nodemon</a> going from 1.2 to 1.3 containing a few new features and insights which I wanted to share here.</p>
<p>Along with a slew of <a href="https://github.com/remy/nodemon/compare/v1.2.1...v1.3.6">changes and bug fixes</a> came three interesting changes:</p>
<ol>
<li>Support for events at the nodemon.json level allowing growl-like notifications</li>
<li>Virtual machine support where the clock inside the container was different to the host clock</li>
<li>Support piping commands in the exec (a trick I learnt from the <a href="https://github.com/npm/npm/">npm source</a>)</li>
</ol>
<h2>Exposing events to nodemon.json</h2>
<p>When you require nodemon you can listen for <a href="https://github.com/remy/nodemon/wiki/Events#states">events</a>. Since the contents of <code>nodemon.json</code> gets mapped directly to <code>nodemon.config.options</code> I was able to read an event property and easily bind those events to spawn your customised commands:</p>
<pre><code class="language-js">Object.keys(config.options.events).forEach(function (key) {
  nodemon.on(key, function () {
    spawn(config.options.events[key], config, [].slice.apply(arguments));
  });
});</code></pre>
<p>Now from inside a global <code>nodemon.json</code> (that lives in my home directory) I can add the following to trigger OS level notifications that tell me my server restarted:</p>
<pre><code class="language-json">{
  &quot;events&quot;: {
    &quot;restart&quot;: &quot;osascript -e &#39;display notification \&quot;app restarted\&quot; with title \&quot;nodemon\&quot;&#39;&quot;
  }
}</code></pre>
<h2>Virtual machines / Docker</h2>
<p>Using docker containers has become increasingly popular. Nodemon is used in all sorts of situations but more and more people found that nodemon wasn&#39;t working in the VM. This is almost entirely due to the fact that the container often has a completely different datetime to the host, and in fact what was happening is the host would touch the file and the timestamp to the container, was in the <em>future</em>!</p>
<p>So how do you work out the time drift between the container and the host?</p>
<p>After a lot of poking and randomly testing things, it turns out it&#39;s pretty easy: touch the the file from inside the container, then compare the modified time to the system time.</p>
<p>For some reason (in my tests and others), the container would use the host datetime when touching files.</p>
<p>So now nodemon upon startup, touches a file and if the timestamp is significantly off the system clock, it warns that there&#39;s a drift and adjusts how it searches for changes on the file system.</p>
<pre><code class="language-text">[nodemon] virtual machine clock offset: 12h31m58s
[nodemon] v1.3.6
...</code></pre>
<h2>Supporting piped commands</h2>
<p>Both the <code>exec</code> and the event commands now support being able to pipe commands together ala Unix as such:</p>
<pre><code class="language-bash">nodemon -x &#39;tap test/**/* | tap-spec&#39;</code></pre>
<p>Now nodemon will restart my tests and run them through tap-spec.</p>
<p>The  way this works was lifted from the npm source code.</p>
<p>For Unix based systems you run:</p>
<pre><code class="language-bash">sh -c &quot;tape test/**/* | tap-spec&quot;</code></pre>
<p>In windows it&#39;s:</p>
<pre><code class="language-bash">cmd /c &quot;tape test/**/* | tap-spec&quot;</code></pre>
<p>Then just drop that into the <code>spawn</code> function and you&#39;re good to go.</p>
<h2>Update</h2>
<p>So go ahead and get the latest nodemon via <code>npm install -g nodemon@latest</code> — and if you feel inclined, maybe ping npm folk to get nodemon on their front page too!</p>
]]></content:encoded></item><item><title>&quot;Why I don't like open source&quot; – my thoughts</title><guid isPermaLink="false">dont-like-open-source</guid><link>http://remysharp.com/2015/01/09/dont-like-open-source</link><pubDate>Fri, 09 Jan 2015 12:30:00 +0000</pubDate><description><![CDATA[This morning&#39;s walk was accompanied by Tiago Rodrigues (excellent) curation and commentary on Adam Yeats tweets on open source and (mostly) James Seymour-Lock&#39;s replies.
Please read it. Carefully. Get all the way through and reserve judgement (if any) for the end.
It&#39;s not the first time Adam&#39;s thoughts have inspired a blog post either! These are my thoughts on open source, contributing and the points raised in the discussion.]]></description><content:encoded><![CDATA[
<p>This morning&#39;s walk was accompanied by <a href="https://twitter.com/trodrigues">Tiago Rodrigues</a> (excellent) curation and commentary on <a href="https://twitter.com/adamyeats">Adam Yeats</a> tweets on open source and (mostly) <a href="https://twitter.com/JamesSLock">James Seymour-Lock</a>&#39;s replies.</p>
<p><a href="https://storify.com/trodrigues/why-i-don-t-like-open-source-a-play-in-3-acts">Please read it</a>. Carefully. Get all the way through and reserve judgement (if any) for the end.</p>
<p>It&#39;s not the first time Adam&#39;s thoughts have inspired a <a href="/2012/12/18/contributing-to-the-web-community">blog post</a> either! These are my thoughts on open source, contributing and the points raised in the discussion.</p>
<p><small>This post is partly edited, but quite long, so might not be 100% coherent. For that, I&#39;m sorry!</small></p>
<h2>Our web community distorts expectations</h2>
<p>(Not) contributing to open source isn&#39;t the problem. The pressure coming from external and internal sources telling us that we should be contributing is invalid, in that <strong>it should not exist</strong>, but it does.</p>
<p>How <em>we think</em> people see us is only a reflection of how we feel about ourselves. The project getting the most retweets today is not representative of real work. Nor is the person with the most followers the better human being.</p>
<p>There is distortion in the web community that you need to learn more, contribute more, work more, know everything, be on the latest technology, and so on. <strong><em>Unsubscribe</em></strong>. Unfollow. Turn off alerts and notifications (or at least make your &quot;quiet hours 6pm-9am). <em>Find other human beings</em>.</p>
<p>I want to say that Adam&#39;s tweets are not the fault of open source, but our industry&#39;s distortion. But his tweets and the subsequent replies prompted me to also write down my thoughts about open source that I&#39;ve been mulling over the last few years.</p>
<h2>What does open source really mean?</h2>
<p>It means <a href="https://github.com/nickdesaulniers/What-Open-Source-Means-To-Me">different things to different people</a>. That&#39;s okay.</p>
<p>To me, it means:</p>
<blockquote>
<p>Welcome. Welcome to this code I wrote. Help yourself to bits you like or need. Help make it better for others. Help make it yours. Help make me better with your suggestions, changes or discussion. Use the code in any way you want, in ways I never thought of. And if the projects I created lives on without me, then open source has worked.</p>
</blockquote>
<p><em>You</em> need to decide what it means to you, and what it looks like. Which leads me to ask: <em>is a project really open source</em>?</p>
<h2>There are two kinds of open source projects</h2>
<p>There&#39;s the big, high profile projects and then there&#39;s <em>everything</em> else.</p>
<p>When I&#39;d hear &quot;open source&quot;, I&#39;d think: Linux, Apache, Firefox, bootstrap, ember, node, etc. i.e. big fucking high profile massive open source projects with a fuck tonne of code*.</p>
<p><small>* Okay, there&#39;s also a decent number of sensible codebase sized projects that are used a lot, passport for node for instance</small></p>
<p>This is <em>Type One</em>.</p>
<p><em>Type Two</em> open source projects are the kind of project where the source is open, and the license is &quot;meh&quot;/&quot;whatever I always use but don&#39;t really understand&quot;. For me this is MIT. But that&#39;s beside the point.</p>
<p>The source is available. <em>Just like the web</em>. View source. It&#39;s the kind of open source that I&#39;m familiar with (obviously there&#39;s discussions around licenses, but that&#39;s for another day).</p>
<p>Type Two projects: the kind where the source is just somewhere on the web, is the kind that, if we&#39;re honest, hardly anyone else is going to contribute to. I&#39;ll be lucky if anyone actually uses it, let alone skims the code.</p>
<p>This second type, it could be closed source. It could be something that was never uploaded to the web. But it was. This is the majority of open source projects today. Very much like the late 90s when there were sites offering JavaScript ...files (because library and framework really doesn&#39;t apply) that gave you menus, hover effects, basic whiz bang stuff. Except now it&#39;s up on Github or npm (or whatever you Ruby folk use!).</p>
<p>If someone sends a pull request to one of these projects, there&#39;s a few things that can happen: it&#39;s ignored/forgotten about or it&#39;s blindly merged &quot;meh, cool&quot; (there&#39;s other outcomes too!).</p>
<p>For me, putting code in github as &quot;open source&quot; is for two main reasons: 1) so if I lose the code locally, I can find it again (fingers crossed Github doesn&#39;t vanish too quickly), 2) I can&#39;t be arsed to pony up the pitiful amount of dollars for more private repos.</p>
<p>The majority of the repo owners on the type one projects are <em>companies</em>. It&#39;s their product. The majority of type two, are individuals. Let&#39;s remember that perspective. Contributing to the small ones isn&#39;t a big deal and potentially contributing to the big ones might be like pissing in the ocean.</p>
<h2>Contributing to open source</h2>
<p>I can&#39;t speak for Adam, but it <em>sounds</em> like he&#39;s either felt pressure to contribute to some projects either externally or internally. I could be way off based, but I <em>do</em> know people who&#39;ve felt this way. Heck, I feel this internal pressure sometimes.</p>
<p>Contributing (code) to the Type One projects isn&#39;t something you can do with a few hours. So seriously, if you feel this pressure: stop it.</p>
<p>It takes hours, if not days to become familiar with the codebase. Then creating a bug fix or a new feature isn&#39;t quite as simple as &quot;hacking some code in&quot;. If it&#39;s a high profile project, it&#39;ll come with tests and coding guidelines. That&#39;s more work, and you&#39;ve not even contributed a single line yet.</p>
<p>For context, in late-2000s, I partook in a <a href="https://web.archive.org/web/20130512035317/http://docs.jquery.com/JQuerySprint">jQuery day long sprint</a> to fix bugs. I&#39;d say I knew jQuery pretty damn well at the juncture. By the end of the sprint, I&#39;d managed to confirm just one bug, and <em>pretty much</em> have an idea of what caused it.</p>
<p>&quot;Contributing to open source&quot; is a long term commitment, and you do have to pick and choose. There&#39;s a few people like Substack filling npm with his node modules is great, perhaps reinventing every wheel, but he&#39;s also doing it to <a href="https://gratipay.com/substack/">cover his living</a>. But these people are the exception. This isn&#39;t a lifestyle that&#39;s available to most people (and frankly, npm is running out of useful names for projects!).</p>
<p>Ask yourself what is open source. Ask yourself if you want to contribute to that, and if you do (want to contribute) ask yourself <em>why</em>.</p>
<h2>Hiring purely based on open source contributions</h2>
<p>...is bullshit.</p>
<p>But <em>maybe</em>, maybe some companies will exclusively hire you based on your open source contributions. Honestly, if that&#39;s the case, it&#39;s more likely you&#39;re not applying for the job, and in fact the company is head hunting you.</p>
<p>It <em>is</em> true that an &quot;open source&quot; project is seen as a reference of work. But it&#39;s also a <em>stale</em> reference of work. And importantly, it&#39;s not the only reference.</p>
<p>Take my open source <a href="https://github.com/remy/inliner">inliner</a> project for instance. The code is appalling. There&#39;s outstanding open issues <em>and</em> pull requests. This is an open source project that is <em>not</em> representative of my current skills. Yet it&#39;s still open source. I wouldn&#39;t put it forward as my best work.</p>
<p><a href="https://github.com/jsbin/jsbin">JS Bin</a> is probably a better example of my work, but honestly, the code is not my best foot forward. In fact, I&#39;ve had job offers based on the companies associating me with the project, but I know for certain that they&#39;ve not looked at the code.</p>
<p>Hiring decisions are <em>mostly</em> based on some early criteria that&#39;s utterly arbitrary. Like &quot;do they have a degree&quot;, or &quot;do they have a github account&quot;, or &quot;what is their personal interest&quot;. The reason: to reduce 100 CVs down to a manageable number that you can actually interview.</p>
<p>When I interviewed <a href="https://twitter.com/allouis_">Fabien O&#39;Carroll</a> in late 2013 he had limited open source projects I could look at (which I would have skimmed to get an idea of scope of projects he works on), which is fine, and he couldn&#39;t really share his company&#39;s code.</p>
<p>With <em>all</em> my interviewees I asked them to write me a hangman game in JavaScript, and not to spend more than 2-4 hours on it (in their own time). I would pay each an honorarium for their time, because it was likely they were already employed and would have to do it <em>out of hours</em>. Personal time is valuable, and <strong>no one has an automatic right to it</strong>.</p>
<p>His code was decent, but that&#39;s not what got him the job. During the interview, when asked if there was anything else he was interested in, he struggled then eventually mentioned he built a chess timer (in wood) that he could use with his then-girlfriend. <em>That&#39;s</em> what got him the job, and that same sentiment is what I saw over the following year. That detail doesn&#39;t belong on github, isn&#39;t part of our community, but <em>is</em> part of an interview.</p>
<p>Never undervalue what you do. Everyone is unique. Some people aren&#39;t right for some jobs, but you github streak says positive <em>and</em> negative things.</p>
<h2>If you can&#39;t contribute: you&#39;re not part of the community</h2>
<p>Arguing that someone should get a jobsworth position* because the work 9-5 (or whatever extra overtime) is bollocks. It&#39;s not the first time I&#39;ve seen it either. This kind of sentiment is utterly selfish and narrow minded.</p>
<p><small>* It&#39;s worth pointing out that James&#39; tweet was <a href="https://twitter.com/JamesSLock/status/553546788779859968">between friends</a></small></p>
<p>The people who have a high chance of working on extra curricular projects are likely to be single, not terribly social and in their 20s. Why? Because when you&#39;re on your own and younger, you have more energy, and you need less sleep. When I was in my 20s (and married) I was hacking until 2am in the morning. What was my code like between 10pm and 2am? Shit. In fact, it&#39;s taken me years to realise that when I&#39;m not on form (i.e. past 6pm) that it takes me twice as long, if not more, to complete a simple task. A complex task is unlikely to get fixed.</p>
<p>Our brains fuck with us when we deprive it of rest. Tell yourself you have RSI. If you have RSI, you rest. You move away from typing at a keyboard because if you push it, it hurts. Take <em>that</em> approach.</p>
<p>Now that I&#39;ve got young kids, when I leave the office, someone will ask &quot;what are you up to this evening?&quot;. The same as every other evening: I help put the kids to sleep, I cook (or help cook), I eat, I got to bed. I love that I&#39;m with my family, and it&#39;s enough for me. There is <em>no time</em> for coding in that evening.</p>
<h2>My thoughts</h2>
<p>I&#39;ve got another post that I&#39;m writing about &quot;what I love about the web&quot;, which is sort of related: <strong>enjoy what <em>you</em> do</strong>. Question where the pressure comes from. If possible, focus on what you love and ignore the noise of &quot;hey, look at <em>my</em> cool thing&quot;.</p>
<p>There <em>is</em> this weird pressure to get a &quot;name&quot; in our industry. But fuck, seriously, <strong>you are amazing</strong>. You work hard and you should be proud of your work irrespective of whether others can see it in the open.</p>
<p>You come first, not your code or someone else&#39;s project: you.</p>
<p>For me, my family comes first. Work and code isn&#39;t even a distant second. It&#39;s taken me many years of working silly hard and silly hours to work that out. Now that I understand that, life is better.</p>
]]></content:encoded></item><item><title>Reboot</title><guid isPermaLink="false">reboot</guid><link>http://remysharp.com/2015/01/05/reboot</link><pubDate>Mon, 05 Jan 2015 16:00:00 +0000</pubDate><description><![CDATA[The last year I&#39;ve made a conscious effort to focus development efforts in JS Bin, and that&#39;s exactly what I did for over 8 months.
I had the great pleasure of hiring Giulia Alfonsi and Fabien O&#39;Carroll. Giulia&#39;s contracted ended after 6 months and Fabien is now headed to greener pastures.
So now I have a 4 person office to myself. With that burning a hole in the business pocket, I&#39;ve decided to completely reboot my business.
I&#39;m shutting down the office and returning to solo working and surfing from co-working space to coffee shops with the aim of working on hugely diverse projects and contributing more to the web community via blogging, videos and training.
Exciting next opportunities
Starting in January 2015, I&#39;ll continue to work alone again, tinkering in side projects, but more importantly, returning to client development, consultancy and training.
This means that I can be more nimble in my client work, jumping from project to project and working on all kinds of things (previously it ranged from Christmas Google Map projects, to WebRTC demos, to Node &amp; WebSocket based games, to JavaScript reviews and training).
Why you&#39;d hire me
I&#39;ve been working on the web professionally since 1999 (and several years before that on personal experiments) and I believe that length of experience is a major contributor to my skills. Often I was thrown into unknown (technical) waters, and it was sink or swim with nothing in between. From that I know my work always focuses towards practicality over perfection.
Often when I&#39;ve been brought in to review existing code along with the review I&#39;ll do my best to impart the techniques and tools I used to review, diagnose and fix. My aim isn&#39;t to swoop in and amaze, it&#39;s to help your team and help validate their skills.
What&#39;s next?
Get in touch if you want to discuss a project or idea.
I&#39;m going to continue to invest in JS Bin and I&#39;ll be launching Confwall in the next few weeks, a commercial offering of a conference wall with tweets, schedule and announcements.
Beyond that, like I said, I&#39;ll be blogging and posting more technical videos in the coming year.]]></description><content:encoded><![CDATA[
<p>The last year I&#39;ve made a conscious effort to focus development efforts in JS Bin, and that&#39;s exactly what I did for over 8 months.</p>
<p>I had the great pleasure of hiring Giulia Alfonsi and Fabien O&#39;Carroll. Giulia&#39;s contracted ended after 6 months and Fabien is now headed to greener pastures.</p>
<p>So now I have a 4 person office to myself. With that burning a hole in the business pocket, I&#39;ve decided to completely reboot my business.</p>
<p>I&#39;m shutting down the office and returning to solo working and surfing from co-working space to coffee shops with the aim of working on hugely diverse projects and contributing more to the web community via blogging, videos and training.</p>
<h2>Exciting next opportunities</h2>
<p>Starting in January 2015, I&#39;ll continue to work alone again, tinkering in side projects, but more importantly, returning to client development, consultancy and training.</p>
<p>This means that I can be more nimble in my client work, jumping from project to project and working on all kinds of things (previously it ranged from Christmas Google Map projects, to WebRTC demos, to Node &amp; WebSocket based games, to JavaScript reviews and training).</p>
<h2>Why you&#39;d hire me</h2>
<p>I&#39;ve been working on the web professionally since 1999 (and several years before that on personal experiments) and I believe that length of experience is a major contributor to my skills. Often I was thrown into unknown (technical) waters, and it was sink or swim with nothing in between. From that I know my work always focuses towards practicality over perfection.</p>
<p>Often when I&#39;ve been brought in to review existing code along with the review I&#39;ll do my best to impart the techniques and tools I used to review, diagnose and fix. My aim isn&#39;t to swoop in and amaze, it&#39;s to help your team and help validate their skills.</p>
<h2>What&#39;s next?</h2>
<p><a href="http://leftlogic.com/contact">Get in touch</a> if you want to discuss a project or idea.</p>
<p>I&#39;m going to continue to invest in JS Bin and I&#39;ll be launching <a href="http://confwall.com">Confwall</a> in the next few weeks, a commercial offering of a conference wall with tweets, schedule and announcements.</p>
<p>Beyond that, like I said, I&#39;ll be blogging and posting more technical videos in the coming year.</p>
]]></content:encoded></item><item><title>My 2014</title><guid isPermaLink="false">my-2014</guid><link>http://remysharp.com/2014/12/31/my-2014</link><pubDate>Wed, 31 Dec 2014 12:00:00 +0000</pubDate><description><![CDATA[As with previous years (barring 2008, oddly), I&#39;ve tried to wrap up the highlights of my year for future Remy&#39;s reading pleasure.]]></description><content:encoded><![CDATA[
<p>As with previous years (barring 2008, oddly), I&#39;ve tried to wrap up the highlights of my year for future Remy&#39;s reading pleasure.</p>
<h2>Professional</h2>
<p>This year has been a mixed bag from a professional stand point, mostly revolving around JS Bin.</p>
<h2>JS Bin</h2>
<p><img src="https://remysharp.com/images/jsbin-t-shirt.jpg" alt="JS Bin"></p>
<p>Back in <a href="/2013/08/14/jsbin-5th-birthday">August 2013</a> I decide that I would try to focus my full time efforts on JS&nbsp;Bin, and after speaking to many individuals at conferences and events, I decided that the right path would be to add subscription based Pro accounts.</p>
<p>It took 8 months to actually get to launch. A mistake. It should have taken 2-3 months, and I shouldn&#39;t have been so hell bent on getting it perfect. Putting 100% effort into a project and 3 full time developers, with no capital and no income meant a pretty serious hit to my own business (Left Logic).</p>
<p>That all said, JS Bin is here to stay. I&#39;ve run it as side project for over 6 years, and I&#39;ll continue to run it that way. There&#39;s production grade servers in place, something like 13 million bins in our database, and a massive 126 million page views since it started and lots of cool stuff still to be done. And the truth is, when it&#39;s fun to work on JS Bin, it&#39;s <em>fun</em>.</p>
<h2>Left Logic</h2>
<p>At the start of the year I took on a new office and I took on two new full time employees <a href="https://twitter.com/allouis_">Fabien O&#39;Carroll</a> and <a href="https://twitter.com/electric_g">Giulia Alfonsi</a>, and also <a href="https://twitter.com/dcgauld">David Gauld</a> as a part time/freelancer.</p>
<p><img src="https://remysharp.com/images/leftlogic-team-2014.jpg" alt="Left Logic 2014 team"></p>
<p>But as the year went on, Giulia&#39;s 6 month contract ended and Fabien was tempted away by local Brighton company, Brandwatch (I&#39;m proud to say after he turned them down a few times first).</p>
<p>It&#39;s been a huge pleasure working with Giulia and Fabien - they&#39;re both great people to know and damn good developers. David (equally superb developer) led the <a href="http://leftlogic.com">Left Logic</a> redesign and is continuing to (remotely) contribute to Confwall (a new product from Left Logic).</p>
<p>As 2015 starts, there&#39;s no point in having an office <em>just</em> to myself, so I&#39;m selling all the kit, closing the office and returning to a roaming desk, for better or worse!</p>
<h2>Speaking &amp; Travelling</h2>
<p>Over the last few years I&#39;ve been reducing my public speaking further and further down. This year I only gave two different talks at only three events.</p>
<p>I&#39;m not terribly proud of the talks either, and I feel like they were either duff notes or bombed entirely. Obviously I have a different perspective on things from the stage, but it&#39;s definitely put me off speaking for a while. I realise this is all subjective, but it&#39;s not a great feeling when you put yourself out there only to feel crappy about it.</p>
<p>I did do an epic write up of my <a href="/muddling-my-way-through-real-time">real-time talk on my blog</a>, which I&#39;m pretty proud&nbsp;of.</p>
<p>On the flip side though, I did spend more time attending events just to learn. Oddly, I had quite a few people exclaim &quot;are you speaking?!&quot;. That&#39;s cute, but there&#39;s certain perks to not speaking: like <em>not speaking</em>!</p>
<p>Particular highlights for me were:</p>
<ul>
<li><a href="https://2014.dareconf.com/mini/london">Dareconf mini</a> (London, UK)</li>
<li><a href="https://edgeconf.com/2014-london">Edge London</a> (London, UK)</li>
<li><a href="http://www.hybridconf.net/">Hybrid Conf</a> (Stockholm, Sweden)</li>
<li><a href="http://www.smartwebconf.com/">SmartWeb</a> (Bucharest, Romania - where I also spoke)</li>
<li><a href="http://2014.jsconf.eu/">JSConf EU</a> (Berlin, German - more for the people &amp; conversations)</li>
</ul>
<h2>#ffconf, <small>aka Full Frontal</small></h2>
<p>This year, our little event sold in two batches, going in 6 and 3 minutes. Insane.</p>
<p>I was quite nervous about this year because there&#39;s so always so much pressure to curate an event that&#39;s better than the last. Every year has been so amazing that I find it hard to think we&#39;ll top the previous year.</p>
<p>I was wrong to be nervous.</p>
<figure><img class="withcredit" src="https://remysharp.com/images/ffconf-2014.jpg" title="Photo by Drew McLellan"><figcaption class="credit">Photo by Drew McLellan</figcaption></figure>

<p>The event was absolutely amazing and thankfully I wasn&#39;t the only one to think so, <em>everyone</em> I spoke to felt this was the best yet. <a href="http://www.outsidethepage.co.uk/full-frontal-2014/">People</a> <a href="http://www.uvd.co.uk/blog/full-frontal-2014-highlights/">even</a> <a href="http://kyan.com/blog/2014/11/11/full-frontal-2014">blogged</a>!</p>
<p>See for yourself - all <a href="https://www.youtube.com/playlist?list=PLXmT1r4krsTqrwW2jjXIXuCtFQ-5BIn-s">eight talks from ffconf are available on YouTube</a>.</p>
<h2>Side Projects</h2>
<p>Although there&#39;s not as many side projects as I&#39;d like this year, it&#39;s clear to me that JS Bin has been consuming my focus for the large part of the year, and that&#39;s <em>okay</em>!</p>
<ul>
<li><a href="https://confwall.com">Confwall</a> - a productised version of the twitter wall I&#39;ve run at ffconf for the last 6 years. Currently open to early beta registrations.</li>
<li><a href="https://apps.getpebble.com/applications/53ff41ed8cdf37902b000050">Rest pebble app</a> - a native C app for the Pebble watch that lets me quick set rest timers at the gym.</li>
<li>Moved my blog from WordPress (to a <a href="http://harpjs.com/">Harp</a>/custom node app) and resumed blogging again - something I&#39;ve wanted to do for a long time. It&#39;s also all up on <a href="https://github.com/remy/remysharp.com">github</a> and I wrote up the process: <a href="/harp-pt1">part1</a>, <a href="/harp-pt2">part2</a>. I&#39;m most proud of the <a href="/archive/">archive</a> page.</li>
<li>nodemon 1.0 - then pretty much abandoning it for a 11 months and revisiting to add some sweet functionality (look out for 1.3.x in the new year)</li>
<li>Introducing HTML5 - this is <em>still</em> in the works to be published for free. Watch this space!</li>
</ul>
<h2>Personal</h2>
<p>In ascending order of personal importance to me:</p>
<h3>Writing</h3>
<p>Rewiring my blog has encouraged me to get writing again. I&#39;ve long fallen out of love with Twitter and wanted to properly return to blogging. As I said earlier, seeing the full <a href="/archive/">archive</a> of my blog has really encouraged me to write again. I&#39;m pretty proud of the 8 years of content.</p>
<p>This year I was also invited to contribute to the Pastry Box project, where I started posting some very personal thoughts, and I&#39;m proud to be <a href="/tag/personal">hosting them here too</a>. The three particularly important ones being <a href="/time-doesnt-heal">Time doesn&#39;t heal</a>, <a href="/velveteen">My Velveteen Rabbit</a> and <a href="/motivation">Motivation</a></p>
<h3>Body</h3>
<p>I&#39;ll spare you the pictures this time (though if you want to brave it, <a href="/my-2013#personal">here&#39;s last year</a>)! <strong>Last year I ended my body fat on 19% (down from 30%).</strong></p>
<p>I&#39;ve been using Fitbit Aria scale, but over the months have lost confidence in their accuracy, so bought a pair of cheap, but more reliable skin callipers.</p>
<p>My body fat at the end of December 2014 (and over the month of December) is <strong>currently 13.8%</strong> (the scales are reading around 10%, which I don&#39;t trust). I also fit into 30 inch jeans and tops that I wore at aged 21 are baggy around my belly (yes, I have a few tops that are over 15 years old!).</p>
<p>My lowest weight (not that I want to be light) was 11 stone. I can see a 6 pack forming (which I&#39;ve <em>never</em> had in all my years).</p>
<p><strong>My biggest deadlift was 170kg</strong>, but in a different session I also tore a disc in my lower back trying to do a superset at 140kg (what had previously been a warm up weight). That cost me a month off the gym and 3 months self imposed ban on deadlifts and squats (along with a chiropractor bill for mostly massage and advice).</p>
<p>Diet is still heavy protein (and I found it quite easy to eat 1500kcals in a day whilst still having 7 meals a day), but I&#39;m trying to add weight at the moment and if I&#39;m honest, I&#39;m struggling!</p>
<p>Oo-oo - and I also got my first few <em>white</em> hairs on my head, mostly due to <a href="/2014/12/16/vatmoss">recent VAT issues</a>!</p>
<p><strong>Bottom line: 13.8% is in the <em>Athletes</em> range of body fat. So the future version of me, reading back, should be damn proud.</strong></p>
<h3>Mind &amp; attitudes</h3>
<p>I don&#39;t really know how to set this down as text, but for me, <em>this year</em> in particular, has been a an eye opener in my attitude and thoughts towards gender and race diversity (there&#39;s more topics for diversity out there, I&#39;m just started).</p>
<p>I found that following more women on twitter (as weird as that sounds, but you know what I mean) has helped broaden my views. I&#39;ve also tried to face and read around topics that I&#39;d normally want to shy away from. It might sound obvious, but if I don&#39;t look and listen: then it&#39;s too easy to ignore and pretend &quot;all is well&quot;.</p>
<p>I always knew that women and people of colour had more to deal with in life, but I didn&#39;t quite want to acknowledge that even though I come from a middle-class family with not very much money, being a white male in Europe with access to computers makes me <em>incredibly</em> privileged. Somehow I thought that the privilege was something to be ashamed of (possibly because I didn&#39;t want people to think that I was rich and spoilt), but the truth is I don&#39;t need to be ashamed, but I do acknowledge this has put me (and many like me) in a position of advantage for what is effectively a lucky coin toss. I see that now.</p>
<p>I&#39;ve found following people like <a href="https://twitter.com/femfreq">Anita Sarkeesian</a> for the last 6 months a huge eye opener and (<a href="https://remysharp.com/2014/10/27/motivation">though I&#39;ve said before</a>) Emma Watson&#39;s <a href="https://www.youtube.com/watch?v=gkjW9PZBRfk">address to the EU is incredibly inspiring</a>.</p>
<p>I&#39;m also <em>trying</em> to read <a href="http://www.amazon.co.uk/The-Gender-Knot-Unraveling-Patriarchal/dp/1439911843/ref=dp_ob_image_bk">The Gender Knot</a>, I&#39;m not far in yet but I hope to take my learnings and pass it on to my children.</p>
<p><strong>Bottom line:</strong> I&#39;m still working this stuff out, and I want to be part of a better system for all.</p>
<h3>Family</h3>
<p>My family is the most important thing to me, and I&#39;m so incredibly proud of Julie, my beloved wife and mother to my amazing kids. 2014 saw the arrival of Seren Tuesday Sharp on 17-April 2014 at 9:37am.</p>
<p>It feels like the last 8 months have flown by, and she&#39;s already near-crawling (basically doing army crawls across the floor), is sitting and pulling herself up, and has 3 teeth to her name. And she has these lovely dark eyelashes that (<em>I</em> think) make her blue eyes look dark and beautiful. I love our littlest one very very much.</p>
<p><img src="/images/seren-2014.jpg" alt="Seren"></p>
<p>Julie and I also celebrated hitting a milestone in our relationship: we&#39;ve now been together for more time in our life than we&#39;ve been apart. 18 years and counting.</p>
<p>I&#39;m hugely proud of my family. I&#39;ll always miss Tia and though she&#39;s not in the picture below, she&#39;s always with us.</p>
<p><img src="/images/family-2014.jpg" alt="Sharp family 2014"></p>
<p>(Yes, getting a picture of the whole family is near impossible, getting a picture of us all smiling, <em>is</em> impossible!)</p>
<h2>2015</h2>
<p>Next year is a big change for me from a work perspective. I go back to running solo and though I&#39;m excited, I&#39;m kinda scared too. I&#39;m hoping that I find inspiration in my work again and get to work on some really interesting projects (and if you want to work with me, <a href="http://leftlogic.com/contact">please do get in touch</a>).</p>
<p>Otherwise, happy new year other-people-that-are-not-future-Remy, I hope your 2014 was a good one, and I hope to see you (not you, future-Remy, that&#39;s impossible) in 2015.</p>
]]></content:encoded></item><item><title>VATMOSS: the misunderstanding of &quot;proof&quot;</title><guid isPermaLink="false">vatmoss-proof</guid><link>http://remysharp.com/2014/12/30/vatmoss-proof</link><pubDate>Tue, 30 Dec 2014 12:00:00 +0000</pubDate><description><![CDATA[When you apply EU VAT, you need to be sure of your customer&#39;s EU state. Indeed, you&#39;ll be asked for two non-conflicting pieces of proof. I&#39;m unsure if this is a VATMOSS thing or EU VAT, but it doesn&#39;t really matter.
There was a recent clarification allowing companies to use one of five presumptions for choosing location of residency, but when I asked Rachel Andrew&#39;s opinion of the first draft of this post, she pointed out that the presumptions are for fixed lined services only (referring to notes that I can&#39;t see), but she&#39;s right.]]></description><content:encoded><![CDATA[
<p>When you apply EU VAT, you need to be sure of your customer&#39;s EU state. Indeed, you&#39;ll be asked for <strong>two non-conflicting pieces of proof</strong>. I&#39;m unsure if this is a VATMOSS thing or EU VAT, but it doesn&#39;t really matter.</p>
<p>There was a recent clarification allowing companies to use one of <a href="http://www.vatlive.com/eu-vat-rules/2015-digital-services-moss/location-of-customer-moss-2015/">five presumptions for choosing location of residency</a>, but when I asked Rachel Andrew&#39;s opinion of the first draft of this post, she pointed out that the presumptions are for <em>fixed lined services</em> only (referring to notes that I can&#39;t see), but she&#39;s right.</p>
<p>These presumptions are utterly useless to any normal small business running a web site. In fact, I&#39;d argue that any service that can ascertain whether their customer is connected using a fixed land line or a mobile network (i.e. an ISP, Telecom provider or broadcaster) is not &quot;mini&quot; enough for a Mini One Stop Shop.</p>
<h2>2 non-conflicting pieces of location data</h2>
<p>The proof required for any web site selling digital products or services is 2 pieces of data, but if these are in conflict (i.e. the country doesn&#39;t match up) then you&#39;ll need a 3rd.</p>
<p>This is actually a bit of joke, because if the 3rd is also in conflict, you need another until you do actually have two items of data that resolves to a single country.</p>
<p>The suggestions of what this can be are actually a bit wishy-washy. You&#39;re fine if your first 2 items match, but getting a 3rd is the problem.</p>
<p>Here are the suggestions from HMRC:</p>
<blockquote>
<p>Any two pieces of non-contradictory evidence such as, IP address, bank account address or SIM card identifier code will suffice. – @HMRCcustomers</p>
</blockquote>
<p><em><a href="https://twitter.com/HMRCcustomers/status/537996346838761472">Source: Twitter, November 27, 2014</a></em></p>
<p>This has been further clarified by others to this list (which you&#39;ll see most posts suggesting):</p>
<p>Let&#39;s separate this list into what we can feasibly collect before the transaction occurs.</p>
<h3>Available before</h3>
<ul>
<li>The billing address of the customer</li>
<li>The Internet Protocol (IP) address of the device used by the customer</li>
<li>Other commercially relevant information (for example, product coding information which electronically links the sale to a particular jurisdiction)</li>
</ul>
<p>&quot;Other commercially relevant information&quot; is hand-wavy for &quot;anything else&quot;. This is very, <em>very</em> specific to the product type. If your product has some kind of localised version or link to a particular jurisdiction, then great. However, <strong>most services will only have the first two options available</strong>.</p>
<h3>Available after</h3>
<p>That leaves the following available <em>after</em> the customer has completed the transaction (though technically they can be collected before the transaction executes).</p>
<ul>
<li>The country code of SIM card used by the customer</li>
<li>The location of the customer&#39;s fixed land line through which the service is supplied</li>
<li>Location of the bank</li>
</ul>
<p>SIM card is only available if you implement an extra SMS verification process (<a href="https://dashboard.taxamo.com/apidocs/api/v1/verification/docs.html">Taxamo provide this as extra service</a>) - but it&#39;s a rare to have this technology available, plus the technical expertise to implement puts this out of reach for most small businesses.</p>
<p>Knowledge of the customer&#39;s fixed land line will <em>never</em> be available to web sites (again, this is fixed line services as mentioned at the start of this post).</p>
<p>So we&#39;re left with &quot;location of the bank&quot;. I believe <strong>if you have the bank location, you shouldn&#39;t need anything else</strong>.</p>
<h2>Example case study</h2>
<p>Jane living in the UK, working for Italian company Air Italy (the airline) as a developer and she needs a subscription to my product.</p>
<p>My product is going to get for 3 pieces of information on purchase of my product:</p>
<ol>
<li>The billing address of the debit or credit card used</li>
<li>Her IP address run against a geoip lookup database (ie. to best guess her location)</li>
<li>The telephone landline number (using the country code from the phone number)</li>
</ol>
<p>As the address the web site asks for, she puts the company head office address (she&#39;s guessing and assuming that this is actually the billing address, but she&#39;s unsure), her company uses a VPN to access the internet through their ISP and the landline number is +44...</p>
<p>The result is:</p>
<ol>
<li>The billing address resolves to Italy</li>
<li>IP address resolves to Switerland (equally Jane could be travelling)</li>
<li>The phone number resolves to the UK</li>
</ol>
<p>However, as she pays she has <em>two</em> options:</p>
<ol>
<li>Use her personal bank card</li>
<li>Use the business bank card</li>
</ol>
<p>If she uses her personal bank card, the country location is UK, and the money she has in her UK bank account is taxed under UK tax law.</p>
<p>If she uses her business bard card, then country location it Italy, and the money (in that bank account) is correctly taxed under Italian tax law.</p>
<p>Making the initial 3 pieces of information utterly redundant, and the card country origin the ultimate source of truth.</p>
<h2>The ultimate source of truth</h2>
<p>Some businesses won&#39;t be able to get the card holder bank origin before actually applying the correct VAT. In this case, then you have to make the assumption based on the non-conflicting data.</p>
<p>However, if you&#39;re using a system like Stripe (as I am), then you get full details about the card data <strong>before</strong> you finalise the transaction cost.</p>
<p>If the bank that holds the card is based Italy (for instance) then the individual who opened the account must provide proof of citizenship to their Italian bank or if it was opened by a business, then the business must legally operate in that country.</p>
<p>Both of these facts require that the individual or business pay taxes in Italy, and <strong>therefore if the card says it&#39;s registered in Italy, there&#39;s no other option that to charge them Italian VAT rates</strong>.</p>
<p>Therefore: if you have the card country origin, you <strong>don&#39;t need anything else</strong>.</p>
<hr>
<p>I&#39;ve no idea how, but I&#39;d love to see this proposed to the HMRC and HM Treasury groups that are discussing these problems behind closed doors.</p>
]]></content:encoded></item><item><title>VATMOSS</title><guid isPermaLink="false">vatmoss</guid><link>http://remysharp.com/2014/12/16/vatmoss</link><pubDate>Tue, 16 Dec 2014 11:00:00 +0000</pubDate><description><![CDATA[If you want a good foundation of understand for VATMOSS, then I highly recommend reading Rachel Andrew&#39;s posts.
That said, having read as much as I can around the web, I still don&#39;t feel like I have a good handle on this thing, but I&#39;m posting this, partly to flesh out my thoughts, help others in the same situation, and probably rant.
We have to be VATMOSS ready by 1-Jan 2015. That&#39;s just over 2 weeks away.]]></description><content:encoded><![CDATA[
<p>If you want a good foundation of understand for VATMOSS, then I highly recommend reading <a href="http://rachelandrew.co.uk/archives/tag/vat">Rachel Andrew&#39;s posts</a>.</p>
<p>That said, having read as much as I can around the web, I still don&#39;t feel like I have a good handle on this thing, but I&#39;m posting this, partly to flesh out my thoughts, help others in the same situation, and probably rant.</p>
<p>We have to be VATMOSS ready by 1-Jan 2015. That&#39;s just over 2 weeks away.</p>
<p><em>Please note: this is barely edited, and feels a bit &#39;scare-monger-y&#39; (sorry) and I would <strong>strongly encourage comments</strong>, corrections, updates, etc in the comments.</em></p>
<h2>What is VATMOSS</h2>
<p>In my own words, and my layman understanding:</p>
<p>Being in the UK and VAT registered, today I need to charge 20% VAT to all non VAT registered EU customers. Outside the EU, there&#39;s no VAT applied. If the customer is VAT registered, then I don&#39;t apply VAT.</p>
<p>This changes with VATMOSS, but only for those EU customers. Instead of charging UK 20% VAT, I must charge the individual their local VAT. So if the customer is German, I charge them 19% VAT.</p>
<p><strong>This logic will apply to all businesses running in the EU.</strong></p>
<h2>Technical considerations</h2>
<p>There&#39;s a list of important technical items I need to check off to make sure I&#39;m compliant:</p>
<ul>
<li>Collect <em>two</em> pieces of non-conflicting information that proves which EU member state the customer is in. This can be IP address (with country lookup), or bank country, or address, and so on. I believe Stripe has all this information for me and I don&#39;t need to collect anything extra.</li>
<li>I need an up to date list of all the VAT rates for EU states. <a href="http://jsonvat.com">http://jsonvat.com</a> is a good example of what I need, but it&#39;s maintained by an individual so I intend to use a copy of the file, and try, somehow, to manually stay on top of live updates via <a href="http://www.vatlive.com/vat-rates/european-vat-rates/eu-vat-rates/">VAT live</a>. Far from ideal.</li>
<li>Since I have users that are subscribed to a subscription model, I need to shift them all off the existing 20% fixed VAT subscription and move them to the new system of dynamic VAT rates (and I&#39;ll email all those individuals to attempt to explain).</li>
<li>I&#39;m using <a href="https://stripe.com">Stripe</a> for payment processing, so we&#39;re having to upgrade with the following logic:<ol>
<li>Add an addition invoice item to their initial subscription that adds VAT.</li>
<li>When the <code>invoice.created</code> webhook comes in, only if the <code>data.paid</code> is <code>false</code> then add the VAT as an addition invoice item.</li>
</ol>
</li>
</ul>
<h2>Issues</h2>
<ol>
<li>I don&#39;t see any way to retrospectively ask my existing subscriptions for more information about their sign up. It&#39;s technically possibly that I capture their IP address in our application logs, and manually add them to our Stripe customers, but that&#39;s a messy process.</li>
<li>I read that the invoices have to adhere to the county&#39;s regulations. I&#39;ve no idea what that is for all the countries. It was hard enough finding a list of the rates, let alone the invoice requirements.</li>
<li>We don&#39;t currently send out any emails from JS Bin on subscription renewal - I suspect that&#39;s a weak spot and we&#39;ll need to implement that.</li>
<li>A way to report for the EU MOSS return...sigh.</li>
</ol>
<p>My biggest issue, and the one that&#39;s actually killing business in the UK, is the admin overhead of this change outweighs the benefits.</p>
<p>I&#39;ve considered blocking EU members from subscribing (and therefore unsubscribing existing EU customers), but some &quot;legislation (eg anti discrimination) may apply&quot;.</p>
<p>I&#39;ve considered just killing the business side of JS Bin because this whole process is so disheartening.</p>
<p>I&#39;ve joked about charging a flat 27% VAT (as this is the highest) and intentionally reporting the wrong TAX to the VAT office. Historically if they owe you money, the VAT office is horrible to work with (whereas if you owe them money, they&#39;re particularly efficient), so maybe this is a clean simple &quot;solution&quot;.</p>
<p>I&#39;ve looked at <a href="http://quaderno.io">Quaderno</a> and <a href="http://www.taxamo.com/">Taxamo</a>, but the technical implementation isn&#39;t our issue - it&#39;s the business admin. I&#39;m also wary of changing our existing UX for the upgrade process, asking for a tonne more information seems overkill and unnecessary, and only required to satisfy these over the top legislations.</p>
<h2>In closing</h2>
<p>VATMOSS is a total mess. It&#39;s even more concerning that the details haven&#39;t <a href="https://www.enterprisenation.com/blog/posts/exclusive-hmrc-update-on-vat-moss">even been fleshed</a> out yet with 2 weeks to go (notice the post says they&#39;re going to post detailed guidance...).</p>
<p>I&#39;m reviewing Quaderno right now, but the more I look the more I feel like our bespoke solution is the right way to go.</p>
<p>However, this does leave a very sour taste in my mouth for running more business online, and it&#39;s further support that the UK government does not care anywhere near as much as it should, about entrepreneurship in the UK.</p>
<p>This legislation is killing business in the UK.</p>
]]></content:encoded></item></channel></rss>