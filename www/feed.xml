<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/"><channel><title>remy sharp's b:log</title><atom:link href="http://remysharp.com/feed/" rel="self" type="application/rss+xml"></atom:link><link>http://remysharp.com</link><description>About [code] and all that jazz</description><lastBuildDate>Wed, 19 Nov 2014 12:00:00 +0000</lastBuildDate><language>en-US</language><sy:updatePeriod>hourly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><item><title>My five promise patterns</title><guid isPermaLink="false">my-five-promise-patterns</guid><link>http://remysharp.com/2014/11/19/my-five-promise-patterns</link><pubDate>Wed, 19 Nov 2014 12:00:00 +0000</pubDate><description><![CDATA[I&#39;ve been getting big into promises over the last year. I think the two best resources that I&#39;ve learnt from today is Forbes Lindesay&#39;s talk at JSConf.EU 2013 and Jake Archibald&#39;s excellent promise article on html5rocks.
There&#39;s been some patterns that I use over and over so I wanted to share and document them.
Please note that the examples used are mostly based on my real code, but have been simplified for demonstration purposes.


Library of choice
Firstly I prefer to use the native implementation, and go bare bones. I&#39;m sure they will be a time that I&#39;ll want more than the native API has to offer, but I&#39;ve not arrived there yet.
As a client side polyfill and the server side, in node-land, since promises are oddly not available natively, my preferred library is then/promise.
I&#39;ve used RSVP in the past and heard decent things about Bluebird.
RSVP feels like it&#39;s mostly bare bones, but I learnt about promise.js&#39; denodeify which converts a callback based function into a promise function which can be very useful.
Update @ 2014-11-19 15:30:00 RSVP does also have denodeify and Matt Andrews of The FT has released a stand alone denodeify module.
Clean shallow chains
This means my initial promise code would look like:
writeFile(filename, content)
  .then(addDBUser)
  .then(dns)
  .then(configureHeroku)
  .then(function () {
    console.log(&#39;All done&#39;);
  })
This is easy if these are all my functions, but I can also do this with third party libraries via denodeify (a feature of the promise.js library, though most promise libraries have something similar) â€“ turn a callback pattern function into a promise based function:
var writeFile = Promise.denodeify(fs.writeFile):

writeFile(filename, content)
  .then(addDBUser)
Though one place I&#39;ve been caught out with denodeify is when the method relies on method&#39;s context, which is most things as it turns out (fs is just a fluke that it&#39;s methods don&#39;t rely on the context), so make sure to bind as required:
var addUser = Promise
  .denodeify(model.user.add)
  .bind(model.user) // multi line for blog readability
Prebaking
You&#39;ve already seen that I use bind, but I&#39;ve also found that in some situations, I need to call a function with static arguments (i.e. not relying on the previous promise), just because it&#39;s part of the promise chain.
I could do this:
writeFile(filename, content)
  .then(function () {
    return addUserToDb(&#39;rem&#39;, &#39;password&#39;, &#39;some-db&#39;);
  })
Or, what I&#39;ve found I&#39;m more inclined to do now is prebake the addUserToDb call with the static arguments:
var addUser = addUserToDb.bind(null, &#39;rem&#39;,
      &#39;password&#39;, &#39;some-db&#39;);

writeFile(filename, content)
  .then(addUser)
This also allows me to code with the shallow chains as above, because it (to me) feels a bit verbose to drop into a function just to return a promise straight back out that doesn&#39;t depend on any unknown variable.
The thing to watch out for is if the function behaves differently if there&#39;s more arguments, I have to cold call the promise.
Cold calling
Disclaimer: this patterned is required due to my own prebaking patterns and attempts to (ironically) simplify. There&#39;s a good chance you won&#39;t need this!
When a function works both as a promise and using the callback pattern - it&#39;s great, but I&#39;ve been caught out in the past.
The way the function might work under the hood is something like (this pseudo code):
Heroku.prototype.post = function (slug, options, callback) {
  // do some async thing
  this.request(slug, options, function (error, data) {

    // ** this line is how the dual functionality works ** //
    if (callback) callback(error, data);

    // else do something with promise
  });

  // return some promise created some place
  return this.promise;
}
So post can be called either as a promise:
heroku.post(slug, opts).then(dostuff);
Or as a callback:
heroku.post(slug, opts, dostuff);
But gets messy when you do this:
function configureHeroku(slug) {
  // prebake heroku app create promise
  var create = heroku.post.bind(heroku,
    &#39;/apps&#39;,
    { name: &#39;example-&#39; + slug }
  );

  // prebake domain config
  var domain = heroku.post.bind(heroku,
    &#39;/apps/example-&#39; + slug + &#39;/domains&#39;,
    { hostname: slug + &#39;.example.com&#39; }
  );

  // ** this is where it goes wrong ** //
  return create().then(domain);
}
The issue is when domain is called, it&#39;s actually called with the prebaked arguments of the slug and options but also the resolved value from create() - so a third argument is received.
This third argument is the resolved result of create() which is treated as the callback argument and as a function object, so the code will try to invoke it - causing an exception.
My solution is to wrap in a cold call - i.e. a newly created function that calls my method with no arguments. Like bind once but then never allow any new arguments, also known as currying (here&#39;s a simple demo of the curry/partial/seal type-thing):
function coldcall(fn) {
  return function () {
    fn();
  };
}

function configureHeroku(slug) {
  // prebake heroku app create promise
  // ...


  // ** now it works ** //
  return create().then(coldcall(domain));
}
Note: you can do this using currying, i.e. lodash.curry.
Now the domain call works because it&#39;s invoked preventing any extra arguments being added.
Throw over explicit reject
Instead of:
// compare password &amp; input password
return new Promise(function (resolve, reject) {
  bcrypt.compare(input, password, function (error, result) {
    if (error || !result) {
      // reject and early exit
      return reject(error);
    }

    resolve(result);
  });
});
I&#39;ll throw instead of reject:
// compare password &amp; input password
return new Promise(function (resolve) {
  bcrypt.compare(input, password, function (error, result) {
    if (error) {
      throw error;
    }

    if (!result) {
      throw new Error(&#39;Passwords did not match.&#39;);
    }

    resolve(result);
  });
});
This might be a little controversial. In fact, when I threw this out to twitter, most people came back with something like:

Reject whenever possible, it&#39;s more performant because throw breaks the stack.

This may well be so, but there&#39;s a few key benefits to my code when I throw:

I&#39;m used to error first handling, and quite often I&#39;ll accidently recieve reject as the first argument, which leads to much confusion. This way, I only ever accept resolve as my argument. There&#39;s also issues where &quot;reject&quot; and &quot;resolve&quot; as words are visually similar, which has also lead to confusion when they&#39;re the wrong way around!
I don&#39;t have to remember to return reject. I&#39;ve seen code that doesn&#39;t return on reject, and it then goes on to resolve with a value. Some libraries fulfill, some reject, some throw new errors. Throwing the error avoids this entirely.
This is also consistent with the way I&#39;ll deal with errors inside of subsequent then calls:

// compare password &amp; input password
utils.compare(input, password)
  .then(function () {
    if (!validUsername(username)) {
      throw new Error(&#39;Username is not valid&#39;);
    }
    // continues...
  })
  .then(etc)
Jake also chimed in with a couple of useful replies:

reject is supposed to be analogous to throw but async. So reject what you&#39;d throw (which is usually an error)

Then linked to his post with &quot;in ES7 async functions reject is throw&quot;. This also reinforces that you want to reject with a real error, not a string.
Always end with a catch
It&#39;s not uncommon for me to be testing a http request with a promise, and it just never returns...
The issue is that the promise has been rejected somewhere and it&#39;s not been caught. So I always end with a catch. Even if it&#39;s a dump to the console, that way I know something failed.
writeFile(filename, content)
  .then(addDBUser)
  .then(dns)
  .then(configureHeroku)
  .then(function () {
    console.log(&#39;All done&#39;);
  })
  .catch(function (error) {
    // do something with error
    console.log(error.stack);
    handle(error);
  });
This final catch lets me see the full stacktrace as to what went wrong, and importantly that something did go wrong (see blog comments for discussion about this).
Note: .catch() is only in the ES6 spec and doesn&#39;t appear in Promises/A+ so some library implementations are missing .catch() support (as I&#39;ve found with mongoose as it depends on mPromise library).
Recap
So that&#39;s it:

Shallow chains
Prebaking where I can and cold calling if neccessary
Always throw
Always catch

Pretty simple. I&#39;d be interested to hear what patterns are emerging in your workflow too.]]></description><content:encoded><![CDATA[
<p>I&#39;ve been getting big into promises over the last year. I think the two best resources that I&#39;ve learnt from today is Forbes Lindesay&#39;s <a href="https://www.youtube.com/watch?v=qbKWsbJ76-s">talk at JSConf.EU 2013</a> and Jake Archibald&#39;s excellent <a href="http://www.html5rocks.com/en/tutorials/es6/promises/">promise article on html5rocks</a>.</p>
<p>There&#39;s been some patterns that I use over and over so I wanted to share and document them.</p>
<p><em>Please note that the examples used are </em>mostly<em> based on my real code, but have been simplified for demonstration purposes.</em></p>
<!-- more -->

<h2>Library of choice</h2>
<p>Firstly I prefer to use the native implementation, and go bare bones. I&#39;m sure they will be a time that I&#39;ll want more than the native API has to offer, but I&#39;ve not arrived there yet.</p>
<p>As a client side polyfill and the server side, in node-land, since promises are oddly not available natively, <strong>my preferred library is <a href="https://github.com/then/promise">then/promise</a></strong>.</p>
<p>I&#39;ve used <a href="https://github.com/tildeio/rsvp.js">RSVP</a> in the past and heard decent things about <a href="https://github.com/petkaantonov/bluebird">Bluebird</a>.</p>
<p>RSVP feels like it&#39;s mostly bare bones, but I learnt about promise.js&#39; <code>denodeify</code> which converts a callback based function into a promise function which can be very useful.</p>
<p><em>Update @ 2014-11-19 15:30:00</em> RSVP does also have <a href="https://github.com/tildeio/rsvp.js/blob/master/lib/rsvp/node.js#L74">denodeify</a> and Matt Andrews of The FT has released a <a href="https://www.npmjs.org/package/denodeify">stand alone denodeify</a> module.</p>
<h2>Clean shallow chains</h2>
<p>This means my initial promise code would look like:</p>
<pre><code class="language-js">writeFile(filename, content)
  .then(addDBUser)
  .then(dns)
  .then(configureHeroku)
  .then(function () {
    console.log(&#39;All done&#39;);
  })</code></pre>
<p>This is easy if these are all my functions, but I can also do this with third party libraries via <code>denodeify</code> (a feature of the promise.js library, though most promise libraries have something similar) â€“ turn a callback pattern function into a promise based function:</p>
<pre><code class="language-js">var writeFile = Promise.denodeify(fs.writeFile):

writeFile(filename, content)
  .then(addDBUser)</code></pre>
<p>Though one place I&#39;ve been caught out with <code>denodeify</code> is when the method relies on method&#39;s context, which is most things as it turns out (<code>fs</code> is just a fluke that it&#39;s methods don&#39;t rely on the context), so make sure to <code>bind</code> as required:</p>
<pre><code class="language-js">var addUser = Promise
  .denodeify(model.user.add)
  .bind(model.user) // multi line for blog readability</code></pre>
<h2>Prebaking</h2>
<p>You&#39;ve already seen that I use <code>bind</code>, but I&#39;ve also found that in some situations, I need to call a function with static arguments (i.e. not relying on the previous promise), just because it&#39;s part of the promise chain.</p>
<p>I <em>could</em> do this:</p>
<pre><code class="language-js">writeFile(filename, content)
  .then(function () {
    return addUserToDb(&#39;rem&#39;, &#39;password&#39;, &#39;some-db&#39;);
  })</code></pre>
<p>Or, what I&#39;ve found I&#39;m more inclined to do now is prebake the <code>addUserToDb</code> call with the static arguments:</p>
<pre><code class="language-js">var addUser = addUserToDb.bind(null, &#39;rem&#39;,
      &#39;password&#39;, &#39;some-db&#39;);

writeFile(filename, content)
  .then(addUser)</code></pre>
<p>This also allows me to code with the <a href="#clean-shallow-chains">shallow chains</a> as above, because it (to me) feels a bit verbose to drop into a function just to return a promise straight back out that doesn&#39;t depend on any unknown variable.</p>
<p>The thing to watch out for is if the function behaves differently if there&#39;s more arguments, I have to cold call the promise.</p>
<h2>Cold calling</h2>
<p><strong><em>Disclaimer:</em></strong> <em>this patterned is required due to my own prebaking patterns and attempts to (ironically) simplify. There&#39;s a good chance you won&#39;t need this!</em></p>
<p>When a function works both as a promise <em>and</em> using the callback pattern - it&#39;s great, but I&#39;ve been caught out in the past.</p>
<p>The way the function might work under the hood is something like (this pseudo code):</p>
<pre><code class="language-js">Heroku.prototype.post = function (slug, options, callback) {
  // do some async thing
  this.request(slug, options, function (error, data) {

    // ** this line is how the dual functionality works ** //
    if (callback) callback(error, data);

    // else do something with promise
  });

  // return some promise created some place
  return this.promise;
}</code></pre>
<p>So <code>post</code> can be called either as a promise:</p>
<pre><code class="language-js">heroku.post(slug, opts).then(dostuff);</code></pre>
<p>Or as a callback:</p>
<pre><code class="language-js">heroku.post(slug, opts, dostuff);</code></pre>
<p>But gets messy when you do this:</p>
<pre><code class="language-js">function configureHeroku(slug) {
  // prebake heroku app create promise
  var create = heroku.post.bind(heroku,
    &#39;/apps&#39;,
    { name: &#39;example-&#39; + slug }
  );

  // prebake domain config
  var domain = heroku.post.bind(heroku,
    &#39;/apps/example-&#39; + slug + &#39;/domains&#39;,
    { hostname: slug + &#39;.example.com&#39; }
  );

  // ** this is where it goes wrong ** //
  return create().then(domain);
}</code></pre>
<p>The issue is when <code>domain</code> is called, it&#39;s actually called with the prebaked arguments of the slug and options <em>but also</em> the resolved value from <code>create()</code> - so <strong>a third argument is received</strong>.</p>
<p>This third argument is the resolved result of <code>create()</code> which is treated as the <code>callback</code> argument and as a function object, so the code will try to invoke it - causing an exception.</p>
<p>My solution is to wrap in a <em>cold call</em> - i.e. a newly created function that calls my method with no arguments. Like bind once but then never allow any new arguments, also known as currying (here&#39;s a simple demo of the <a href="https://jsbin.com/gopiqu/edit?js,console">curry/partial/seal</a> type-thing):</p>
<pre><code class="language-js">function coldcall(fn) {
  return function () {
    fn();
  };
}

function configureHeroku(slug) {
  // prebake heroku app create promise
  // ...


  // ** now it works ** //
  return create().then(coldcall(domain));
}</code></pre>
<p><em>Note: you can do this using currying, i.e. <a href="https://lodash.com/docs#curry">lodash.curry</a>.</em></p>
<p>Now the <code>domain</code> call works because it&#39;s invoked preventing any extra arguments being added.</p>
<h2>Throw over explicit reject</h2>
<p>Instead of:</p>
<pre><code class="language-js">// compare password &amp; input password
return new Promise(function (resolve, reject) {
  bcrypt.compare(input, password, function (error, result) {
    if (error || !result) {
      // reject and early exit
      return reject(error);
    }

    resolve(result);
  });
});</code></pre>
<p>I&#39;ll throw instead of reject:</p>
<pre><code class="language-js">// compare password &amp; input password
return new Promise(function (resolve) {
  bcrypt.compare(input, password, function (error, result) {
    if (error) {
      throw error;
    }

    if (!result) {
      throw new Error(&#39;Passwords did not match.&#39;);
    }

    resolve(result);
  });
});</code></pre>
<p>This might be a little controversial. In fact, when I threw this out to twitter, most people came back with something like:</p>
<blockquote>
<p>Reject whenever possible, it&#39;s more performant because throw breaks the stack.</p>
</blockquote>
<p>This may well be so, but there&#39;s a few key benefits to my code when I throw:</p>
<ol>
<li>I&#39;m used to error first handling, and quite often I&#39;ll accidently recieve <code>reject</code> as the first argument, which leads to much confusion. This way, I only ever accept <code>resolve</code> as my argument. There&#39;s also issues where &quot;reject&quot; and &quot;resolve&quot; as words are visually similar, which has also lead to confusion when they&#39;re the wrong way around!</li>
<li>I don&#39;t have to remember to <code>return reject</code>. I&#39;ve seen code that doesn&#39;t return on reject, and it then goes on to <code>resolve</code> with a value. Some libraries fulfill, some reject, some throw new errors. Throwing the error avoids this entirely.</li>
<li>This is also consistent with the way I&#39;ll deal with errors inside of subsequent <code>then</code> calls:</li>
</ol>
<pre><code class="language-js">// compare password &amp; input password
utils.compare(input, password)
  .then(function () {
    if (!validUsername(username)) {
      throw new Error(&#39;Username is not valid&#39;);
    }
    // continues...
  })
  .then(etc)</code></pre>
<p>Jake also chimed in with a couple of useful replies:</p>
<blockquote>
<p>reject is supposed to be analogous to throw but async. So reject what you&#39;d throw (which is usually an error)</p>
</blockquote>
<p>Then linked to his <a href="http://jakearchibald.com/2014/es7-async-functions/">post</a> with <em>&quot;in ES7 async functions reject is throw&quot;</em>. This also reinforces that you want to reject with a real error, not a string.</p>
<h2>Always end with a catch</h2>
<p>It&#39;s not uncommon for me to be testing a http request with a promise, and it just never returns...</p>
<p>The issue is that the promise has been rejected somewhere and it&#39;s not been caught. So I <strong>always end with a catch</strong>. Even if it&#39;s a dump to the console, that way I know something failed.</p>
<pre><code class="language-js">writeFile(filename, content)
  .then(addDBUser)
  .then(dns)
  .then(configureHeroku)
  .then(function () {
    console.log(&#39;All done&#39;);
  })
  .catch(function (error) {
    // do something with error
    console.log(error.stack);
    handle(error);
  });</code></pre>
<p>This final catch lets me see the full stacktrace as to what went wrong, and importantly <em>that something did go wrong</em> (see blog comments for discussion about this).</p>
<p><em>Note: <code>.catch()</code> is only in the ES6 spec and doesn&#39;t appear in Promises/A+ so some library implementations are missing <code>.catch()</code> support (as I&#39;ve found with <a href="http://www.mongoosejs.com/">mongoose</a> as it depends on <a href="https://www.npmjs.org/mpromise">mPromise</a> library).</em></p>
<h2>Recap</h2>
<p>So that&#39;s it:</p>
<ul>
<li>Shallow chains</li>
<li>Prebaking where I can and cold calling if neccessary</li>
<li>Always throw</li>
<li>Always catch</li>
</ul>
<p>Pretty simple. I&#39;d be interested to hear what patterns are emerging in your workflow too.</p>
]]></content:encoded></item><item><title>Muddling my way through real time</title><guid isPermaLink="false">muddling-my-way-through-real-time</guid><link>http://remysharp.com/2014/11/10/muddling-my-way-through-real-time</link><pubDate>Mon, 10 Nov 2014 12:30:00 +0000</pubDate><description><![CDATA[If your business deals with data on the web, then that data must be handled in real time, otherwise you&#39;re doing your user a disservice.

Real time demand is a core part of our internet experience, let alone expectation.
Twitter is probably the crowning application of real time I can think of. Hitting the mass audience and industries across the board.
Today we have real time journalism, data, feedback, communication between our teams, from our code and tests. Heck, we can create a brand new virtual machine in under 60 seconds ready to deploy a new site. Back in my day&trade; that process would take 2 weeks!
I recently returned from jsconf.eu 2014, and sitting in the office, only days later I kept catching myself thinking &quot;I&#39;ll just watch the video from jsconf&quot; â€“ but what video? They filmed their events, but somehow I was expecting the event to have already fully edited, titled, uploaded and release all their videos! I know some events that do do this (lxjs for one) â€“ but these aren&#39;t the norm. At what point did I have this (I think) unreasonable expectation on information on the web?
On demand and real time is a normal part of the world we live in today. And if you can&#39;t handle the pressure, your visitor will likely head off elsewhere.

This is my write up of the talk I&#39;ve given on the subject. Slides are also available and the video from SmartWebConf is included below (53mins).]]></description><content:encoded><![CDATA[
<p>If your business deals with data on the web, then that data must be handled in real time, otherwise you&#39;re doing your user a disservice.</p>
<hr>
<p>Real time demand is a core part of our internet experience, let alone expectation.</p>
<p>Twitter is probably the crowning application of real time I can think of. Hitting the mass audience and industries across the board.</p>
<p>Today we have real time journalism, data, feedback, communication between our teams, from our code and tests. Heck, we can create a brand new virtual machine in under 60 seconds ready to deploy a new site. <em>Back in my day</em>&trade; that process would take 2 weeks!</p>
<p>I recently returned from jsconf.eu 2014, and sitting in the office, only days later I kept catching myself thinking &quot;I&#39;ll just watch the video from jsconf&quot; â€“ but what video? They filmed their events, but somehow I was expecting the event to have already fully edited, titled, uploaded and release <em>all</em> their videos! I know some events that do do this (<a href="http://lxjs.org">lxjs</a> for one) â€“ but these aren&#39;t the norm. At what point did I have this (I think) unreasonable expectation on information on the web?</p>
<p><em>On demand</em> and <em>real time</em> is a normal part of the world we live in today. And if you can&#39;t handle the pressure, your visitor will likely head off elsewhere.</p>
<hr>
<p>This is my write up of the talk I&#39;ve given on the subject. <a href="https://speakerdeck.com/rem/muddling-my-way-through-real-time">Slides are also available</a> and the video from SmartWebConf is included below (53mins).</p>
<p><img src="/images/muddling-in-real-time-cover.gif" alt="Muddling your way in real time"></p>
<iframe width="1280" height="720" src="//www.youtube.com/embed/EUnNov3h3c0?index=5&list=PLbUMlIAqtRWNbxKZujb0mO5WHQcwJopBm" frameborder="0" allowfullscreen></iframe>

<hr>
<h2>Contents</h2>
<ol>
<li><a href="#what-is-real-time-to-you">What is real time to you</a></li>
<li><a href="#my-first-introduction-to-real-time-on-the-web">My first introduction to real time on the web</a></li>
<li><a href="#the-origins-of-comet">The origins of Comet</a></li>
<li><a href="#node-is-introduced">Node is introduced</a><ul>
<li><a href="#the-event-loop">The event loop</a></li>
<li><a href="#helloworldjs-of-streaming-servers">helloworld.js of streaming servers</a></li>
</ul>
</li>
<li><a href="#codifying-into-standards">Codifying into standards</a></li>
<li><a href="#so-whats-next">So, what&#39;s next?</a></li>
<li><a href="#core-npm-modules">Core npm modules</a><ul>
<li><a href="#socket-abstraction">Socket abstraction</a></li>
</ul>
</li>
<li><a href="#primus">Primus</a></li>
<li><a href="#scaling">Scaling</a><ul>
<li><a href="#client-side">Client side</a></li>
<li><a href="#server-side">Server side</a></li>
</ul>
</li>
<li><a href="#long-latency-real-time-feedback">Long-latency real time feedback</a></li>
<li><a href="#to-wrap-up">To wrap up</a></li>
</ol>
<h2>What is real time to you?</h2>
<p>I think it&#39;s important to define what <em>I think</em> &quot;real time&quot; means. <a href="http://www.devthought.com/">Guillermo Rauch</a> (creator of Socket.IO) has a <a href="https://www.youtube.com/watch?v=Ar9R-CX217o">few</a> <a href="https://www.youtube.com/watch?v=_8CykecwKhw">excellent</a> talks on the topic, and he describes real time as:</p>
<ul>
<li>Fast</li>
<li>Self-updating</li>
</ul>
<p>I&#39;d go further to say (for me) it needs to be:</p>
<ul>
<li><em>Instant</em></li>
<li>Self-updating</li>
</ul>
<p>I think it&#39;s also important to distinguish between what&#39;s technically real time and what a user perceives as real time. The later being important and the former being arbitrary.</p>
<p>Some applications have been know to respond <em>so</em> quickly that they had to introduce a fake delay to meet their users expectations Specifically: when the program responded so instantly, the user thought something was wrong. With a small delay and a touch of UI feedback (along the lines of &quot;we&#39;ve processing your request&quot;), the user <em>felt</em> the a application was more responsive.</p>
<p>Inversely you might get a push notification to your phone that someone&#39;s mentioned you in a tweet, but when you go to twitter, it can&#39;t connect to update itself. Or <em>you</em> post a tweet and it doesn&#39;t appear in your timeline for ages if you&#39;re on a slow connection. In this case, we want a &quot;self-updating&quot;, and one that can handle errors.</p>
<p>This is my own story of how I discovered the web in real time, what I&#39;ve done over the years and how I use node.js to simplify what used to be very technical problem.</p>
<h2>My first introduction to real time on the web</h2>
<p>My first experience with a real time web was around 2002. I worked for many years on a finance research web site, and stock prices were an important aspect of data.</p>
<p>If you wanted live prices on your site at the time, there would be expensive licences with the London Stock Exchange and some form of Java Applet on your site. We settled for a recurring job that grabbed a 15 minute delayed price CSV file from Yahoo.</p>
<p><img style="width: 40%; display: block; margin: 0 auto;" src="/images/hahabusiness.jpg" title="What it's like to work for the finance sector"></p>
<p>The meant that our prices would be &quot;15 minute delayed&quot; (which was a normal expectation of prices shown on free web sites) but for the subsequent 15 minutes the prices would go stale.</p>
<p>What does that look like?</p>
<pre><code class="language-js">function updatePrices() {
  $.get(&#39;/prices?stock=MSFT&#39;, function (data) {
    renderPrices(data);
    setTimeout(updatePrices, 60 * 1000);
  });
}</code></pre>
<p>Notice that we&#39;re polling using an ajax GET request every minute, in an attempt to get the fresh price when it arrives. The timing looks like this:</p>
<pre><code class="language-nohighlight">09:14 MSFT=$46.68
09:15 ...no change
09:16 ...no change
09:17 ...
09:18 ...
...
09:23 ...
09:24 MSFT=$46.68
09:25 ...no change</code></pre>
<p>It&#39;s also important to realise that all those &quot;no change&quot; requests were wasteful, both because the client is constantly making XHR requests, but the server is also having to deal with requests when the data hasn&#39;t changed at all.</p>
<p>The server is the &quot;ultimate source of truth&quot; and what we want is the <em>server</em> to <em>push</em> the prices to the client.</p>
<hr>
<p>It was one afternoon that one of the data collection team asked me to take a look at one of the finance research sites that they were looking at: Hemscott (I should add the original pages have long since left the web).</p>
<p>The page had a <a href="http://en.wikipedia.org/wiki/Heat_map">heatmap</a> of the FTSE100 prices. What made this particular page interesting is that the prices were changing in real time, and the red/green/sneutral were also changing, so there was a clear visual feedback system to show me this data was live.</p>
<p>What made this page magical though, was I ran the usual &quot;select text test&quot;. i.e. if I can select the text, then it&#39;s &quot;of the web&quot;. If I can&#39;t, it&#39;s Flash or Java Applets (and right clicking would discover which). But this <em>was</em> web. There was a DOM.</p>
<p><img src="/images/hemscott.gif" alt="Hemscott from 2002"></p>
<p><small>(Appologies for the poor picture above: the internet really <em>doesn&#39;t</em> remember!)</small></p>
<p>I spent quite a lot of time poking around some compressed JavaScript, looking at the DOM updating (this was back in the Firebug days so there was no <a href="https://developer.chrome.com/devtools/docs/dom-and-styles#setting-dom-breakpoints">break on DOM subtree modification</a>).</p>
<p>Hemscott had been able to do what we could not: real time prices, using web technology. <strong>It was magic.</strong> That&#39;s all I could ascertain.</p>
<hr>
<p>In retrospect (over several years) I realised that they were achieving the real time effect using Flash. Specifically the <code>XMLSocket</code> to connect to the streaming server and using the &quot;Flash SWF ExternalInterface Bridge&quot; to let JavaScript receive messages from the live stream.</p>
<p>Essentially a very similar technique that&#39;s used in today&#39;s <a href="https://github.com/gimite/web-socket-js">WebSocket polyfill</a> (which uses Flash for the filling part).</p>
<p>In the mean time Google released Google Talk which was the big tipping point in the web&#39;s history for shifting from a request/response pattern, to a server-push pattern, Ajax and Comet respectively.</p>
<h2>The origins of Comet</h2>
<p>Google launched GTalk in 2005 (as part of Gmail) and at the time Google were employing ex-Microsoft developers to solve a very, <em>very</em> specific problem. GTalk used long lived iframes to push the chat events up to the client.</p>
<p>But &quot;long lived&quot; means that they needed to refresh (or specifically: reload) eventually, and that reload in IE would cause an <a href="javascript:window.xpaudio.play()">audible clicking noise</a> (this was actually a feature of XP&#39;s audio suite). Imagine for a moment, that clicking, coming from seemingly nowhere, on a regular basis when you&#39;re chatting online with your friends. Annoying!</p>
<audio id="xpaudio" controls style="width: 100%;" src="/downloads/clicking.wav"></audio>

<p>The solution is amazing (or certainly to me) and the epitome of the web: a hack upon hack upon hack.</p>
<p><a href="http://infrequently.org/2006/02/what-else-is-burried-down-in-the-depths-of-googles-amazing-javascript/">The solution</a> would be to create an ActiveX htmlfile object, drop the document with an iframe inside that and the clicking would be suppressed.</p>
<p>And so a stable server push technology emerged.</p>
<hr>
<p>Comet was coined by <a href="http://infrequently.org">Alex Russell</a> (of Dojo fame, and now simply known as The&nbsp;Oracleâ„¢ at Google/he works on Blink) <a href="http://infrequently.org/2006/03/comet-low-latency-data-for-the-browser/">defined</a> as a method to push data from the server to the client (the browser).</p>
<p>Comet is not a specific technology, but more of an abstracted process. The implementation varied, and frankly at the time, was better suited to system engineers rather than your cowboy developer...like me.</p>
<p>Comet <em>could</em> involve any mix of iframes (of course!), long polling, XHR, long running script tags, and so on. To add to complexity, there were oddly named protocols like the Bayeux protocol and BOSH.</p>
<p>All things that provided barrier to entry, but real time, rightly, was hard. Real time appeared more and more across the web.</p>
<hr>
<p><strong>The real hurdle is that there&#39;s <em>two</em> parts to real time: client <em>and</em> the server.</strong></p>
<hr>
<p>The usual set up for a server in the mid-2000s was to use a <a href="http://en.wikipedia.org/wiki/LAMP_(software_bundle">LAMP stack</a>. Apache being the main sticking point.</p>
<p>Apache is designed (out of the box) to run and spawn a number of processes to deal with concurrent requests.</p>
<p>So if you have 5 apache processes waiting to deal with web requests, and you have 6 requests, the 6th user will have to wait until there&#39;s a free process before apache can respond.</p>
<p>This is usually find when you&#39;re deal with a request/response situation, apache is fast for that. But when you&#39;re keeping connections open to allow a server to <em>push</em> a message to the client, you saturate the available apache processes.</p>
<p>What does this mean in practise? If you have 5 processes and 6 streaming <em>requests</em>, the 6th <em>will never</em> receive a response. And to that user, the site is hanging indefinitely.</p>
<p>The solution to the server issue is evented server. If I recall correctly, this would be: Twisted for Python, Jakarta for Java, Juggernaut for Ruby, etc. But they were non-trivial to set up.</p>
<p>Come 2009 and Ryan Dahl.</p>
<h2>Node is introduced</h2>
<p><img src="/images/ryan-node.jpg" alt="Ryan introduces Node at jsconf"></p>
<p>At the first jsconf.eu, Ryan Dahl, introduced <a href="http://lanyrd.com/2009/jsconfeu/skpz/">node.js: evented IO for V8</a>.</p>
<p>The talk starts quite technical and detailed, but Ryan started to draw similarities with what he was doing with node.js with the DOM.</p>
<p>Although node.js has nothing to do with the DOM, the way that the event loop works is very similar to the way a browser will work.</p>
<h3>The event loop</h3>
<p>This is what an event loop <em>could</em> look like:</p>
<pre><code class="language-lua">function main
  initialize()
  while message != quit
    message := get_next_message()
    process_message(message)
  end while
end function</code></pre>
<p>In a browser, the <code>get_next_message</code> could be the user clicking the mouse, or an XHR request completing, or a render, or some JavaScript being run. The point being is that the loop waits for a task, then processes that task.</p>
<p>This is where node.js makes concurrent requests (i.e. holding 100s if not 1000s of open connections to clients) easy.</p>
<h3>helloworld.js of streaming servers</h3>
<p>As Ryan demoed in his talk 5 years ago, the code following is the simple proof that comet servers are incredibly simple with Node. The key with the server side is being able to hang inbound requests <em>whilst</em> also getting on with other work, like accepting more inbound requests.</p>
<pre><code class="language-js">var http = require(&#39;http&#39;);

var server = http.createServer(function (req, res) {
  res.writeHead(200, { &#39;content-type&#39;: &#39;text/html&#39; });
  res.write(&#39;&lt;script&gt;console.log(&quot;this is the start of the stream...&quot;)&lt;/script&gt;&#39;);

  var timer = setInterval(function () {
    // if the connection has closed, and we can&#39;t write anymore
    if (!res.connection || !res.connection.writable) {
      // then clear this interval, and *attempt* to end the response
      clearInterval(timer);
      res.end();
    } else {
      // otherwise, keep sending a script with logging
      res.write(&#39;&lt;script&gt;console.log(&quot;and now more messages...&quot;)&lt;/script&gt;&#39;);
    }
  }, 2000);
});

server.listen(8080);</code></pre>
<p>This code is saved to <code>server.js</code> and run using <code>node server.js</code> and now I can visit <code>localhost:8080</code> on my machine, and it should start logging, in 2 second increments &quot;and now more messages...&quot; (<a href="http://lit-thicket-2959.herokuapp.com/">live demo version that writes to the DOM</a>).</p>
<p>A comet server has a bit more to it, but with this simple few lines of code we can create as many persistent connection as we like and our server will continue to accept requests.</p>
<p>During the timeout, the server isn&#39;t &quot;sleeping&quot;, it&#39;s <em>waiting</em> for the next event, be it the time it to fire, or for another request to come in.</p>
<p>Equally we can easily give the server <em>more</em> things to do with the single event loop. It could be collecting live prices from a server, or making APIs calls, or have its own scheduling task all inside the single program <em>because</em> of the way node.js is architectured.</p>
<p>What&#39;s particularly elegant about node.js today, is that it&#39;s incredibly simple to install, has first class support across all three platforms (windows, linux and mac) and is extremely well documented and supported by the community.</p>
<h2>Codifying into standards</h2>
<p>As time passed, using Flash and various hacks to achieve real time eventually landed into the standards, typically under the umbrella term of HTML5.</p>
<p>That&#39;s to say, today we have <em>three</em> native client side solutions to communicating with the server:</p>
<ol>
<li>Ajax &amp; <a href="http://caniuse.com/#search=xhr2">XHR2</a>. Well known. Well loved. Well understood. The XHR2 spec takes the API further and gives us much more functionality.</li>
<li><a href="http://caniuse.com/#search=eventsource">EventSource</a>. Push based server <em>events</em>, that automatically reconnect when the connection is dropped.</li>
<li><a href="http://caniuse.com/#search=websockets">WebSockets</a>. Bi-directional, persistent sockets, that can be made across origin.</li>
</ol>
<p><em>Side note: that there is also WebRTC, which is a real-time standard in browsers today, but it&#39;s for peer-to-peer (in general), rather than with servers.</em></p>
<p>These standards are good because: all browsers implementing new features will implement these features in an interoperable way. With the exception of EventSource, all these are supported by IE10 and all other browsers (and EventSource has excellent support through <a href="http://html5please.com/#eventsource">polyfills</a>).</p>
<h2>So, what&#39;s next?</h2>
<p>Now we live in a world where both the client side <em>and</em> server side has been solved and is simple to work with, what can we actually do?</p>
<p>Here&#39;s a few examples of where I&#39;ve used node.js for real time:</p>
<ul>
<li>Live reload remote devices with user generated content (in JS Bin)</li>
<li>Codecasting - like screencasting, but with HTML, CSS &amp; JavaScript</li>
<li>Remote console injection - for running a desktop console against any mobile device (like old Android or Windows phone)</li>
<li>Proxy sensor events - streaming the accelerometer from a mobile device to desktop for testing</li>
<li>User discovery - for a two player game waiting for each other to join the session (like two users joining a chat room)</li>
<li>Push notification to browser for both progress events and when a long task has completed</li>
</ul>
<p>A lot of this is made very easy with existing node modules developed by the node community, and stress tested by everyone else.</p>
<h2>Core npm modules</h2>
<p>As I&#39;m sure many of you know, the node module repository is rife with libraries to do just about <a href="https://www.npmjs.org/package/true">everything</a>. The libraries that handle real time communication have been baked, and run through the mill pretty hard and there&#39;s lot of good choice nowadays.</p>
<p>What&#39;s particularly useful about many of these libraries is that they provide both sides of the infrastructure required to achieve real time, and usually require very little to get started.</p>
<p>The two libraries that I would encourage you to gravitate towards are <a href="http://socket.io">Socket.IO</a> (v1.x) and <a href="http://primus.io">Primus</a>.</p>
<h3>Socket abstraction</h3>
<p>Normally I prefer to be quite close to the metal, and I generally code directly with the native APIs, but in this case, both libraries give me an abstraction layer that&#39;s <em>built upon</em>. This means if I want to multiplex or have specific events emitting on a socket, it&#39;s easy as it either comes with the library (in Socket.IO&#39;s case) or can be added via middleware (for Primus).</p>
<p>The benefits of each, as I seem them are:</p>
<ul>
<li>Socket.IO: will test and degrade down to the best technology to sustain a persistent connection</li>
<li>Primus: provides a common low level interface to communicate with socket libraries and to &quot;prevent module lock-in&quot;, but of specific interest is the middleware selection</li>
</ul>
<p>For my examples, I&#39;m using Primus with the <code>websocket</code> transformer.</p>
<h2>Primus</h2>
<p>Primus used both on the server side and client side. I&#39;m using express for my examples, so we bind Primus to the express http server:</p>
<pre><code class="language-js">// setup express
var express = require(&#39;express&#39;);
var app = express();
var Primus = require(&#39;primus&#39;);

// configure express
app.use(express.static(&#39;.&#39;));
var server = require(&#39;http&#39;).createServer(app);

// start the web server
server.listen(process.env.PORT || 8000);

// now instantiate primus with our express server
var primus = new Primus(server, {
  transformer: &#39;websockets&#39;
});

// add the emit middleware letting me define my own event types
primus.use(&#39;emit&#39;, require(&#39;primus-emit&#39;));

// when we get a connection...
primus.on(&#39;connection&#39;, function (spark) {
  // the inbound socket is referred to as a &quot;spark&quot;

  // respond to ping events with a pong
  spark.on(&#39;ping&#39;, function () {
    spark.emit(&#39;pong&#39;);
  });
});</code></pre>
<p>The client side is simple and small, and also has the ability to emit (rather than <em>just</em> <code>primus.on(&#39;data&#39;, fn)</code> and <code>primus.write(data)</code>) because the server includes the <a href="https://github.com/primus/emit">emit</a> middleware:</p>
<pre><code class="language-html">&lt;!-- magic script provided by primus, note that --&gt;
&lt;!-- this can saved and served as a static file --&gt;
&lt;script src=&quot;/primus/primus.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
var primus = Primus.connect(&#39;/&#39;);

primus.on(&#39;pong&#39;, function () {
  alert(&#39;Pong received loud and clear&#39;);
});

primus.emit(&#39;ping&#39;);
&lt;/script&gt;</code></pre>
<p><a href="http://sheltered-wave-6638.herokuapp.com/">Here&#39;s a live demo</a> (for what it&#39;s worth!). That&#39;s really all there is to it. The source for my <a href="https://github.com/remy/face-hit-game">face-tap game is on github</a> and can be seen on <a href="http://game.rem.io">game.rem.io</a> and be sure to try it whilst you have the <a href="http://game.rem.io/scores">scoreboard</a> open.</p>
<p>The game uses Primus to communicate, but also includes a broadcast function to all except &quot;me&quot;:</p>
<pre><code class="language-js">function broadcast(event, data, source) {
  primus.forEach(function (spark) {
    if (spark.id !== source.id) {
      spark.emit(event, data);
    }
  });
}</code></pre>
<h2>Scaling</h2>
<p>This is a problem on both the server side <em>and</em> the client. The server side you want to use the same techniques you&#39;d use for regular web traffic: <a href="http://www.haproxy.org/">HAProxy</a>, <a href="https://github.com/nodejitsu/node-http-proxy">node-http-proxy</a>, nginx, etc. <a href="http://tech.blog.box.com/2014/06/node-js-high-availability-at-box/">Nicholas Zakas has an excellent article</a> on scaling with HAProxy.</p>
<h3>Client side</h3>
<p>On the client, the issue is saturating the concurrent connections you can have per origin. The <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8">HTTP 1.1 spec</a> states the following for persistent connections:</p>
<blockquote>
<p>Clients that use persistent connections SHOULD limit the number of simultaneous connections that they maintain to a given server. A single-user client SHOULD NOT maintain more than 2 connections with any server or proxy. These guidelines are intended to improve HTTP response times and avoid congestion.</p>
</blockquote>
<p>However we know that <a href="http://www.chromium.org/developers/design-documents/network-stack#TOC-Connection-Management">Chrome has increased</a> this default from 2 to 6 per origin. It doesn&#39;t matter what the per browser implementation issue is because they&#39;re all <em>quite</em> low.</p>
<p>One solution that I know of is (and I believe Facebook also do this) is to generate a random origin address (usually a CNAME) so your socket is connecting to <code>ws://e01938e4.example.com</code> and this is aliased back on to your socket server. This way you constantly generate a new origin for the socket to connect through and you don&#39;t hit the early limit of 6 (or so) concurrent connections.</p>
<p>If I was using Heroku to scale, I&#39;d add the domain <code>*.example.com</code> to the list of domains in the settings panel for the app.</p>
<p>Now <code>anything.example.com</code> will land on my Heroku app and I can bypass the browser&#39;s limit on persistent connections by origin.</p>
<h3>Server side</h3>
<p>Once you scale horizontally with a proxy - or even just drag a Heroku dyno to 11 - you&#39;ll be asking yourself how does a socket connected to <code>server A</code> talk to a socket connected to <code>server B</code>?</p>
<p>The solution I&#39;ve been exploring is using Primus&#39; middleware combo of <a href="https://github.com/primus/metroplex">metroplex</a> and <a href="https://github.com/primus/omega-supreme/">omega-supreme</a> (yes, there&#39;s a Transformer theme!).</p>
<p>Metroplex registers your server in a Redis database (version 2.6 or above is required - brew seemed to ship 2.4) upon startup (which <em>should</em> auto unregister after 5 minutes of idle). That way you can query redis to ask what servers are also active:</p>
<pre><code class="language-js">// I&#39;m passing in a redis instance so that all my
// instances of this server connect to the _same_
// redis database.
var primus = new Primus(server, {
  transformer: &#39;websockets&#39;,
  redis: redis,
});

// add the Primus middleware (after instantiation)
primus.use(&#39;metroplex&#39;, require(&#39;metroplex&#39;));
primus.use(&#39;omega-supreme&#39;, require(&#39;omega-supreme&#39;));
primus.use(&#39;emit&#39;, require(&#39;primus-emit&#39;));

// now I can query the registered servers
primus.metroplex.servers(function (err, servers) {
  console.log(&#39;other servers: %d&#39;, servers.length, servers);
});</code></pre>
<p>Note that the address for the server is the same address as the webserver that your Primus instance is bound to.</p>
<p>Then with omega-supreme, you can forward messages to known servers. So if <code>server A</code> knows that <code>server B</code> is active, it can forward broadcast messages to <code>server B</code>:</p>
<pre><code>primus.forward(server, data, function (error, data) {
  // data contains the number of sparks that got the message
});</code></pre>
<p>The above example, <code>server</code> would be the address of <code>server B</code>. Now if we upgrade the <code>broadcast</code> function from above, it would look like this:</p>
<pre><code>function broadcast(event, data, source) {
  // query which servers are registered to our redis db
  primus.metroplex.servers(function (err, servers) {
    servers.forEach(function (server) {
      primus.forward(server, {
        emit: [event, data]
      }, noop);
    });
  });

  // note that the primus forward will handle this for us
  primus.forEach(function (spark) {
    if (spark.id !== source.id) {
      spark.emit(event, data);
    }
  });
}</code></pre>
<p>Note that for omega-supreme to support the <code>emit</code> method for named events, instead of passing in <code>data</code> as the second argument to <code>primus.forward</code>, you pass in an object that simply contains <code>emit: [event, data]</code>. This will then fire the named events as I&#39;m using them in my code.</p>
<p>This is effectively what a client sending a broadcast would look like if Redis was backing the Primus setup:</p>
<p><img src="/images/primus-scale.svg" alt="Primus with omega-supreme and metroplex"></p>
<h2>Long-latency real time feedback</h2>
<p>One aspect that particularly interests me is long running requests. For example, when I created <a href="http://5minfork.com">5minfork</a> (a site that clones a github repo and hosts it for 5 minutes), there&#39;s a point when the user requests to clone a git repo and there&#39;s a potential latency period while the server clones.</p>
<p>This period length is unknown (i.e. we could be cloning a large project which takes time), but we do know that it&#39;s <em>not instant</em>. So how do we communicate to the user that work is in progress and <em>most importantly</em> tell the user that the work is done and they can proceed?</p>
<p>Easily with node.js because the server can kick off a background process, and whilst it&#39;s cloning, instead of waiting, the node server continues to accept web requests. This way we can serve a holding page to indicate that we&#39;re actively working on the cloning process.</p>
<p>I&#39;ve replicated this process in the <a href="http://long-latency.rem.io/random">long latency demo</a> (<a href="https://github.com/remy/long-poll-status">source also available</a>)</p>
<p>This consists of:</p>
<ol>
<li>A <code>GET</code> request handler to start the (fake) long latency process. The URL is given a unique identifier and we set a flag for that identifier to say it&#39;s in progress.</li>
<li>The server responds with a holding page that will open a poll request to the same URL we <code>GET</code> in step 1 (equally this could be a long poll or a Web Socket or something to keep checking on the status).</li>
<li>The poll eventually gets some status that the server is done performing it&#39;s task, and trigger a refresh of the same page (though this could be handled in all manners of ways).</li>
</ol>
<p>Since node is very good at asynchronous type code (though it&#39;s not better than others, it&#39;s just a much more natural workflow), it makes kicking off a background task and responding immediately to the &quot;are we there yet&quot; requests, however they&#39;re made, very very simple.</p>
<h2>To wrap up</h2>
<p>It is exceptionally easy to add real-time to your project using Node.js. Node on a single CPU without any optimisation can work out very well for most small to medium sized projects.</p>
<p>We&#39;ve leaped so far ahead in the last 10 years, that it&#39;s insane how simple it is to add real-time via projects like Socket.io and Primus.</p>
<p>Don&#39;t be afraid to try it out. Even if it&#39;s for your own side/tinker project that you whip up and post on heroku (as are all these demos). It&#39;s too easy, and it&#39;s too important for today&#39;s user expectations not to!</p>
]]></content:encoded></item><item><title>Motivation</title><guid isPermaLink="false">motivation</guid><link>http://remysharp.com/2014/10/27/motivation</link><pubDate>Mon, 27 Oct 2014 10:30:00 +0000</pubDate><description><![CDATA[The world ain&#39;t all sunshine and rainbows. It&#39;s a very mean and nasty place and I don&#39;t care how tough you are it will beat you to your knees and keep you there permanently if you let it. You, me, or nobody is gonna hit as hard as life. But it ain&#39;t about how hard ya hit. It&#39;s about how hard you can get it and keep moving forward. How much you can take and keep moving forward.

Behind the screen, behind the internet, I&#39;m generally a bit of a depressive chap. I have been for many, many years. Going back to early childhood. I&#39;ve not talked about it online before, and I&#39;m not sure how much I will in the future.]]></description><content:encoded><![CDATA[
<blockquote>
<p>The world ain&#39;t all sunshine and rainbows. It&#39;s a very mean and nasty place and I don&#39;t care how tough you are it will beat you to your knees and keep you there permanently if you let it. You, me, or nobody is gonna hit as hard as life. But it ain&#39;t about how hard ya hit. It&#39;s about how hard you can get it and keep moving forward. How much you can take and keep moving forward.</p>
</blockquote>
<p>Behind the screen, behind the internet, I&#39;m generally a bit of a depressive chap. I have been for many, many years. Going back to early childhood. I&#39;ve not talked about it online before, and I&#39;m not sure how much I will in the future.</p>
<p>When I realise that I&#39;m in a slump of depression, it&#39;s like a weight on my back and around my neck. I imagine Superman with a cloak of Kryptonite.</p>
<p>It&#39;s shit. It&#39;s <em>really</em> shit. I know how I want to feel, I want to feel happy, grateful, I want to laugh and feel loved, yet I can&#39;t get there. It&#39;s shit that I can&#39;t.</p>
<p>I can see myself wanting to be alone, retreating and wanting to hide from everything.</p>
<p>That&#39;s when I need motivation. <em>This is new for me</em>. I&#39;ve found motivation to move forward. To take what my depression has to give and tell myself (out loud) over and over that I will make it out of this feeling.</p>
<p>I&#39;ve recently found motivation from a few very specific things I&#39;ve read and heard.</p>
<p>The first was the quote from the start of this post. I heard <em>two</em> things in this speech (from Rocky Balboa no less):</p>
<ol>
<li>How my children are the world to me, and I&#39;m there to help them get through the world and I have to be a strong model for them.</li>
<li>Thanks to Julie (my wife), realising that this speech applies to me and my wife. Losing our daughter to stillbirth, we managed, somehow, to survive, and to stay strong.</li>
</ol>
<p>The second I came across after Robin Williams on 11-August 2014 took his own life:</p>
<blockquote>
<p><strong>Depression lies</strong>.</p>
</blockquote>
<p>I&#39;d never thought of it like that, but it does. I can be doing nothing, and a thought just pops into my head like: &quot;...the reason you were hated at collage was...&quot;. But if I tell myself &quot;depression lies&quot;, I realise that thought is utter bullshit. I&#39;ve no idea what motivates my brain to produce real thoughts like that, but if I tell myself, out loud, &quot;depression lies&quot;, I&#39;m able to take a breath and brush the nastiness off.</p>
<p>I read about this first on Will Wheaton&#39;s blog: <a href="http://wilwheaton.net/2012/09/depression-lies/">depression lies</a> and I found <a href="http://wilwheaton.net/2014/05/you-stand-at-the-edge/">this post useful too</a>.</p>
<p>Finally, I watched <a href="https://www.youtube.com/watch?v=gkjW9PZBRfk">Emma Watson&#39;s address to the UN</a>. It fired something up inside of me. Something that I identified with and believe in. I intend to show my son and daughter the video when they&#39;re old enough to pay attention (currently 3 years and 5 months respectively, so they&#39;re a way off).</p>
<p>I can&#39;t quite articulate what it is that makes me motivated to move forward in Watson&#39;s address, but I emplore you watch the video. It&#39;s 13 minutes. Incredibly inspiring and something I think all young and old should watch, boys in particular.</p>
<hr>
<p>For me, I need something to reach into my slump and lend it&#39;s hand to pull me up. These three things are helping me do that for me right now. I love my family so much, and I want them to feel loved by me.</p>
<hr>
<p>This post is first and foremost for me. When I feel shit again, I&#39;ll find this post again, read it, and remember that I <em>can</em> stand tall, and say: depression lies. Fuck you, depression.</p>
<p><small>Reposted from <a href="https://the-pastry-box-project.net/remy-sharp/2014-october-5">The Pastry Box Project</a></small></p>
]]></content:encoded></item><item><title>Adding an (SHA256 signed) SSL certificate</title><guid isPermaLink="false">how-to-add-ssl</guid><link>http://remysharp.com/2014/10/17/how-to-add-ssl</link><pubDate>Fri, 17 Oct 2014 9:00:00 +0000</pubDate><description><![CDATA[I&#39;ve had to update the SSL certificate quite a few times on jsbin.com in the last 6 months, and I keep a cheatsheet of SSL steps on my machine. So it&#39;s about time I publish it somewhere that I can google too!]]></description><content:encoded><![CDATA[
<p>I&#39;ve had to update the SSL certificate quite a few times on <a href="http://jsbin.com">jsbin.com</a> in the last 6 months, and I keep a cheatsheet of SSL steps on my machine. So it&#39;s about time I publish it somewhere that I can <em>google</em> too!</p>
<p>This walkthrough explains how to add an SSL certificate to your server. This is based on using a linux based machine (in my case Ubuntu) and nginx as the server.</p>
<p>I registered my SSL certificate via <a href="https://namecheap.com">namecheap</a> from RapidSSL which is actually a shell for GeoTrust.</p>
<p>If you&#39;re reissuing a certificate to upgrade to SHA256 (from SHA-1) (because <a href="https://konklone.com/post/why-google-is-hurrying-the-web-to-kill-sha-1">SHA-1 is being ditched</a>) from RapidSSL <strong>you must</strong> reissue directly from them. See <a href="https://github.com/konklone/shaaaaaaaaaaaaa/issues/24#issuecomment-54021941">this comment</a> for full details.</p>
<p>Assuming my site is example.com, I&#39;m using <code>example</code> as the main filename.</p>
<pre><code class="language-nohighlight">openssl genrsa -aes256 -out example-encrypted.key 2048
openssl rsa -in example-encrypted.key -out example-decrypted.key
openssl req -new -sha256 -key example-decrypted.key -out example.csr</code></pre>
<p>The last command will generate the CSR which will go off to your SSL issuer. I have this a cheatsheet for the prompts (if you&#39;re based in the UK, since <code>Locality</code> might not mean much):</p>
<ul>
<li>Country name: <code>GB</code>, a country code, not name</li>
<li>State: <code>East Sussex</code>, county if you&#39;re in the UK</li>
<li>Locality: <code>Brighton</code>, your city</li>
<li>Organisation: <code>My Company Ltd</code></li>
<li>Org unit: leave empty</li>
<li>Common name: <code>www.example.com</code>, the full domain for the cert</li>
<li>Leave the rest blank (email, challenge password &amp; company name)</li>
</ul>
<p><strong>Note:</strong> if you have a wildcard certificate, then the common name is <code>*.example.com</code>.</p>
<p>Send <code>example.csr</code> contents to reissued SSL cert, and agree to all the emails.</p>
<p>You should get an email from the SSL issue with the certificate. Save the contents of &#39;certificate&#39; in <code>example.crt</code>.</p>
<p>Now get the intermediate certificate (I&#39;m using <a href="https://knowledge.rapidssl.com/support/ssl-certificate-support/index?page=content&amp;actp=CROSSLINK&amp;id=SO26459">RapidSSL&#39;s SHA256 cert</a>) and combine into a single bundled file - note that the order is important:</p>
<pre><code class="language-nohighlight">cat example.crt intermediate.crt &gt; bundle.crt</code></pre>
<hr>
<p><em>RapidSSL specific note</em>: I found that the GeoTrust certificate (part of the intermediate certificate that I downloaded above) was still SHA-1 signed. So I dropped it, only bundling my own certificate and the rapidSSL certificate (so less certificates) and now I get the green lock from Chrome Canary. Note: I&#39;m not <em>100%</em> if this is okay, but it does seem valid.</p>
<hr>
<p>Finally, make sure nginx (in my case) is using the bundle and the key used to generate the csr:</p>
<pre><code class="language-conf">ssl                  on;
ssl_certificate      /WWW/example.com/certs/bundle.crt;
ssl_certificate_key  /WWW/example.com/certs/example-decrypted.key;</code></pre>
<p>Then restart nginx:</p>
<pre><code class="language-nohighlight">nginx -s reload</code></pre>
<h2>References &amp; tools:</h2>
<ul>
<li><a href="https://shaaaaaaaaaaaaa.com/">shaaaaaaaaaaaaa</a> (for checking SHA-1)</li>
<li><a href="https://www.ssllabs.com/ssltest/analyze.html">SSL labs</a> (for deep SSL analysis)</li>
<li><a href="https://www.sslshopper.com/article-most-common-openssl-commands.html">common openssl commands</a></li>
</ul>
]]></content:encoded></item><item><title>Element focus utility</title><guid isPermaLink="false">focus-dev-util</guid><link>http://remysharp.com/2014/10/14/focus-dev-util</link><pubDate>Tue, 14 Oct 2014 13:30:00 +0000</pubDate><description><![CDATA[I&#39;ve recently been looking at retrofitting keyboard navigation support to JS Bin, but I was immediately struck by the totally lack of visibility on what was in focus.]]></description><content:encoded><![CDATA[
<p>I&#39;ve recently been looking at retrofitting keyboard navigation support to JS Bin, but I was immediately struck by the totally lack of visibility on <em>what</em> was in focus.</p>
<p>Sure, this is a short-coming of the original design and bad choises I had made with JS Bin&#39;s code base. Perhaps you can see from the animation below, when the <code>body</code> is in focus, tabbing is focusing <em>something</em> but until I actually tab to the &quot;HTML&quot; panel title, there&#39;s no visual feedback as to <em>what</em> I should be fixing:</p>
<p><img src="/images/tab-focus-clueless.gif" alt="Tab focusing is clueless"></p>
<p>If you can see it, the browser&#39;s status bar tells me that I&#39;m moving focus, but it&#39;s near impossible to work out which element I&#39;m working with.</p>
<p>So I built a mini utility to visualise what&#39;s happening. Now with that utility:</p>
<p><img src="/images/tab-visibility.gif" alt="Tabbing visible"></p>
<h2>Installation</h2>
<p>Either add the code directly to your project as a debug dependancy, or use it as a snippet in your devtools:</p>
<pre><code class="language-js">(function () {
  var active = document.createElement(&#39;pre&#39;);
  document.body.appendChild(active);
  active.tabindex = -1;
  with (active.style) { // warning: `with` I know what I&#39;m doing!
    position = &#39;fixed&#39;;
    padding = &#39;2px&#39;;
    bottom = right = &#39;20px&#39;;
    margin = 0;
    fontSize = 12;
    color = &#39;#fff&#39;;
    background = &#39;#aaa&#39;;
    whiteSpace = &#39;pre-wrap&#39;;
    maxWidth = &#39;95%&#39;;
  }

  var lastActive = null;
  var showActive = function () {
    var el = document.activeElement;
    var html = &#39;&#39;;
    var attrs = el.attributes;
    var i = 0;

    if (el !== lastActive &amp;&amp; el !== active) {
      for (; i &lt; attrs.length; i++) {
        html += &#39; &#39; + attrs[i].name + &#39;=&quot;&#39; + attrs[i].value + &#39;&quot;&#39;;
      }

      active.textContent = &#39;&lt;&#39; + el.nodeName.toLowerCase() + html + &#39;&gt;&#39;;
      lastActive = el;
    }

    requestAnimationFrame(showActive);
  };

  showActive();
})();</code></pre>
<p>Here&#39;s a live demo:</p>
<p><a class="jsbin-embed" href="https://jsbin.com/yibiwa/2/embed?output">JS Bin</a><script src="https://drt35l4oshkgr.cloudfront.net/js/embed.js"></script></p>
<p>So now I have visibility on <em>what</em> is being focused, I can fix various issues ranging from <code>outline</code> being removed, only including <code>:hover</code> styles and not <code>:focus</code> and applying <em>proper</em> <a href="http://oaa-accessibility.org/example/25/">menu logic</a> to menu-like objects.</p>
]]></content:encoded></item><item><title>What is a &quot;Web App&quot;?</title><guid isPermaLink="false">what-is-a-web-app</guid><link>http://remysharp.com/2014/10/06/what-is-a-web-app</link><pubDate>Mon, 06 Oct 2014 16:00:00 +0000</pubDate><description><![CDATA[In technology definitions are important. We talk in a language that&#39;s mostly made up by our own industry.
Bugs, cache, regressions, polyfills, monads, polymorphic functions, isomorphic JavaScript and a lot more language. Even when you do work in our industry, it&#39;s hard to keep up with all the language.
There there&#39;s &quot;web app&quot;. A lot of people (including myself) will refer to many web sites as apps. But why? I don&#39;t know of a good definition (&quot;good&quot; in that there&#39;s no hand-waving involved).
So here&#39;s my definition and distinction between web site and web app.]]></description><content:encoded><![CDATA[
<p>In technology definitions are important. We talk in a language that&#39;s mostly made up by our own industry.</p>
<p>Bugs, cache, regressions, polyfills, monads, polymorphic functions, isomorphic JavaScript and a lot more language. Even when you <em>do</em> work in our industry, it&#39;s hard to keep up with all the language.</p>
<p>There there&#39;s &quot;web app&quot;. A lot of people (including myself) will refer to many web sites as <em>apps</em>. But why? I don&#39;t know of a good definition (&quot;good&quot; in that there&#39;s no hand-waving involved).</p>
<p>So here&#39;s my definition and distinction between web site and web app.</p>
<h2>Web site</h2>
<p>A URL that you visit. Classic examples include a blog or a wiki. Where the content is waiting for you at the end of the URL.</p>
<p>JS Bin is a web site by this definition. You visit the URL and create content. Someone will share a bin, and you visiting this content. <strong>You go to the site</strong>.</p>
<h2>Web app</h2>
<p>A URL that you take with you. This is locally installed and data is <em>pushed to you</em>. Classic examples of this are email clients, news readers, task orientated applications. <strong>The app goes with you</strong>.</p>
<p>Importantly: you expect it to be available with or without an internet connection.</p>
<blockquote>
<p>Isn&#39;t this just a web site with offline support?</p>
</blockquote>
<p>I&#39;m still scoffing at &quot;<em>just</em>&quot;. Sure, if you want to dumb it down as such. But equally isn&#39;t an app on your screen, like Chrome or TomTom or PhotoShop, <em>just</em> some compiled code? Yes, it is, but it&#39;s actually a lot more than that.</p>
<p>The common language word we refer to compiled programs are: apps.</p>
<p>It&#39;s not that it&#39;s harder to build web apps, it&#39;s that the experience with these types of web sites are fundamentally different to a web site like Wikipedia for instance.</p>
<hr>
<p>The future of web browsers is coming, and they&#39;re giving us more and more support for offline technology, through storage (for data caching) to control over the network (through <a href="https://github.com/slightlyoff/ServiceWorker">service workers</a>).</p>
<p>If you&#39;re using progressive enhancement, then your web site can achieve both. However, I don&#39;t believe it&#39;s entirely possible to create a web app without the functionality that JavaScript provides. So there&#39;s is <em>some</em> expectation that a web app relies on JavaScript, but that&#39;s not what makes a web app.</p>
<p>Now, next time you&#39;re asked to build a web app, at least you can have a feature set that you&#39;re working towards.</p>
]]></content:encoded></item><item><title>WordPress -&gt; Ghost -&gt; Harp (part 2)</title><guid isPermaLink="false">wordpress-ghost-harp-pt2</guid><link>http://remysharp.com/2014/09/30/wordpress-ghost-harp-pt2</link><pubDate>Tue, 30 Sep 2014 9:00:00 +0000</pubDate><description><![CDATA[I wrote about moving away from WordPress to Ghost and then to Harp in part 1, this post details some of the specifics of my blog&#39;s implementation.]]></description><content:encoded><![CDATA[
<p>I wrote about moving away from WordPress to Ghost and then to Harp in <a href="/2014/09/18/wordpress-ghost-harp-pt1">part 1</a>, this post details some of the specifics of my blog&#39;s implementation.</p>
<h2>Technical overview</h2>
<p>I&#39;m using <a href="http://harpjs.com">Harp</a> which is incredibly easy to get running with, but I&#39;m also running Harp as a dependency inside my own custom node web server which allows me to add a few bells a whistles to my implementation.</p>
<ul>
<li><a href="#custom-url-rewriting">Custom URL rewriting</a></li>
<li><a href="#static-caching">Static caching</a></li>
<li><a href="#use-of-special-helpers-inside-harp">Use of special helpers inside Harp, such as moment.js</a></li>
<li><a href="#list-of-recently-modified-posts">List of recently modified posts</a></li>
<li><a href="#archive--tag-pages-without-the-repetition-of-files">Archive &amp; tag pages without the repetition of files</a></li>
<li><a href="#makefile-based-release-process">Makefile based release process</a></li>
</ul>
<h2>Custom URL rewriting</h2>
<p>Since I was porting an existing blog, I wanted to ensure that the URLs didn&#39;t change. This meant supported my old <code>/year/month/day/title</code> format. Which over the years I dislike, but when I moved to Harp, I decided to drop the date from the body of my posts and allow the URL to speak for that metadata.</p>
<p>I <em>also</em> wanted to host my old downloads and demos on Amazon S3, but the URLs from old posts would be relative to my blog, so I needed to rewrite these.</p>
<p>I forked <a href="https://www.npmjs.org/package/router">router@npm</a> to create <a href="https://www.npmjs.org/package/router-stupid">router-stupid@npm</a> - which is essentially the same, slightly cut down, but importantly: if you modify the <code>req.url</code> in a route handler, that would affect the subsequent matched routes.</p>
<p>Redirecting is simple:</p>
<pre><code class="language-js">/* redirect to s3 hosted urls */
route.all(&#39;/demo/{filename}&#39;, function (req, res, next) {
  res.writeHead(302, { &#39;location&#39;: &#39;http://download.remysharp.com/&#39; + req.params.filename });
  res.end();
});</code></pre>
<p>Supporting my date base URL format was trickier. The actual file lives in <code>/blog/&lt;title&gt;</code> so when the URL hits my static server, it needs to be in that form. So supporting date base URL requires:</p>
<ol>
<li>The URL format is correct</li>
<li>The title of the post actually finds a post</li>
<li>The date in the URL matches the date for the post</li>
</ol>
<pre><code class="language-js">/* main url handler: /{year}/{month}/{day}/{post} */
route.all(/^\/([0-9]{4})\/([0-9]{1,2})\/([0-9]{1,2})\/([a-z0-9\-].*?)(\/)?$/, function (req, res, next) {
  var params = req.params;

  // the title slug of the url
  var post = blogs[params[4]];

  // make sure we have a real post before even proceeding
  if (post &amp;&amp; post.date) {
    // test if the date matches

    // post.date is a timestamp, so splitting gets us the date
    var date = moment(post.date.split(&#39; &#39;)[0]);

    var requestDate = params.slice(1, 4).join(&#39;-&#39;);

    // compare the date of post _in the same format_ as requestDate
    if (date.format(&#39;YYYY-MM-DD&#39;) !== requestDate) {
      // if it&#39;s not good, move on - will likely result in a 404
      return next();
    }

    // if there&#39;s a trailing slash, remove it and redirect
    if (params[5] === &#39;/&#39;) {
      res.writeHead(302, { &#39;location&#39;: req.url.replace(/(.)\/$/, &#39;$1&#39;)});
      res.end();
      return;
    }

    // this now allows Harp to pick up the correct post
    req.url = &#39;/blog/&#39; + params[4];
  }

  // then let the rest of the router do it&#39;s work
  next();
});</code></pre>
<h2>Static caching</h2>
<p>Having used Harp in previous projects (<a href="https://github.com/jsbin/learn">JS Bin&#39;s documentation</a>, <a href="https://github.com/leftlogic/fullfrontalconf2014/">our event site</a> and <a href="https://github.com/leftlogic/leftlogic">my business site</a>) and have created <a href="https://npmjs.org/package/harp-static">harp-static@npm</a> which uses <a href="https://npmjs.org/package/st">st@npm</a> to cache and serve static files.</p>
<p>So in my custom server, I point all routes down to the <code>st</code> served content. I also support hitting the URLs <em>without</em> <code>.html</code> at the end, again, to keep my old URLs working. I&#39;d recommend checking out the <a href="https://github.com/remy/harp-static">harp-static source</a> if this interests you.</p>
<h2>Use of special helpers inside Harp</h2>
<p>At present, if you want to use a library inside Harp, like <a href="http://momentjs.com">moment.js</a>, the work around for this is to create a <code>.jade</code> file with the source of moment.js (in this case) as script. Essentially the minified one line file prefixed with a <code>-</code> character.</p>
<p>Then include the library in a common file, like the layout, and you have the helper available:</p>
<pre><code class="language-jade">!- load the moment.js library for server side access
!= partial(&#39;/js/moment&#39;)</code></pre>
<p>Except this would break during compilation to static files. I&#39;m certain it&#39;s to do with my custom serving process, but the path would somehow be wrong (so the library wouldn&#39;t load and further down my code there would be exceptions in Jade about the library not existing).</p>
<p>The <em>smart</em> way around this is to expose a global from <em>outside of Harp</em>. So in my <code>server.js</code> (that does all the routing, etc) I <code>require</code> in moment.js and then I <a href="https://github.com/remy/remysharp.com/blob/master/server.js#L26">expose it globally</a>:</p>
<pre><code class="language-js">// this line, although dirty, ensures that Harp templates
// have access to moment - which given the whole partial
// import hack doesn&#39;t work consistently across dynamic vs
// compiled, this is the cleanest solution.
global.moment = moment;</code></pre>
<p>Very simple, but now any Harp rendered file has access to moment.js. I use the same technique to expose the recently modified posts for listing on the homepage.</p>
<h2>List of recently modified posts</h2>
<p>The best way to get a list of all the post from <em>outside</em> of Harp (i.e. when you&#39;re requiring Harp as a dependency), is to simply load the <code>_data.json</code> file. It felt wrong initially, but it&#39;s perfect:</p>
<pre><code class="language-js">var blogs = require(&#39;./public/blog/_data.json&#39;);
var slugs = Object.keys(blogs);</code></pre>
<p>Now I have an object lookup by slug to the actual blog posts <em>and</em> I have an array of the slugs.</p>
<p>From this, I was able to <code>fs.stat</code> all the blog posts and sort to return the 3 most recently modified and then using the previous trick, expose it globally so it&#39;s included on my homepage (where <code>recent</code> is the global exposed in <code>server.js</code>):</p>
<pre><code class="language-jade">each post in recent
  li
    a(href=&quot;#{ public.blog._data[post.slug].relative }&quot;) #{ public.blog._data[post.slug].title }
    small &amp;nbsp;updated #{ moment(post.date).fromNow() }</code></pre>
<h2>Archive &amp; tag pages without the repetition of files</h2>
<p>There&#39;s two parts to this section. Firstly there&#39;s the support for individual years or tags without duplication of (too much) code. Secondly is the Jade code that runs the archive listing.</p>
<h3>Reducing duplication of code</h3>
<p>I <em>could</em> have a directory for each year there are blog posts (which I do have now) and each could contain the archive listing code. The problem (obviously) is duplication of code. You fix it one place, and (in my case, since I have 2006-2014) you have 8 files to update.</p>
<p>Instead, a single file <code>index.jade</code> sits in tagged folder (and similarly with year folders) which contains:</p>
<pre><code class="language-jade">!= partial(&#39;../../_partials/tag&#39;)</code></pre>
<p>So we load a single partial. The <code>tag.jade</code> file simply reads the path of the request, and uses the last part as a filter against all the posts:</p>
<pre><code class="language-jade">tag = filter === undefined ? current.path.slice(-2, -1)[0] : filter;
posts = partial(&#39;posts&#39;, { filter: function (post) { return post.tags.indexOf(tag) !== -1 } })
.post
  h1.title Tagged with &quot;#{ tag }&quot;
  .post-content
    ul
      while posts.length
        post = posts.shift()
        if post.date
          li
            a(href=&quot;#{ post.relative }&quot;) #{ post.title }
            small.date #{ moment(post.date).format(&#39;D-MMM YYYY&#39;)}</code></pre>
<p>Note that <code>partial(&#39;posts&#39;)</code> is a magic partial that simply returns an array of blog posts with the passed in filter applied.</p>
<p>Simple. Now if I want to add more support for tags, I just create a directory and the simple <code>index.jade</code> and it works.</p>
<h3>An archive listing</h3>
<p>A while loop that looks for a year change in the date, then works through each year, popping from the posts array looping through each post in the month.</p>
<p>It&#39;s pretty cool (I think) because it works for entire years <em>and</em> all years: <a href="https://github.com/remy/remysharp.com/blob/a198a4235634a3c7ac747ab403ac13bc49140a39/public/_partials/archive.jade">archive.jade</a></p>
<h2>Makefile based release process</h2>
<p>Disclaimer: this is a terrible use of a Makefile, it doesn&#39;t leverage <em>any</em> of the benefits of make, and honestly, it <em>could</em> be a bash script. However, I like that I can run <code>make publish</code>.</p>
<p>Taking a lead from <a href="https://andreypopp.com/posts/2013-05-16-makefile-recipes-for-node-js.html">Makefile recipes for Node.js packages</a>, my <a href="https://github.com/remy/remysharp.com/blob/master/Makefile">makefile</a> allows me to run commands like:</p>
<pre><code class="language-bash">$ make release-minor publish</code></pre>
<p>The <code>release-*</code> tasks will:</p>
<ol>
<li>Bump the package version (according to patch/minor/major)</li>
<li>Compile Harp to static files</li>
<li>Commit all changes and tag</li>
<li>Push to github</li>
</ol>
<p>The version bump has to happen first so that the version I used to cache bust in the compiled output is correct (otherwise you bump after the compilation, and then your released version is one step ahead of the version that appears in the source).</p>
<p>And that&#39;s it! Here&#39;s the full running <a href="https://github.com/remy/remysharp.com">source to remysharp.com</a> - feel free to help yourself to anything that&#39;s useful for your own blogs or sites.</p>
]]></content:encoded></item><item><title>My  Velveteen Rabbit</title><guid isPermaLink="false">my-velveteen-rabbit</guid><link>http://remysharp.com/2014/09/24/my-velveteen-rabbit</link><pubDate>Wed, 24 Sep 2014 16:30:00 +0000</pubDate><description><![CDATA[This is the Velveteen Rabbit. The same picture hangs in my house.
I&#39;ve never bought any artwork in my life previously. I&#39;ve never really &quot;got it&quot;.
I walked past the picture in a shop window most days back from the gym, and something kept reaching out to me. I&#39;d stop and just look at the picture for several minutes before continuing my journey.
One time I even passed the picture, then turned back to spend a few idle minutes contemplating what it was that I drawn to.
My wife, Julie, eventually told me if something was pulling me so strongly, I should buy it. So now it hangs in my house.
I realised quickly what it was.

We lost our daughter, Tia to stillbirth on August 31 2010. My wife, after 9 months was finally in labour, and between the hours of labour and getting to hospital, she was lost. She never came home with us.
I have no proof that she exists. There were no baby clothes, no balloons, no happy photos.
It was like she didn&#39;t exist at all, and that somehow her existence was invalid.
I struggled with this a lot. I still do at times.

But I see the picture of Velveteen Rabbit. He stands there, upright and proud. Standing against the wind, feeling it on his fur and blowing his ears back. Defiant with love. &quot;I shall exist&quot;.
In that moment, that tiny moment, the Velveteen Rabbit does exist, against all odds. He&#39;s loved, and seen.
I always think of Tia when I look at that picture. She&#39;s not here any more. She doesn&#39;t exist in my world today. But she&#39;s always with me. She has left a mark. In my heart. I think of her and miss her. Other people can&#39;t see that, but she is here, with me.
A person doesn&#39;t have to be with you for you to love them. Just remember them. And love them. And they&#39;ll live on, with you.
Reposted from The Pastry Box Project]]></description><content:encoded><![CDATA[
<p><img src="/images/spring.jpg?" alt="The Velveteen Rabbit" style="display: block; max-width: 100%; width: 40%; margin: 0 auto; margin-right: 20px; float: left;"></p>
<p>This is the Velveteen Rabbit. The same picture hangs in my house.</p>
<p>I&#39;ve never bought any artwork in my life previously. I&#39;ve never really &quot;got it&quot;.</p>
<p>I walked past the picture in a shop window most days back from the gym, and something kept reaching out to me. I&#39;d stop and just look at the picture for several minutes before continuing my journey.</p>
<p>One time I even passed the picture, then turned back to spend a few idle minutes contemplating what it was that I drawn to.</p>
<p>My wife, Julie, eventually told me if something was pulling me so strongly, I should buy it. So now it hangs in my house.</p>
<p>I realised quickly what it was.</p>
<hr>
<p>We lost our daughter, Tia to stillbirth on August 31 2010. My wife, after 9 months was finally in labour, and between the hours of labour and getting to hospital, she was lost. She never came home with us.</p>
<p>I have no proof that she exists. There were no baby clothes, no balloons, no happy photos.</p>
<p>It was like she didn&#39;t exist at all, and that somehow her existence was invalid.</p>
<p>I struggled with this a lot. I still do at times.</p>
<hr>
<p>But I see the picture of Velveteen Rabbit. He stands there, upright and proud. Standing against the wind, feeling it on his fur and blowing his ears back. Defiant with love. &quot;I <em>shall</em> exist&quot;.</p>
<p>In that moment, that tiny moment, the Velveteen Rabbit does exist, against all odds. He&#39;s loved, and seen.</p>
<p>I always think of Tia when I look at that picture. She&#39;s not here any more. She doesn&#39;t exist in my world today. But she&#39;s always with me. She <em>has</em> left a mark. In my heart. I think of her and miss her. Other people can&#39;t see that, but she <em>is</em> here, with me.</p>
<p>A person doesn&#39;t have to be with you for you to love them. Just remember them. And love them. And they&#39;ll live on, with you.</p>
<p><small>Reposted from <a href="https://the-pastry-box-project.net/remy-sharp/2014-august-26">The Pastry Box Project</a></small></p>
]]></content:encoded></item><item><title>WordPress -&gt; Ghost -&gt; Harp (part 1)</title><guid isPermaLink="false">wordpress-ghost-harp-pt1</guid><link>http://remysharp.com/2014/09/18/wordpress-ghost-harp-pt1</link><pubDate>Thu, 18 Sep 2014 12:00:00 +0000</pubDate><description><![CDATA[I&#39;ve been running my &quot;b:log&quot; on WordPress since late 2006, but today I give you the node backed blog.
This is a two part blog post, the first covering why I moved, what I tried and a few of the high level issues I ran in to. Part two will cover some of the technical detail that goes in to running my blog on the new node platform.
These posts are not intended as walkthrough on how to do it yourself, but simply sharing my experience and bumps I ran into on the way, hoping to impart some useful knowledge along the way.]]></description><content:encoded><![CDATA[
<p>I&#39;ve been running my &quot;b:log&quot; on WordPress since late <a href="/2006">2006</a>, but today I give you the node backed blog.</p>
<p>This is a two part blog post, the first covering why I moved, what I tried and a few of the high level issues I ran in to. Part two will cover some of the technical detail that goes in to running my blog on the new node platform.</p>
<p>These posts are not intended as walkthrough on how to do it yourself, but simply sharing my experience and bumps I ran into on the way, hoping to impart some useful knowledge along the way.</p>
<hr>
<p>Over the years I&#39;ve had all the injections of Viagra adverts and the like over and over and over. Whenever I want to change anything, I&#39;d tend to give up, and for a few years now, I&#39;ve really wanted the source of my blog posts available in (something like) github.</p>
<p>This post is about the move and how I run my blog now.</p>
<h2>My goals</h2>
<p>In a totally ideal world, I wanted:</p>
<ul>
<li>A fast blogging platform (not particularly for publishing, but for serving)</li>
<li>Backed by JavaScript (Node specifically) - because it&#39;s the most familiar language to me</li>
<li>Edit links for posts to go to github allowing anyone to make a suggested edit</li>
<li>Archives and tag listings</li>
<li>URLs would be customisable (because I have old URLs that I want to support)</li>
<li>Could run on a free hosting platform like Heroku</li>
<li>As a bonus, I could hack and improve the system</li>
</ul>
<p>TL;DR here&#39;s the full source of my blog as it is today, on github: <a href="github.com/remy/remysharp.com"><a href="https://github.com/remy/remysharp.com/">https://github.com/remy/remysharp.com/</a></a>.</p>
<h2>Ghost</h2>
<p>I knew that I wanted to move to a node backed platform. Ghost seemed like the best fit, and I&#39;ve had the pleasure of meeting and listening to John O&#39;Nolan and Hannah Wolfe speak about Ghost, and I complete buy into the philosophy.</p>
<p>Exporting WordPress posts (and pages) to Ghost was actually very simple (I used the developer version of Ghost locally).</p>
<p>The only bump in the road was the error messaging during the Ghost import was pretty vague. But checking the devtools console yielded the answer, a 324 from my server during the upload process. So I tweaked nginx to allow for larger files to be uploaded and bosh. Fixed.</p>
<p>The next trick was the comments - which Disqus seemed like the default that everyone moves to. Obviously nothing to do with Ghost, but this process was tricky. The best advice I can give if you&#39;re doing this and keep hitting failed imports is: validate the XML (w3c validator is just fine), and hand-fix the invalid XML.</p>
<h3>Why I didn&#39;t stick with Ghost</h3>
<p>For the record, I think Ghost is an excellent platform for most users, particularly if they&#39;re coming to blogging for the first time or wanting to shift away from WordPress.</p>
<p>However, being a developer I wanted to add a few custom tweaks, specifically I wanted an archive page, a handful of URL rewrite rules and a few of the Ghost ways of doing things weren&#39;t quite what I wanted.</p>
<p>One particular example is all my old WordPress posts had split markers in them which Ghost doesn&#39;t support. They do have support for creating excepts, but if you want HTML you can&#39;t (at time of writing) append a read more to the link.</p>
<p>I tried to contribute to the Ghost project, but I ended up going down a rabbit hole for what was effectively a tiny change (submitting a pull request to a Ghost dependency Downsize).</p>
<p>The (understandable) problem is that Hannah and the Ghost team are producing code that works in a great deal of environments and so a quick PR here and there are great, but I can understand why they&#39;re not merged in right away if at all: there&#39;s a much bigger picture to consider.</p>
<p>I thought about just forking Ghost and permanently running my own version, but there&#39;s a fairly big system to inherit when all I&#39;m doing is serving pages...which I had done with Harp.js before.</p>
<p>So I made the jump to Harp.</p>
<h3>Ghost to Harp</h3>
<p>Harp is a static site generator. I&#39;ve used it in the past for <a href="http://2014.full-frontal.org">our conference site</a> this year and for the <a href="http://jsbin.com/help">JS Bin help &amp; blog</a> so I was already familiar with it.</p>
<p>However, harp requires static markdown files, so I went about connecting to the Ghost database via sqlite3 and exporting each of these records out as a static HTML file, whilst building up the <code>_data.json</code> file required by harp to represent the metadata.</p>
<p>The code I used to convert is on github here: <a href="https://github.com/remy/ghost-harp">remy/ghost-harp</a>. <em>Disclaimer</em>: I wrote this for my own database and requirements, so this may not work for you out of the box.</p>
<p>The conversion process is pretty simple, read the sqlite database, write to files. So I ended up with a folder structure like this:</p>
<pre><code class="language-nohighlight">.
â”œâ”€â”€ harp.json
â””â”€â”€ public
    â”œâ”€â”€ _data.json
    â”œâ”€â”€ about.md
    â”œâ”€â”€ blog
    â”‚   â”œâ”€â”€ 2007-moments.md
    â”‚   â”œâ”€â”€ 8-questions-after-ie-pissed-the-community-off.md
    â”‚   â”œâ”€â”€ _data.json
    â”‚   â”œâ”€â”€ _drafts
    â”‚   â”‚   â”œâ”€â”€ _data.json
    â”‚   â”‚   â”œâ”€â”€ my-velveteen-rabbit.md
    â”‚   â”‚   â””â”€â”€ why-i-prefer-mobile-web-apps-to-native-apps.md
    â”‚   â”œâ”€â”€ a-better-twitter-search.md
    â”‚   â”œâ”€â”€ wordpress-tagging-and-textmate.md
    â”‚   â””â”€â”€ youre-paying-to-speak.md
    â”œâ”€â”€ talks.md
    â””â”€â”€ twitter.md</code></pre>
<p>Some contents are going to be in HTML, but Ghost seemed to put my HTML posts in the markdown column (and since it&#39;s valid, it doesn&#39;t really matter).</p>
<p>One significant tweak I made was to put the post title <em>into</em> the post itself. For example, if you look at the source <a href="https://github.com/remy/remysharp.com/blob/master/public/about.md">about</a> page, you&#39;ll see the title in the markdown. Ghost separates out the title and the body when you&#39;re editing, but I wanted a single markdown file.</p>
<p>The next task was to fire up harp and have it running from my newly generated <code>public</code> directory.</p>
<h2>Harp</h2>
<p>Now that all my content is in the <code>public/blog</code> directory (via my little rewrite script) harp could serve my content. Using a simple (empty) <code>harp.json</code> as the config, harp automatically knows to serve anything under <code>public</code> as the root of the site (i.e. <code>/blog/foo</code> will serve the file <code>/public/blog/foo.md</code>):</p>
<p>My specific requirements for using harp were:</p>
<ul>
<li>Serves <em>static</em> content (so I&#39;d have to compile to static .html)</li>
<li>Serves in production <em>without</em> the <code>.html</code> extension visible</li>
<li>Support rewriting of URLs, so that I could maintain my original URL structure of <code>/&lt;year&gt;/&lt;month&gt;/&lt;day&gt;/&lt;post&gt;</code> rather than pointing to <code>/blog/&lt;post&gt;</code></li>
<li>I <em>really</em> wanted an archive, since I was simplifying a lot of my blog design, and losing a <em>lot</em> of navigation</li>
</ul>
<p>In the end, I had to create my own custom <code>server.js</code> that would run a bespoke router (I did use an existing library, but I needed changes, so I forked my own copy).</p>
<p>Harp certainly made things harder than using Ghost, but I had the flexability I needed.</p>
<p>I&#39;m particularly proud of the <a href="/archive">archive</a> page, partly because I managed to write it entirely with Jade (which over the years I&#39;m slowly starting to warm to) and partly because I now have a page that lists <em>all</em> my posts since the first in 2006!</p>
<p>The version I&#39;m running today satisfies all the goals I outlined at the start of the project, and more.</p>
<p>A few bonus features I built are:</p>
<ul>
<li>I can add <code>/edit</code> to any page to quickly jump to github to edit (along with edit links being on all the posts)</li>
<li>All the old demos and uploads from my WordPress site are hosted on Amazon S3 and redirected to via my <code>server.js</code></li>
<li>My development environment is slightly different to production, such as drafts are visible and the disqus comments are removed</li>
</ul>
<p>The <em>one</em> thing I&#39;d like harp to be better at would be knowing what to regenerate. Due to this my release process involves rebuilding the entire blog site (~300 posts) and then pushing the changes to github and then heroku (where I&#39;m now hosting my blog) - though this is effectively an rsync, so it&#39;s not everything that goes up.</p>
<h2>The final product</h2>
<p>The final product and platform consists of:</p>
<ul>
<li>Statically generated content in <code>/www</code></li>
<li>Source control in github</li>
<li>Production is hosted on a single dyno on Heroku</li>
<li>Using <a href="https://dnsimple.com/r/5bc02f2ef8976f">dnsimple</a> for <code>ALIAS</code> hosting to the heroku instance (so I can serve &quot;naked&quot; domains)</li>
<li>CloudFlare fronts the production blog</li>
<li>The major and minor version are used to cachebust the CSS &amp; JavaScript, due to this, it means changes to content are a patch release and all others are minor (or major) releases</li>
<li>The release process is a bash-like makefile that does all the compiling and revisioning for me</li>
</ul>
<p>So my whole release process for this blog post is now:</p>
<pre><code class="language-bash">$ make release-patch publish</code></pre>
<p>And boom, just like that, you&#39;re reading the post!</p>
<p>In part 2, I&#39;ll explain some of the code that&#39;s used to drive my blog and some of the tricks I had to use to get harp to play exactly the way I wanted.</p>
]]></content:encoded></item><item><title>In the middle with &lt;center&gt;</title><guid isPermaLink="false">in-the-middle-with-center</guid><link>http://remysharp.com/2014/08/15/in-the-middle-with-center</link><pubDate>Fri, 15 Aug 2014 14:38:14 +0000</pubDate><description><![CDATA[I posted a tweet recently that confused some people. They might have thought I was trolling or being sarcastic!

The &lt;center&gt; tag is awesome. Why have I been avoiding it all these years?

Seriously. It is. But I feel like I may have to defend my opinion on this one!]]></description><content:encoded><![CDATA[
<p>I posted a <a href="https://twitter.com/rem/status/499629513983406080">tweet</a> recently that confused some people. They might have thought I was trolling or being sarcastic!</p>
<blockquote>
<p>The <code>&lt;center&gt;</code> tag is awesome. Why have I been avoiding it all these years?</p>
</blockquote>
<p>Seriously. It is. But I feel like I may have to defend my opinion on this one!</p>
<h2>It&#39;s <em>easier</em></h2>
<p>I want to centre some text. My brain has a fork in it&#39;s process:</p>
<ol>
<li>I use <code>&lt;center&gt;</code></li>
<li>I don&#39;t use <code>&lt;center&gt;</code> and choose from an array of CSS based options</li>
</ol>
<p>Let&#39;s entertain option 2 for a moment. Here&#39;s my code:</p>
<pre><code>&lt;p&gt;The witch had a cat and a very tall hat,&lt;/p&gt;
&lt;p&gt;And long ginger hair which she wore in a plait.&lt;/p&gt;
&lt;p&gt;By: Julia Donaldson and Axel Sheffler&lt;/p&gt;</code></pre>
<p>I want the author credit to be centre aligned. This is the cost with option 2:</p>
<ol>
<li>Add a class to the last <code>p</code> tag</li>
<li><em>Think</em> of an appropriate name, perhaps &quot;credit&quot;</li>
<li>Create a new style sheet file</li>
<li>Add the <code>link</code> tag to the <code>head</code> of my document</li>
<li>Remember to add <code>rel=&quot;stylesheet&quot;</code> or it won&#39;t work</li>
<li>Add 3 lines of CSS</li>
</ol>
<p>As such:</p>
<pre><code>.credit {
  text-align: center;
}</code></pre>
<p>Not much work.</p>
<p>Now compared to using the <code>center</code> tag:</p>
<ol>
<li>Add <code>center</code> tag around content</li>
<li>No, there is no step two. Got you there for a second, right?</li>
</ol>
<h2>But...but...semantics!</h2>
<p>Okay. Semantics. Let&#39;s keep the deeper conversation aside for a minute, but what I&#39;ve seen argued is: the <code>center</code> element doesn&#39;t have any semantic value.</p>
<p>So instead you might use a <code>span</code> or a <code>div</code> instead (and yes, sure, if you were just centring a paragraph, you&#39;d use a <code>p</code> and CSS as above).</p>
<p>But now you&#39;re using an element without any semantic meaning, and then adding CSS (and probably classes) to centre align.</p>
<p>Instead, why not, use <code>center</code>, which has &quot;no semantic meaning&quot; and benefit from the default browser styling that you get for free. Just like you do for different heading levels. Or for <code>sup</code> or <code>small</code>?</p>
<h2>Yeah, but it&#39;s deprecated!</h2>
<p>Actually, according to the W3C validator, the element is <em>obsolete</em> - which sounds a little harsher.</p>
<p>But then, so what? The beauty of HTML is that it works, as busted as you can make it, browsers will make it work.</p>
<p>Old pages written with <code>font</code> tags and <code>big</code> still work, and there&#39;s a <a href="http://www.w3.org/TR/CSS2/sample.html">well defined spec</a> for browser vendors that support HTML4 as to how HTML4 elements should be styled. HTML4 moved to recommendation in 1999, and HTML5 has still not reached recommendation phase (at time of writing it&#39;s Candidate Recommendation as of 31 July 2014).</p>
<p>My point being: browsers will support the HTML4 elements for a long...long time. I&#39;d be prepared to bet that HTML4, and <code>center</code> styling will be supported beyond the lifetime of this blog (and any other of my sites).</p>
<p>So it&#39;s deprecated. But it works. And that&#39;s basically the web summed up: <strong>but it works.</strong></p>
<h2>More center?</h2>
<p>Yep, I&#39;ve convinced myself, I&#39;ll be using <code>center</code> just a little more often (than previously not at all). Maybe you&#39;ll reconsider pulling it back in to your toolbox!</p>
]]></content:encoded></item><item><title>Time doesnâ€™t heal</title><guid isPermaLink="false">time-doesnt-heal</guid><link>http://remysharp.com/2014/08/11/time-doesnt-heal</link><pubDate>Mon, 11 Aug 2014 13:00:06 +0000</pubDate><description><![CDATA[My wife and I lost our daughter at full term in the last throes of labour to stillbirth. It was the darkest time of my life.
Over the coming months we&#39;d hear the phrase &quot;time heals&quot;. It doesn&#39;t.
How would it? We lost our daughter. She&#39;ll be 4 this year. I still miss her. My heart still yearns for her. I still cry for her.
Time won&#39;t ever heal this hole in our lives. It shouldn&#39;t either. 
Time can heal cuts and pains, so those cuts go away and you don&#39;t think of them again. But the loss of our daughter? Time will remind us over and over again that she&#39;s not here. Her first Christmas, first birthday, the birth of our son, our family coming together for a group photo, when she was supposed to join school. Over and over and over.
Time gave us room to grow stronger. And not quickly, in that &quot;you&#39;re so strong&quot; way. But slowly. Over many many months and many years.
As time goes on, I started to accept this hole in my life as part of my life. 
Time didn&#39;t heal me, but I was able to begin to bear the weight of her loss. Just like going to the gym and lifting weights, I&#39;d gained the strength, but it&#39;s taken a long, long time. And I&#39;m not healed. I never will be. I&#39;m just able to carry more.
You just get stronger. You have to.
It doesn&#39;t mean it doesn&#39;t hurt anymore. It does. I&#39;m just able to carry that pain and make it mine and part of me, because I&#39;ve learnt how to.
Time doesn&#39;t heal. It just looks that way from the outside in.
Reposted from The Pastry Box Project]]></description><content:encoded><![CDATA[
<p>My wife and I lost our daughter at full term in the last throes of labour to stillbirth. It was the darkest time of my life.</p>
<p>Over the coming months we&#39;d hear the phrase &quot;time heals&quot;. <strong>It doesn&#39;t</strong>.</p>
<p>How would it? We lost our daughter. She&#39;ll be 4 this year. I still miss her. My heart still yearns for her. I still cry for her.</p>
<p>Time won&#39;t ever heal this hole in our lives. It shouldn&#39;t either. </p>
<p>Time can heal cuts and pains, so those cuts go away and you don&#39;t think of them again. But the loss of our daughter? Time will remind us over and over again that she&#39;s not here. Her first Christmas, first birthday, the birth of our son, our family coming together for a group photo, when she was supposed to join school. Over and over and over.</p>
<p>Time gave us room to grow <em>stronger</em>. And not quickly, in that &quot;you&#39;re so strong&quot; way. But slowly. Over many many months and many years.</p>
<p>As time goes on, I started to accept this hole in my life as <em>part of my life</em>. </p>
<p>Time didn&#39;t heal me, but I was able to <em>begin</em> to bear the weight of her loss. Just like going to the gym and lifting weights, I&#39;d gained the strength, but it&#39;s taken a long, long time. And I&#39;m not healed. I never will be. I&#39;m just able to carry more.</p>
<p>You just get stronger. You have to.</p>
<p>It doesn&#39;t mean it doesn&#39;t hurt anymore. It does. I&#39;m just able to carry that pain and make it mine and part of me, because I&#39;ve learnt how to.</p>
<p>Time doesn&#39;t heal. It just looks that way from the outside in.</p>
<p><small>Reposted from <a href="https://the-pastry-box-project.net/remy-sharp/2014-july-3">The Pastry Box Project</a></small></p>
]]></content:encoded></item><item><title>Automatic permalinks for blog posts</title><guid isPermaLink="false">automatic-permalinks-for-blog-posts</guid><link>http://remysharp.com/2014/08/08/automatic-permalinks-for-blog-posts</link><pubDate>Fri, 08 Aug 2014 14:00:38 +0000</pubDate><description><![CDATA[There&#39;s been so many times that I&#39;ve wished I could quickly link to a specific
headline in an article, but there&#39;s no id attributes on the tag...so I can&#39;t.
But then there&#39;s nothing I can do to fix it, because it actually requires the
blog author to overhaul their site to add ids to all the heading tags which
may not be a quick job.
So, my dear blog author, here&#39;s my work around until you do serve ids in
your headings.]]></description><content:encoded><![CDATA[
<p>There&#39;s been so many times that I&#39;ve wished I could quickly link to a specific
headline in an article, but there&#39;s no <code>id</code> attributes on the tag...so I can&#39;t.</p>
<p>But then there&#39;s nothing I can do to fix it, because it actually requires the
blog author to overhaul their site to add <code>id</code>s to all the heading tags which
may not be a quick job.</p>
<p>So, my dear blog author, here&#39;s my work around until you <em>do</em> serve <code>id</code>s in
your headings.</p>
<h2>JavaScript to generated permalinks</h2>
<p>We&#39;re going to add a single JavaScript file that will crawl through all our
heading elements, and convert the text of the heading into an <code>id</code>.</p>
<p>Then, if there&#39;s a hash fragment in the URL, the window will jump down to the
named element. Thus &quot;faking&quot; permalink support.</p>
<h2>The id</h2>
<p>The <code>id</code> attribute is only applied if there&#39;s no <code>id</code> on the heading element
and is simply a regular expression that strips away anything that isn&#39;t an
alphanumeric and converts it to lowercase.</p>
<p>So a heading that reads: &quot;What does a Pro account get you?&quot; is converted to
<code>whatdoesaproaccountgetyou</code>. <a href="http://jsbin.com/help/pro#whatdoesaproaccountgetyou">Pretty simple</a>.</p>
<h2>Exposing the link</h2>
<p>Inspired by Github&#39;s readme permalinks, when you hover near the left of the
title then you&#39;ll see a Â¶ character that is clickable and gives the reader the
permalink.</p>
<p>This style is injected via the JavaScript, and it&#39;s quite possible you&#39;ll need
to tweak it a little to get it style correctly on your own site (but it&#39;s pretty
small).</p>
<h2>Usage</h2>
<p>Simple. <a href="https://github.com/remy/permalink">Download the script</a>. Then just slap
the script in the footer of your site (or after all your heading tags) and it&#39;ll
upgrade your headings for your visitors:</p>
<pre><code>&lt;script src=&quot;js/permalink.js&quot;&gt;&lt;/script&gt;</code></pre>
<p>Now I can share headline specific links to <em>your</em> site whilst all you needed to
do was add one line. Thank you!</p>
]]></content:encoded></item><item><title>The 'what time did my son wake up?' project</title><guid isPermaLink="false">arduino-wake-up-time</guid><link>http://remysharp.com/2014/08/05/arduino-wake-up-time</link><pubDate>Tue, 05 Aug 2014 10:53:19 +0000</pubDate><description><![CDATA[My 2 1/2 year old son wakes up before us during the spring and summer. He turns his light on fully, and plays until he&#39;s bored, then calls for us to join us in bed in the morning.
The problem was: exactly when was he waking, because it would affect how tired he was in the day (and affect nap times). So I built a tiny Arduino prototype :-)]]></description><content:encoded><![CDATA[
<p>My 2 1/2 year old son wakes up before us during the spring and summer. He turns his light on fully, and plays until he&#39;s bored, then calls for us to join us in bed in the morning.</p>
<p>The problem was: exactly <em>when</em> was he waking, because it would affect how tired he was in the day (and affect nap times). So I built a tiny Arduino prototype :-) </p>
<h2>The grand plan</h2>
<p>The grand plan was to use a TinyAT85 chip (because I like micro projects), with 4 digit 7 segment LED, a photoresistor, a push button (to reset) and a real time clock (RTC module). </p>
<p>This would be in some sort of housing, and I&#39;d use Sugru with their magnets to stick to his lamp. </p>
<p>The idea being that the unit would attach magnetically to his lamp and be in a sleep state (though actually there&#39;s smarter approaches I could use to <em>actually</em> be in a sleep state). </p>
<p>When the light is switched on, the photoresistor picks up a value higher than 950, and the time is displayed and fixed on the LED display. You then hit the reset button to go back to sleep state.</p>
<h2>The reality</h2>
<p>7 segment LED displays, wired up regularly take up a <em>lot</em> of pins, even more so when there&#39;s four! This combined with the fact that TinyAT85 s only have 5 available pins for data, meant I&#39;d need to use one of the adafruit LED backpacks (which I didn&#39;t have to hand), and then I didn&#39;t know if I could use an SPI pin with the SDA and SCL pins required to run the RTC module - so I decided to stick to the prototype for now.</p>
<h2>The prototype</h2>
<p>I had a LCD module handy, which I&#39;d use instead of the LED display. I also always prototype using an Arduino Uno, so it&#39;s simpler (and a lot bigger).</p>
<p>From there it was very simple. A lot of copy and paste from the adafruit website and then just writing the logic into my code:</p>
<ul>
<li>If the light sensor value goes above 850, then the light is on.</li>
<li>Grab the time from the RTC module</li>
<li>Display the time on the LCD</li>
<li>If the push button is â€˜LOWâ€˜ then reset and clear the display</li>
<li>As an additional bonus, if the light value drops below 300, it means the light is off, and reset (which saves pressing reset at night)</li>
</ul>
<p>Here&#39;s the code: <a href="https://gist.github.com/remy/11264660#file-light-time-pde">light-time.pde</a></p>
<p>And the prototype wired up:</p>
<p><img src="https://farm6.staticflickr.com/5333/13975246696_3d7bcc89e6_o.jpg" alt=" https://farm6.staticflickr.com/5333/13975246696_3d7bcc89e6_o.jpg"></p>
<h2>The grand conclusion</h2>
<p>After carefully wiring everything up, placing the arduino in my son&#39;s room and covering the lights so it wouldn&#39;t keep him up, I headed to bed keep to discover the time he was actually rising.</p>
<p>The morning came, he woke me and my wife up early (as expected), and I trotted into his room to discover...the battery had died.</p>
<p>Yep. Polling all the time is going to burn the battery out, and indeed what I need is an interrupt (based on the light levels ideally). So that&#39;s the plan for version 2...when I get around to it. For now, filling up failed projects!</p>
]]></content:encoded></item><item><title>Call for proposals at Full Frontal 2014</title><guid isPermaLink="false">call-for-proposals-at-full-frontal-2014</guid><link>http://remysharp.com/2014/06/17/call-for-proposals-at-full-frontal-2014</link><pubDate>Tue, 17 Jun 2014 12:51:12 +0000</pubDate><description><![CDATA[Full Frontal has it&#39;s ticket release date(s!) and as usual, I&#39;m already carefully curating the content I want to hear at Full Frontal, but I always make sure I allot a few positions for CFP - because let&#39;s face it: I don&#39;t know, what I don&#39;t know.]]></description><content:encoded><![CDATA[
<p><a href="http://2014.full-frontal.org">Full Frontal</a> has it&#39;s ticket release date(s!) and as usual, I&#39;m already carefully curating the content I want to hear at Full Frontal, but I always make sure I allot a few positions for CFP - because let&#39;s face it: I don&#39;t know, what I don&#39;t know.</p>
<p>So, if you think you&#39;ve got something to share, then get in touch. I&#39;ve included a few guidelines as to what I prefer from a proposal, and given you an idea of the kinds of topics I&#39;m interested in hearing about this year.</p>
<h2>Proposal topic advice</h2>
<p>I&#39;ve also included what you can expect as a speaker at our event too.</p>
<p>Topics that interest me:</p>
<ul>
<li>Web technology used outside of browsers</li>
<li>What we can learn in web development from other technology/disciplines</li>
<li>Debugging in new and unexpected ways</li>
<li>The future of the web/the future and how the web will be part of that</li>
<li>SysOP problems for JavaScript/node devs</li>
<li>Performance and squeezing insanity through the pipeline</li>
<li>Large scale application design problems that specifically applies to small scale</li>
<li>&quot;You&#39;re doing it wrong&quot;</li>
</ul>
<p>If you want to get an idea of the audience or who you proposal is for, the answer is simple: me. I curate for content that <em>I want to hear and see</em>. So if you (roughly) know my work, then you know the audience.</p>
<p>Topics that don&#39;t work, unless they&#39;re genuinely going to change the World, then CFPs like these generally fall to the bottom of the pile (sorry!):</p>
<ul>
<li>Library specific talks</li>
<li>Your company&#39;s new product</li>
<li>Talks that are very similar to previous Full Frontal talks</li>
</ul>
<p>Send me the title of your talk, an outline of the talk and any extra information you want me to know about the idea: <a href="mailto:events@leftlogic.com?subject=FF2014%20speaking%20propsal">events@leftlogic.com</a></p>
<p>If your proposal (is genuine and) comes in <strong>before 14 July 5pm UK time</strong> then we&#39;ll give early access to buy a ticket before the second wave of tickets are released. Regardless, if your proposal is selected, we&#39;ll refund your conference ticket if you bought one.</p>
<h2>Our promise to you</h2>
<p>All our speakers are treated the same. We will:</p>
<ul>
<li>Pay for your travel. If you&#39;re flying long haul, we&#39;ll upgrade you to premium class (or whatever the name is for &quot;above economy&quot;)</li>
<li>Put you up in our &quot;speaker hotel&quot;. It&#39;s not that sexy, but it&#39;s right in town and two minutes walk from our venue. We&#39;re also open to offering the hotel stay. If you want an extra day or two here and there, then that&#39;s cool too (obviously if everyone does this, it breaks our bank, but so far it&#39;s worked)</li>
<li>Arrange your travel and help you with anything you need ahead of the event</li>
<li>We can, if you need or want it, provide you with a mifi preloaded with data</li>
<li>All your food and drinks provided for you during the day before and the day of the conference (don&#39;t expect to buy a drink at the after party)</li>
<li>40 minute talk, generally we don&#39;t do Q&amp;A and it&#39;s best to err on the side of &quot;there is no wifi&quot;</li>
<li>Â£500 honourium - I know it&#39;s not much, but it&#39;s a bit of spending money to say thanks</li>
<li>A free pass to the following year of Full Frontal, and for evermore part of our growing and much loved speaker alumni</li>
</ul>
<p>So I hope to hear from you soon!</p>
]]></content:encoded></item><item><title>CommonJS modules with live edit in devtools</title><guid isPermaLink="false">commonjs-with-devtools-live-edit</guid><link>http://remysharp.com/2014/05/30/commonjs-with-devtools-live-edit</link><pubDate>Fri, 30 May 2014 12:07:56 +0000</pubDate><description><![CDATA[As you might know, I&#39;m a big fan of Chrome devtools&#39; live edit and workspaces (video playlist), and it&#39;s this workflow that&#39;s kept me away from Browserify. 
So I went about creating an experiment that allowed me to use CommonJS modules in development and that allowed me to edit and save directly in devtools without a build step.]]></description><content:encoded><![CDATA[
<p>As you might know, I&#39;m a big fan of <a href="http://www.youtube.com/playlist?list=PLXmT1r4krsTq7w7hDV6zfirrs4NJlzJX5">Chrome devtools&#39; live edit and workspaces</a> (video playlist), and it&#39;s this workflow that&#39;s kept me away from <a href="http://browserify.org">Browserify</a>. </p>
<p>So I went about creating an experiment that allowed me to use CommonJS modules in development <em>and</em> that allowed me to edit and save directly in devtools <em>without</em> a build step.</p>
<h2>Some context</h2>
<p>As far as I know, Browserify is the bees knees for using CommonJS modules in the client side. However, it&#39;s also got a build step. I know it supports sourcemaps, but I&#39;ve personally had mixed (about 20%) success with sourcemaps, and particularly when it comes to saving directly in devtools.</p>
<p>I&#39;m happy with a build step for production, but not in dev. I want to know the files I&#39;m working with are being saved to disk without any extra steps.</p>
<p>It&#39;s entirely possible I&#39;ve reinvented the wheel here (feel free to point me in the right direction!).</p>
<p>So...I had a go at re-inventing the <code>require</code> method...</p>
<h2>Demo</h2>
<p>For your viewing pleasure, here&#39;s the experiment using my dev require.js. It supports CommonJS modules. I&#39;ve only tested a few levels deep, and it&#39;s <em>only</em> for client side code.</p>
<p>The main requirements were to ensure:</p>
<ol>
<li>Line numbers in the console mapped correctly to the line in the file</li>
<li>Saving the file would commit the save to disk</li>
<li>Saving the file would update memory</li>
</ol>
<p>These <em>kinda</em> work as you&#39;ll see in the video.</p>
<iframe width="1280" height="720" src="//www.youtube.com/embed/uHxxcnJi4BE?rel=0" frameborder="0" allowfullscreen></iframe>

<h2>How it works</h2>
<p>Pretty simple (and stupid) really, require.js is just this:</p>
<pre><code>function require(path) {
  var xhr = new XMLHttpRequest();

  if (path[0] === &#39;.&#39;) {
    path = path.substr(2);
  }

  path += &#39;.js&#39;;

  var module = {
    exports: {}
  };

  xhr.open(&#39;GET&#39;, path, false); // sync
  xhr.send();

  var code = xhr.responseText;

  if (code.indexOf(&#39;//# sourceURL&#39;) === -1) {
    code += &#39;\n\n//# sourceURL=&#39; + path;
  }

  eval(code);

  return module.exports;
}</code></pre>
<p>The code boils down to:</p>
<ol>
<li>Make an <em>synchronous</em> XHR call to the script</li>
<li>Insert a <code>sourceURL</code> in the code so devtools knows what file it was</li>
<li>Create a <code>module</code> object in scope</li>
<li>Then eval and return the updated <code>module.exports</code></li>
</ol>
<p>Pretty filthy really. Also obviously missing the require path resolution.</p>
<p>I&#39;ve created a little repo with the <a href="https://github.com/remy/require-for-dev">code I used in the demo on github</a> too.</p>
<h2>Known and potential issues</h2>
<ul>
<li>Using the <code>setInterval</code> you may have noticed in foo.js, when changing the code, devtools loses access to the <code>app</code> variable. Unsure why.</li>
<li>Using Workspaces is a no-no, it seems to get really confused and <em>very</em> sticky about what&#39;s in memory (i.e. the file shown in sources does not match what&#39;s being run)</li>
<li>The full require resolution isn&#39;t implemented at all (so only relative URLs are loaded)</li>
<li>Saving the file in devtools will insert the <code>sourceURL</code> in the file permanently</li>
<li>I&#39;m not 100% of the security of the modules - in fact I&#39;m pretty sure (since they&#39;re not running inside a new document context) that there would be namespace collision (which is kind of the point of CommonJS to avoid!!!)</li>
<li>Probably a lot more potential issues - like I said, this is an <em>experiment</em>!</li>
</ul>
<h2>Does it really work?</h2>
<p>I&#39;m not sure. It&#39;s not perfect, and I&#39;m not 100% sure it&#39;s 100% usable...so I&#39;m classing this as a failed experiment.</p>
<p>I thought about seeing if I could make an iframe on the fly, and inject the content, but the iframe would have to be appended to the document to execute the code, and the code is only executed on the &quot;next tick&quot;, i.e. <em>after</em> the <code>return module.exports</code> so the module would be loaded, but the code would not. Poop.</p>
<p>On the upside, I figured it was worth sharing, because some bright mind might just solve the memory linking issues that I&#39;m seeing or create some clever work around.</p>
]]></content:encoded></item><item><title>Where is that console.log?</title><guid isPermaLink="false">where-is-that-console-log</guid><link>http://remysharp.com/2014/05/23/where-is-that-console-log</link><pubDate>Fri, 23 May 2014 12:16:21 +0000</pubDate><description><![CDATA[Did you ever have phantom console.log - or more specifically you&#39;ve no idea 
where it was happening?
I have. This tiny bit of code will help you identify where the logging is 
being called from. The nice thing is it works in the browser and in node.]]></description><content:encoded><![CDATA[
<p>Did you ever have phantom <code>console.log</code> - or more specifically you&#39;ve no idea 
where it was happening?</p>
<p>I have. This tiny bit of code will help you identify <em>where</em> the logging is 
being called from. The nice thing is it works in the browser <em>and</em> in node.</p>
<p><small>Honourable mention: <a href="https://medium.com/@garychambers108/b3cc6fd0dafd">@garychambers108&#39;s</a> node.js better logging - I&#39;ve been wanting to do something about my rogue consoles and Gary&#39;s article kicked me in to action.</small></p>
<h2>Upgrading log to show <em>where</em> logging is happening</h2>
<pre><code>[&#39;log&#39;, &#39;warn&#39;].forEach(function(method) {
  var old = console[method];
  console[method] = function() {
    var stack = (new Error()).stack.split(/\n/);
    // Chrome includes a single &quot;Error&quot; line, FF doesn&#39;t.
    if (stack[0].indexOf(&#39;Error&#39;) === 0) {
      stack = stack.slice(1);
    }
    var args = [].slice.apply(arguments).concat([stack[1].trim()]);
    return old.apply(console, args);
  };
});</code></pre>
<p>If you include this as high as possible in your code base, all subsequent <code>console.log</code> (or <code>warn</code>) calls will include the line the call was made from:</p>
<p><img src="http://remysharp.com/images/where-logging.png" style="border: 1px solid #ccc; display: block; margin: 0 auto; max-width: 100%"></p>
<p>Here&#39;s a simplified demo: <a href="http://jsbin.com/wataw/2/edit?js,console"><a href="http://jsbin.com/wataw/2/edit?js,console">http://jsbin.com/wataw/2/edit?js,console</a></a></p>
<p>All the code is doing is rewriting the <code>log</code> and <code>warn</code> methods and appending the location of the call at the end of the log. Note that I&#39;m not overloading the <code>error</code> method because it comes with it&#39;s own stacktrace.</p>
<p>The location of the call is deduced using <code>new Error</code>, then looking at the <code>stack</code> property (disclaimer: this won&#39;t work in <em>all</em> browsers - I&#39;ve only tested in Firefox, Chrome and Node).</p>
<p>Simple. Now I can hunt down those rogue logs and remove them from the codebase.</p>
]]></content:encoded></item><item><title>On Chrome hiding URLs to protect users from phishing</title><guid isPermaLink="false">on-chrome-hiding-urls-to-protect-users-from-phishing</guid><link>http://remysharp.com/2014/05/04/on-chrome-hiding-urls-to-protect-users-from-phishing</link><pubDate>Sun, 04 May 2014 19:10:46 +0000</pubDate><description><![CDATA[Jake and Jeremy have posted about how chrome is experimenting with a way to protect users from phishing. Jake is pro the approach, Jeremy against. Read their posts: Jake&#39;s and Jeremy&#39;s.]]></description><content:encoded><![CDATA[
<p>Jake and Jeremy have posted about how chrome is experimenting with a way to protect users from phishing. Jake is pro the approach, Jeremy against. Read their posts: <a href="http://jakearchibald.com/2014/improving-the-url-bar/">Jake&#39;s</a> and <a href="http://adactio.com/journal/6779/">Jeremy&#39;s</a>.</p>
<p><em>Please note, this post is unedited â€“ and written on a tablet!</em></p>
<p>What I&#39;m posting is a proposal for an alternative approach (that I couldn&#39;t fit, and didn&#39;t want to fit into 140 characters!).</p>
<p>Instead of hiding the URL entirely, take the lead from what exist now (the path is semi-opaque), <strong>but in addition the subdomain is truncated</strong> and dimmed the same way long paths are. </p>
<p>The point is to get the <em>actual domain</em> across to the visitor, so how about this for a solution:</p>
<p><img src="http://remysharp.com/images/jake-evil-better.png" alt="http://remysharp.com/images/jake-evil-better.png"></p>
<p>Note that the URL is shown in the browser tab (because in this example, there&#39;s no <code>title</code> element), this should also be used to highlight the actual domain, and not default to showing the full URL.</p>
<p>When compared to the current situation:</p>
<p><img src="http://remysharp.com/images/jake-evil.png" alt="http://remysharp.com/images/jake-evil.png"></p>
<p>The change (which I&#39;d expect across all Chrome browsers, i.e. mobile too) is:</p>
<ul>
<li>Semi-opaque pathname</li>
<li>Semi-opaque subdomains (cname)</li>
<li>Truncate long paths to ellipsis</li>
<li><strong>Truncate any preceding subdomains with ellipsis (with sensible defaults, like it would show <code>www</code> or perhaps the final subdomain fragment)</strong></li>
<li>When the <code>title</code> element is missing, match the text displayed in the tab title to the truncated URL shown in the URL bar.</li>
</ul>
<p>I&#39;ll note that most browsers already highlight the domain part of the URL, but the point I&#39;m trying to make with my proposed mockup, is that everything before the domain (the jakearchibald.com part), <strong>should be truncated <em>as well as</em> dimmed</strong>.</p>
<p>Perhaps this is a strong enough move to make clear to visitors exactly what URL they&#39;re on, whilst still communicating that they&#39;re visiting a specific URL and not just the root of the domain.</p>
]]></content:encoded></item><item><title>Feature based development</title><guid isPermaLink="false">feature-based-development</guid><link>http://remysharp.com/2014/03/17/feature-based-development</link><pubDate>Mon, 17 Mar 2014 17:14:35 +0000</pubDate><description><![CDATA[Recently we changed the way we were working on JS Bin. Instead of pushing new
features whenever it took my fancy - which could result in success or equally
some kind of breakage - we&#39;re now pushing new features under feature flags and
it&#39;s proving to be really quite powerful (and fun).]]></description><content:encoded><![CDATA[
<p>Recently we changed the way we were working on JS Bin. Instead of pushing new
features whenever it took my fancy - which could result in success or equally
some kind of breakage - we&#39;re now pushing new features under feature flags and
it&#39;s proving to be really quite powerful (and fun).</p>
<h2>feature-gateway</h2>
<p>The module is up on npm and can be installed via <code>npm install feature-gateway</code>. It&#39;s not specifically for Node (in that it&#39;ll work on the client side too), but if you put your feature test in the client, it&#39;s obviously easy for a visitor to hack.</p>
<p>It&#39;s got tests and it up on github under <a href="https://github.com/remy/feature-gateway">remy/feature-gateway</a> for anyone to learn from or use.</p>
<h2>Simple example</h2>
<p>The library I&#39;ve written is extremely simple (and purposely so). It&#39;s used in regular <code>if</code> conditionals, as part of Express routing and inside our Handlebar templates.</p>
<p>If we have a feature called &quot;ssl-login&quot; that we&#39;re testing, the router might look like this:</p>
<pre><code>app.get(&#39;/login&#39;, features.route(&#39;ssl-login&#39;), renderSecureLogin);
app.get(&#39;/login&#39;, showLogin); // the old way</code></pre>
<p>And an example in a Handlebars template to access the &quot;sandbox&quot; feature:</p>
<pre><code class="language-handlebars">{{#feature request &quot;sandbox&quot;}}
  &lt;button&gt;Launch sandbox&lt;/button&gt;
{{else}}
  &lt;a href=&quot;/...&quot;&gt;Find out about upcoming Sandbox feature&lt;/a&gt;
{{/feature}}</code></pre>
<p>Aside: I&#39;m not 100% happy with the template requiring the <code>request</code> object being passed, but it&#39;s neccessary right now (unless someone can answer my <a href="http://stackoverflow.com/questions/21972729/is-it-possible-to-bind-a-handlebars-helper-before-render-using-express-hbs">SO question</a>) - though I&#39;ve been told that Handlebars 2 might allow a way to bind the helper to objects.</p>
<p>There&#39;s more examples of actual usage in the <a href="https://github.com/remy/feature-gateway/blob/master/README.md">README</a> for the feature-gateway project.</p>
<h2>How the feature flag works</h2>
<p>The feature flag is a gateway to a part of functionality, that tests some particular value, and if true, the user has access to the feature.</p>
<p>The way JS Bin works is that all our feature tests accept the (http) request object. From here, since in our case, the user&#39;s session is also attached to the request object we can use a wide range of tests:</p>
<ul>
<li>Does the logged in user have a &quot;pro&quot; flag on their account?</li>
<li>Does the request include a specific cookie value?</li>
<li>Does the request come from a specific IP address or range?</li>
<li>Is the logged in user part of an alpha test group?</li>
</ul>
<h2>Two methods of implementation</h2>
<p>So far we&#39;ve used them for two specific uses. The first is simple: new features are wrapped in the feature test. For example: adding the ability to create private bins is <em>new</em> functionality.</p>
<p>The second is quite a bit more complicated: existing functionality is running side-by-side with functionality that&#39;s only accessible via a feature flag. For example <em>changing</em> the way the login &amp; register works requires that the old way still works, whilst the new way can be accessed via the feature flag. I&#39;ll be honest, this can get tricky.</p>
<h2>Continued development</h2>
<p>Feature flags seem to be working really well for us on JS Bin, and I&#39;d definitely recommend using them in some way if you can. The obvious next step is tying in some kind of analytics, then A/B testing and then I&#39;m sure more ideas will follow.</p>
]]></content:encoded></item><item><title>You're paying to speak</title><guid isPermaLink="false">youre-paying-to-speak</guid><link>http://remysharp.com/2014/03/07/youre-paying-to-speak</link><pubDate>Fri, 07 Mar 2014 16:19:02 +0000</pubDate><description><![CDATA[There are many, many new speakers coming to the web community with their stories and standing up on stage and sharing. I applaud them. It&#39;s a scary thing to stand on stage and share your ideas. And there are many, many hours of work that goes in to the presentations.
I&#39;m talking to people like me who speak for the love of sharing knowledge.
TL;DR If an event is not covering your expenses (travel &amp; hotel) then you are paying to speak at their event.]]></description><content:encoded><![CDATA[
<p>There are many, many new speakers coming to the web community with their stories and standing up on stage and sharing. I applaud them. It&#39;s a scary thing to stand on stage and share your ideas. And there are many, many hours of work that goes in to the presentations.</p>
<p>I&#39;m talking to people like me who speak for the love of sharing knowledge.</p>
<p><strong>TL;DR</strong> If an event is not covering your expenses (travel &amp; hotel) then <strong>you are paying to speak at their event</strong>.</p>
<h2>What it costs you</h2>
<ol>
<li>Your time working on slides when you could be working on project work</li>
<li>Your flight or train or taxi costs</li>
<li>Your hotel cost</li>
<li>Your time on the day at the event</li>
</ol>
<p>Yes, you might generate work during some awesome-high-fiving-network session. Really? Okay. Yes, you have a &quot;free ticket&quot;, but most new speakers I know have their head in their presentation until it&#39;s over.</p>
<p>So you&#39;re out of pocket. And for what?</p>
<h2>What costs them</h2>
<p>Well, nothing. In fact you&#39;re providing content. And you&#39;re doing more than that. You&#39;re filling up the speaker roster with fresh and new content that&#39;s likely never been seen before. You&#39;re also auditioning for them, if you&#39;re good, they&#39;ll want you back, and their audience will have seen that you&#39;re good and buy more tickets to their event.</p>
<p>I know Flash on the Beach/Reason used this last &quot;audition&quot; technique, but in a positive way (to be very, very clear: Reasons is good, they do it right). They called it the Lift Pitch. 5 minutes (or 2 minutes this year) to get your idea across. Audience votes on the best one, and that potential speakers is invited back the next year to speak, and they&#39;re paid like every other speaker.</p>
<p>Then there&#39;s the video that they&#39;ll release, which is more content for them, branded and perpetuating their brand. That <em>you</em> gave them, at your own expense.</p>
<h2>A free ticket?</h2>
<p>It seems only the big events that do this kind of thing. And with big events, come big venues.</p>
<p>By comparison, Full Frontal has 278 seats. No more, no less. So free tickets aren&#39;t something I give away willingly (one of my policies is that all previous years speakers are given a free ticket to the following year). So it <em>costs</em> me, the organiser, to give away a free ticket.</p>
<p>Now compare to Future Of, they have anything from 800 person capacity (based on it being in The Brewery again). If they sell out in minutes (or even days) then a free ticket has a high value. But they don&#39;t. A free ticket is worth near to nothing (<a href="#comment-607594">please also take a minute to read Lou&#39;s replyâ€”the conference producer for Future Insights</a>).</p>
<h2>Wouldn&#39;t they be out of pocket with so many speakers?</h2>
<p>That&#39;s what a budget is for - which comes from ticket sales and sponsorship agreements. <strong>It is part of their budget because without a speaker, they have no content to sell</strong>. The answer is no, they would not be out of pocket.</p>
<h2>What do I want?</h2>
<p>Dear event: treat your content providers with dignity. At the absolute least, pay their expenses. Indeed, <a href="http://www.andybudd.com/archives/2013/08/paying_speakers_is_better_for_everybody/">they should be paid too</a>.</p>
<h2>Which events are doing this?</h2>
<p>So here&#39;s where I want your help. I&#39;m happy to list these events, and if you know (for absolute sure) that there&#39;s an event making you pay to speak, then comment (anonymously if you want), post me a tweet or email me (remy at remysharp), and I&#39;ll add it to a list here.</p>
<p>If you&#39;re an organiser of one of these events or work for one of these companies, please get in touch if this is wrong or you&#39;ve fixed your mistake - I&#39;ll happily remove any event from this list.</p>
<ul>
<li>Future Insights and the Future of Web Design (et al) don&#39;t cover most of their rising stars&#39; costs</li>
<li>SxSWi don&#39;t cover the vast majority of speakers and panelists</li>
<li>Webconf Riga</li>
<li>Drupal conf</li>
<li>The anonymous event that <a href="https://gist.github.com/csswizardry/d1bd31e3ada9f5f5a6a6">approached Harry Roberts</a></li>
<li>FITC</li>
<li>Fluent</li>
</ul>
<p><strong>Important:</strong> there are always the odd exceptions to these, as you&#39;ll read the comments below, but it&#39;s the default policy that I believe should be changed and part of the budget for profit and non-profit.</p>
<p><strong>Please also read the comments</strong> below fully as they include details of how some events have changed their policies over the years (like Velocity) and tells of personal experiences.</p>
]]></content:encoded></item><item><title>Hack failing: cheat</title><guid isPermaLink="false">cheat</guid><link>http://remysharp.com/2014/01/27/cheat</link><pubDate>Mon, 27 Jan 2014 14:00:45 +0000</pubDate><description><![CDATA[It&#39;s January and it&#39;s likely you&#39;ve got a New Year&#39;s resolution burning away. Forming new habits takes 66 days. Whether it&#39;s a diet change, lifestyle change, starting a podcast, diary, blog, photo journal or some other goal. 66 days is a long time to do something that is different from your normal routine.
So the secret I&#39;ve discovered, if you couldn&#39;t guess, is to cheat. It&#39;s the secret to all success. And there&#39;s logic behind this, so stick with me.
Success is rather binary, so the moment that you fail to post your weekly podcast is the first big failure. You&#39;ve let your audience down. The second time you miss it, you&#39;re pretty much dead and you may well have already considered &quot;what&#39;s the point in continuing?&quot;. I&#39;ve certainly felt the same when I said I&#39;d stop drinking, or the previous times I&#39;ve &quot;started&quot; going to the gym.
There&#39;re two things to consider:

Make the goal extremely easy.
Plan to fail.

Making the goal easy allows you to build up later. If you aim to publish every two months instead of every month. Or even less, maybe once a quarter. Then if you&#39;re feeling ambitious you either record and bank a podcast for another date, or release a special episode.
The same with the gym. Aim low, and keep it simple. If once a week is a change to your life, start there, don&#39;t start with 5 times a week.
Planning to fail is incredibly easy and equally powerful. I&#39;ll do this in general conversation where, ahead of explaining something I&#39;m not confident of, I&#39;ll pre-emptively apologise for mistakes. I&#39;ve planned for failing to explain something.
If your goal is a new diet or to quit drinking or quit smoking (or quit anything), plan to fall off the wagon. Because when you don&#39;t plan to fail, when you fail, you&#39;ve failed, and that&#39;s it, you might as well not bother. But if you do plan to fail, when you fail, it&#39;s no big deal, it was part of the plan. It was your intention to fail. So you&#39;re still on track, and you&#39;re still making positive progress.
So cheat.
Don&#39;t make it hard to achieve, make it hard to give up.
Plan to fail. Plan to cheat.
Reposted from The Pastry Box Project]]></description><content:encoded><![CDATA[
<p>It&#39;s January and it&#39;s likely you&#39;ve got a New Year&#39;s resolution burning away. Forming new habits takes <a href="http://www.telegraph.co.uk/health/healthnews/5857845/It-takes-66-days-to-form-a-habit.html">66 days</a>. Whether it&#39;s a diet change, lifestyle change, starting a podcast, diary, blog, photo journal or some other goal. 66 days is a long time to do something that is different from your normal routine.</p>
<p>So the secret I&#39;ve discovered, if you couldn&#39;t guess, is to cheat. It&#39;s the secret to all success. And there&#39;s logic behind this, so stick with me.</p>
<p>Success is rather binary, so the moment that you fail to post your weekly podcast is the first big failure. You&#39;ve let your audience down. The second time you miss it, you&#39;re pretty much dead and you may well have already considered &quot;what&#39;s the point in continuing?&quot;. I&#39;ve certainly felt the same when I said I&#39;d stop drinking, or the previous times I&#39;ve &quot;started&quot; going to the gym.</p>
<p>There&#39;re two things to consider:</p>
<ol>
<li>Make the goal extremely easy.</li>
<li>Plan to fail.</li>
</ol>
<p>Making the goal easy allows you to build up later. If you aim to publish every two months instead of every month. Or even less, maybe once a quarter. Then if you&#39;re feeling ambitious you either record and bank a podcast for another date, or release a special episode.</p>
<p>The same with the gym. Aim low, and keep it simple. If once a week is a change to your life, start there, don&#39;t start with 5 times a week.</p>
<p>Planning to fail is incredibly easy and equally powerful. I&#39;ll do this in general conversation where, ahead of explaining something I&#39;m not confident of, I&#39;ll pre-emptively apologise for mistakes. I&#39;ve <em>planned for failing</em> to explain something.</p>
<p>If your goal is a new diet or to quit drinking or quit smoking (or quit anything), <em>plan to fall off the wagon</em>. Because when you don&#39;t plan to fail, when you fail, you&#39;ve failed, and that&#39;s it, you might as well not bother. But if you do plan to fail, when you fail, it&#39;s no big deal, it was part of the plan. It was your intention to fail. So you&#39;re still on track, and you&#39;re still making <em>positive</em> progress.</p>
<p><em>So cheat.</em></p>
<p>Don&#39;t make it hard to achieve, make it hard to give up.</p>
<p><strong>Plan to fail. Plan to cheat.</strong></p>
<p><small>Reposted from <a href="http://the-pastry-box-project.net/remy-sharp/2014-january-3">The Pastry Box Project</a></small></p>
]]></content:encoded></item></channel></rss>