<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/"><channel><title>remy sharp's b:log</title><atom:link href="http://remysharp.com/feed/" rel="self" type="application/rss+xml"></atom:link><link>http://remysharp.com</link><description>About [code] and all that jazz</description><lastBuildDate>Tue, 30 Sep 2014 9:00:00 +0000</lastBuildDate><language>en-US</language><sy:updatePeriod>hourly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><item><title>WordPress -&gt; Ghost -&gt; Harp (part 2)</title><guid isPermaLink="false">wordpress-ghost-harp-pt2</guid><link>http://remysharp.com/2014/09/30/wordpress-ghost-harp-pt2</link><pubDate>Tue, 30 Sep 2014 9:00:00 +0000</pubDate><description><![CDATA[I wrote about moving away from WordPress to Ghost and then to Harp in part 1, this post details some of the specifics of my blog&#39;s implementation.]]></description><content:encoded><![CDATA[
<p>I wrote about moving away from WordPress to Ghost and then to Harp in <a href="/2014/09/18/wordpress-ghost-harp-pt1">part 1</a>, this post details some of the specifics of my blog&#39;s implementation.</p>
<h2>Technical overview</h2>
<p>I&#39;m using <a href="http://harpjs.com">Harp</a> which is incredibly easy to get running with, but I&#39;m also running Harp as a dependency inside my own custom node web server which allows me to add a few bells a whistles to my implementation.</p>
<ul>
<li><a href="#custom-url-rewriting">Custom URL rewriting</a></li>
<li><a href="#static-caching">Static caching</a></li>
<li><a href="#use-of-special-helpers-inside-harp">Use of special helpers inside Harp, such as moment.js</a></li>
<li><a href="#list-of-recently-modified-posts">List of recently modified posts</a></li>
<li><a href="#archive--tag-pages-without-the-repetition-of-files">Archive &amp; tag pages without the repetition of files</a></li>
<li><a href="#makefile-based-release-process">Makefile based release process</a></li>
</ul>
<h2>Custom URL rewriting</h2>
<p>Since I was porting an existing blog, I wanted to ensure that the URLs didn&#39;t change. This meant supported my old <code>/year/month/day/title</code> format. Which over the years I dislike, but when I moved to Harp, I decided to drop the date from the body of my posts and allow the URL to speak for that metadata.</p>
<p>I <em>also</em> wanted to host my old downloads and demos on Amazon S3, but the URLs from old posts would be relative to my blog, so I needed to rewrite these.</p>
<p>I forked <a href="https://www.npmjs.org/package/router">router@npm</a> to create <a href="https://www.npmjs.org/package/router-stupid">router-stupid@npm</a> - which is essentially the same, slightly cut down, but importantly: if you modify the <code>req.url</code> in a route handler, that would affect the subsequent matched routes.</p>
<p>Redirecting is simple:</p>
<pre><code class="language-js">/* redirect to s3 hosted urls */
route.all(&#39;/demo/{filename}&#39;, function (req, res, next) {
  res.writeHead(302, { &#39;location&#39;: &#39;http://download.remysharp.com/&#39; + req.params.filename });
  res.end();
});</code></pre>
<p>Supporting my date base URL format was trickier. The actual file lives in <code>/blog/&lt;title&gt;</code> so when the URL hits my static server, it needs to be in that form. So supporting date base URL requires:</p>
<ol>
<li>The URL format is correct</li>
<li>The title of the post actually finds a post</li>
<li>The date in the URL matches the date for the post</li>
</ol>
<pre><code class="language-js">/* main url handler: /{year}/{month}/{day}/{post} */
route.all(/^\/([0-9]{4})\/([0-9]{1,2})\/([0-9]{1,2})\/([a-z0-9\-].*?)(\/)?$/, function (req, res, next) {
  var params = req.params;

  // the title slug of the url
  var post = blogs[params[4]];

  // make sure we have a real post before even proceeding
  if (post &amp;&amp; post.date) {
    // test if the date matches

    // post.date is a timestamp, so splitting gets us the date
    var date = moment(post.date.split(&#39; &#39;)[0]);

    var requestDate = params.slice(1, 4).join(&#39;-&#39;);

    // compare the date of post _in the same format_ as requestDate
    if (date.format(&#39;YYYY-MM-DD&#39;) !== requestDate) {
      // if it&#39;s not good, move on - will likely result in a 404
      return next();
    }

    // if there&#39;s a trailing slash, remove it and redirect
    if (params[5] === &#39;/&#39;) {
      res.writeHead(302, { &#39;location&#39;: req.url.replace(/(.)\/$/, &#39;$1&#39;)});
      res.end();
      return;
    }

    // this now allows Harp to pick up the correct post
    req.url = &#39;/blog/&#39; + params[4];
  }

  // then let the rest of the router do it&#39;s work
  next();
});</code></pre>
<h2>Static caching</h2>
<p>Having used Harp in previous projects (<a href="https://github.com/jsbin/learn">JS Bin&#39;s documentation</a>, <a href="https://github.com/leftlogic/fullfrontalconf2014/">our event site</a> and <a href="https://github.com/leftlogic/leftlogic">my business site</a>) and have created <a href="https://npmjs.org/package/harp-static">harp-static@npm</a> which uses <a href="https://npmjs.org/package/st">st@npm</a> to cache and serve static files.</p>
<p>So in my custom server, I point all routes down to the <code>st</code> served content. I also support hitting the URLs <em>without</em> <code>.html</code> at the end, again, to keep my old URLs working. I&#39;d recommend checking out the <a href="https://github.com/remy/harp-static">harp-static source</a> if this interests you.</p>
<h2>Use of special helpers inside Harp</h2>
<p>At present, if you want to use a library inside Harp, like <a href="http://momentjs.com">moment.js</a>, the work around for this is to create a <code>.jade</code> file with the source of moment.js (in this case) as script. Essentially the minified one line file prefixed with a <code>-</code> character.</p>
<p>Then include the library in a common file, like the layout, and you have the helper available:</p>
<pre><code class="language-jade">!- load the moment.js library for server side access
!= partial(&#39;/js/moment&#39;)</code></pre>
<p>Except this would break during compilation to static files. I&#39;m certain it&#39;s to do with my custom serving process, but the path would somehow be wrong (so the library wouldn&#39;t load and further down my code there would be exceptions in Jade about the library not existing).</p>
<p>The <em>smart</em> way around this is to expose a global from <em>outside of Harp</em>. So in my <code>server.js</code> (that does all the routing, etc) I <code>require</code> in moment.js and then I <a href="https://github.com/remy/remysharp.com/blob/master/server.js#L26">expose it globally</a>:</p>
<pre><code class="language-js">// this line, although dirty, ensures that Harp templates
// have access to moment - which given the whole partial
// import hack doesn&#39;t work consistently across dynamic vs
// compiled, this is the cleanest solution.
global.moment = moment;</code></pre>
<p>Very simple, but now any Harp rendered file has access to moment.js. I use the same technique to expose the recently modified posts for listing on the homepage.</p>
<h2>List of recently modified posts</h2>
<p>The best way to get a list of all the post from <em>outside</em> of Harp (i.e. when you&#39;re requiring Harp as a dependency), is to simply load the <code>_data.json</code> file. It felt wrong initially, but it&#39;s perfect:</p>
<pre><code class="language-js">var blogs = require(&#39;./public/blog/_data.json&#39;);
var slugs = Object.keys(blogs);</code></pre>
<p>Now I have an object lookup by slug to the actual blog posts <em>and</em> I have an array of the slugs.</p>
<p>From this, I was able to <code>fs.stat</code> all the blog posts and sort to return the 3 most recently modified and then using the previous trick, expose it globally so it&#39;s included on my homepage (where <code>recent</code> is the global exposed in <code>server.js</code>):</p>
<pre><code class="language-jade">each post in recent
  li
    a(href=&quot;#{ public.blog._data[post.slug].relative }&quot;) #{ public.blog._data[post.slug].title }
    small &amp;nbsp;updated #{ moment(post.date).fromNow() }</code></pre>
<h2>Archive &amp; tag pages without the repetition of files</h2>
<p>There&#39;s two parts to this section. Firstly there&#39;s the support for individual years or tags without duplication of (too much) code. Secondly is the Jade code that runs the archive listing.</p>
<h3>Reducing duplication of code</h3>
<p>I <em>could</em> have a directory for each year there are blog posts (which I do have now) and each could contain the archive listing code. The problem (obviously) is duplication of code. You fix it one place, and (in my case, since I have 2006-2014) you have 8 files to update.</p>
<p>Instead, a single file <code>index.jade</code> sits in tagged folder (and similarly with year folders) which contains:</p>
<pre><code class="language-jade">!= partial(&#39;../../_partials/tag&#39;)</code></pre>
<p>So we load a single partial. The <code>tag.jade</code> file simply reads the path of the request, and uses the last part as a filter against all the posts:</p>
<pre><code class="language-jade">tag = filter === undefined ? current.path.slice(-2, -1)[0] : filter;
posts = partial(&#39;posts&#39;, { filter: function (post) { return post.tags.indexOf(tag) !== -1 } })
.post
  h1.title Tagged with &quot;#{ tag }&quot;
  .post-content
    ul
      while posts.length
        post = posts.shift()
        if post.date
          li
            a(href=&quot;#{ post.relative }&quot;) #{ post.title }
            small.date #{ moment(post.date).format(&#39;D-MMM YYYY&#39;)}</code></pre>
<p>Note that <code>partial(&#39;posts&#39;)</code> is a magic partial that simply returns an array of blog posts with the passed in filter applied.</p>
<p>Simple. Now if I want to add more support for tags, I just create a directory and the simple <code>index.jade</code> and it works.</p>
<h3>An archive listing</h3>
<p>A while loop that looks for a year change in the date, then works through each year, popping from the posts array looping through each post in the month.</p>
<p>It&#39;s pretty cool (I think) because it works for entire years <em>and</em> all years: <a href="https://github.com/remy/remysharp.com/blob/a198a4235634a3c7ac747ab403ac13bc49140a39/public/_partials/archive.jade">archive.jade</a></p>
<h2>Makefile based release process</h2>
<p>Disclaimer: this is a terrible use of a Makefile, it doesn&#39;t leverage <em>any</em> of the benefits of make, and honestly, it <em>could</em> be a bash script. However, I like that I can run <code>make publish</code>.</p>
<p>Taking a lead from <a href="https://andreypopp.com/posts/2013-05-16-makefile-recipes-for-node-js.html">Makefile recipes for Node.js packages</a>, my <a href="https://github.com/remy/remysharp.com/blob/master/Makefile">makefile</a> allows me to run commands like:</p>
<pre><code class="language-bash">$ make release-minor publish</code></pre>
<p>The <code>release-*</code> tasks will:</p>
<ol>
<li>Bump the package version (according to patch/minor/major)</li>
<li>Compile Harp to static files</li>
<li>Commit all changes and tag</li>
<li>Push to github</li>
</ol>
<p>The version bump has to happen first so that the version I used to cache bust in the compiled output is correct (otherwise you bump after the compilation, and then your released version is one step ahead of the version that appears in the source).</p>
<p>And that&#39;s it! Here&#39;s the full running <a href="https://github.com/remy/remysharp.com">source to remysharp.com</a> - feel free to help yourself to anything that&#39;s useful for your own blogs or sites.</p>
]]></content:encoded></item><item><title>My  Velveteen Rabbit</title><guid isPermaLink="false">my-velveteen-rabbit</guid><link>http://remysharp.com/2014/09/24/my-velveteen-rabbit</link><pubDate>Wed, 24 Sep 2014 16:30:00 +0000</pubDate><description><![CDATA[This is the Velveteen Rabbit. The same picture hangs in my house.
I&#39;ve never bought any artwork in my life previously. I&#39;ve never really &quot;got it&quot;.
I walked passed the picture in a shop window most days back from the gym, and something kept reaching out to me. I&#39;d stop and just look at the picture for several minutes before continuing my journey.
One time I even passed the picture, then turned back to spend a few idle minutes contemplating what it was that I drawn to.
My wife, Julie, eventually told me if something was pulling me so strongly, I should buy it. So now it hangs in my house.
I realised quickly what it was.

We lost our daughter, Tia to stillbirth on August 31 2010. My wife, after 9 months was finally in labour, and between the hours of labour and getting to hospital, she was lost. She never came home with us.
I have no proof that she exists. There were no baby clothes, no balloons, no happy photos.
It was like she didn&#39;t exist at all, and that somehow her existence was invalid.
I struggled with this a lot. I still do at times.

But I see the picture of Velveteen Rabbit. He stands there, upright and proud. Standing against the wind, feeling it on his fur and blowing his ears back. Defiant with love. &quot;I shall exist&quot;.
In that moment, that tiny moment, the Velveteen Rabbit does exist, against all odds. He&#39;s loved, and seen.
I always think of Tia when I look at that picture. She&#39;s not here any more. She doesn&#39;t exist in my world today. But she&#39;s always with me. She has left a mark. In my heart. I think of her and miss her. Other people can&#39;t see that, but she is here, with me.
A person doesn&#39;t have to be with you for you to love them. Just remember them. And love them. And they&#39;ll live on, with you.
Reposted from The Pastry Box Project]]></description><content:encoded><![CDATA[
<p><img src="/images/spring.jpg?" alt="The Velveteen Rabbit" style="display: block; max-width: 100%; width: 40%; margin: 0 auto; margin-right: 20px; float: left;"></p>
<p>This is the Velveteen Rabbit. The same picture hangs in my house.</p>
<p>I&#39;ve never bought any artwork in my life previously. I&#39;ve never really &quot;got it&quot;.</p>
<p>I walked passed the picture in a shop window most days back from the gym, and something kept reaching out to me. I&#39;d stop and just look at the picture for several minutes before continuing my journey.</p>
<p>One time I even passed the picture, then turned back to spend a few idle minutes contemplating what it was that I drawn to.</p>
<p>My wife, Julie, eventually told me if something was pulling me so strongly, I should buy it. So now it hangs in my house.</p>
<p>I realised quickly what it was.</p>
<hr>
<p>We lost our daughter, Tia to stillbirth on August 31 2010. My wife, after 9 months was finally in labour, and between the hours of labour and getting to hospital, she was lost. She never came home with us.</p>
<p>I have no proof that she exists. There were no baby clothes, no balloons, no happy photos.</p>
<p>It was like she didn&#39;t exist at all, and that somehow her existence was invalid.</p>
<p>I struggled with this a lot. I still do at times.</p>
<hr>
<p>But I see the picture of Velveteen Rabbit. He stands there, upright and proud. Standing against the wind, feeling it on his fur and blowing his ears back. Defiant with love. &quot;I <em>shall</em> exist&quot;.</p>
<p>In that moment, that tiny moment, the Velveteen Rabbit does exist, against all odds. He&#39;s loved, and seen.</p>
<p>I always think of Tia when I look at that picture. She&#39;s not here any more. She doesn&#39;t exist in my world today. But she&#39;s always with me. She <em>has</em> left a mark. In my heart. I think of her and miss her. Other people can&#39;t see that, but she <em>is</em> here, with me.</p>
<p>A person doesn&#39;t have to be with you for you to love them. Just remember them. And love them. And they&#39;ll live on, with you.</p>
<p><small>Reposted from <a href="https://the-pastry-box-project.net/remy-sharp/2014-august-26">The Pastry Box Project</a></small></p>
]]></content:encoded></item><item><title>WordPress -&gt; Ghost -&gt; Harp (part 1)</title><guid isPermaLink="false">wordpress-ghost-harp-pt1</guid><link>http://remysharp.com/2014/09/18/wordpress-ghost-harp-pt1</link><pubDate>Thu, 18 Sep 2014 12:00:00 +0000</pubDate><description><![CDATA[I&#39;ve been running my &quot;b:log&quot; on WordPress since late 2006, but today I give you the node backed blog.
This is a two part blog post, the first covering why I moved, what I tried and a few of the high level issues I ran in to. Part two will cover some of the technical detail that goes in to running my blog on the new node platform.
These posts are not intended as walkthrough on how to do it yourself, but simply sharing my experience and bumps I ran into on the way, hoping to impart some useful knowledge along the way.]]></description><content:encoded><![CDATA[
<p>I&#39;ve been running my &quot;b:log&quot; on WordPress since late <a href="/2006">2006</a>, but today I give you the node backed blog.</p>
<p>This is a two part blog post, the first covering why I moved, what I tried and a few of the high level issues I ran in to. Part two will cover some of the technical detail that goes in to running my blog on the new node platform.</p>
<p>These posts are not intended as walkthrough on how to do it yourself, but simply sharing my experience and bumps I ran into on the way, hoping to impart some useful knowledge along the way.</p>
<hr>
<p>Over the years I&#39;ve had all the injections of Viagra adverts and the like over and over and over. Whenever I want to change anything, I&#39;d tend to give up, and for a few years now, I&#39;ve really wanted the source of my blog posts available in (something like) github.</p>
<p>This post is about the move and how I run my blog now.</p>
<h2>My goals</h2>
<p>In a totally ideal world, I wanted:</p>
<ul>
<li>A fast blogging platform (not particularly for publishing, but for serving)</li>
<li>Backed by JavaScript (Node specifically) - because it&#39;s the most familiar language to me</li>
<li>Edit links for posts to go to github allowing anyone to make a suggested edit</li>
<li>Archives and tag listings</li>
<li>URLs would be customisable (because I have old URLs that I want to support)</li>
<li>Could run on a free hosting platform like Heroku</li>
<li>As a bonus, I could hack and improve the system</li>
</ul>
<p>TL;DR here&#39;s the full source of my blog as it is today, on github: <a href="github.com/remy/remysharp.com"><a href="https://github.com/remy/remysharp.com/">https://github.com/remy/remysharp.com/</a></a>.</p>
<h2>Ghost</h2>
<p>I knew that I wanted to move to a node backed platform. Ghost seemed like the best fit, and I&#39;ve had the pleasure of meeting and listening to John O&#39;Nolan and Hannah Wolfe speak about Ghost, and I complete buy into the philosophy.</p>
<p>Exporting WordPress posts (and pages) to Ghost was actually very simple (I used the developer version of Ghost locally).</p>
<p>The only bump in the road was the error messaging during the Ghost import was pretty vague. But checking the devtools console yielded the answer, a 324 from my server during the upload process. So I tweaked nginx to allow for larger files to be uploaded and bosh. Fixed.</p>
<p>The next trick was the comments - which Disqus seemed like the default that everyone moves to. Obviously nothing to do with Ghost, but this process was tricky. The best advice I can give if you&#39;re doing this and keep hitting failed imports is: validate the XML (w3c validator is just fine), and hand-fix the invalid XML.</p>
<h3>Why I didn&#39;t stick with Ghost</h3>
<p>For the record, I think Ghost is an excellent platform for most users, particularly if they&#39;re coming to blogging for the first time or wanting to shift away from WordPress.</p>
<p>However, being a developer I wanted to add a few custom tweaks, specifically I wanted an archive page, a handful of URL rewrite rules and a few of the Ghost ways of doing things weren&#39;t quite what I wanted.</p>
<p>One particular example is all my old WordPress posts had split markers in them which Ghost doesn&#39;t support. They do have support for creating excepts, but if you want HTML you can&#39;t (at time of writing) append a read more to the link.</p>
<p>I tried to contribute to the Ghost project, but I ended up going down a rabbit hole for what was effectively a tiny change (submitting a pull request to a Ghost dependency Downsize).</p>
<p>The (understandable) problem is that Hannah and the Ghost team are producing code that works in a great deal of environments and so a quick PR here and there are great, but I can understand why they&#39;re not merged in right away if at all: there&#39;s a much bigger picture to consider.</p>
<p>I thought about just forking Ghost and permanently running my own version, but there&#39;s a fairly big system to inherit when all I&#39;m doing is serving pages...which I had done with Harp.js before.</p>
<p>So I made the jump to Harp.</p>
<h3>Ghost to Harp</h3>
<p>Harp is a static site generator. I&#39;ve used it in the past for <a href="http://2014.full-frontal.org">our conference site</a> this year and for the <a href="http://jsbin.com/help">JS Bin help &amp; blog</a> so I was already familiar with it.</p>
<p>However, harp requires static markdown files, so I went about connecting to the Ghost database via sqlite3 and exporting each of these records out as a static HTML file, whilst building up the <code>_data.json</code> file required by harp to represent the metadata.</p>
<p>The code I used to convert is on github here: <a href="https://github.com/remy/ghost-harp">remy/ghost-harp</a>. <em>Disclaimer</em>: I wrote this for my own database and requirements, so this may not work for you out of the box.</p>
<p>The conversion process is pretty simple, read the sqlite database, write to files. So I ended up with a folder structure like this:</p>
<pre><code class="language-nohighlight">.
├── harp.json
└── public
    ├── _data.json
    ├── about.md
    ├── blog
    │   ├── 2007-moments.md
    │   ├── 8-questions-after-ie-pissed-the-community-off.md
    │   ├── _data.json
    │   ├── _drafts
    │   │   ├── _data.json
    │   │   ├── my-velveteen-rabbit.md
    │   │   └── why-i-prefer-mobile-web-apps-to-native-apps.md
    │   ├── a-better-twitter-search.md
    │   ├── wordpress-tagging-and-textmate.md
    │   └── youre-paying-to-speak.md
    ├── talks.md
    └── twitter.md</code></pre>
<p>Some contents are going to be in HTML, but Ghost seemed to put my HTML posts in the markdown column (and since it&#39;s valid, it doesn&#39;t really matter).</p>
<p>One significant tweak I made was to put the post title <em>into</em> the post itself. For example, if you look at the source <a href="https://github.com/remy/remysharp.com/blob/master/public/about.md">about</a> page, you&#39;ll see the title in the markdown. Ghost separates out the title and the body when you&#39;re editing, but I wanted a single markdown file.</p>
<p>The next task was to fire up harp and have it running from my newly generated <code>public</code> directory.</p>
<h2>Harp</h2>
<p>Now that all my content is in the <code>public/blog</code> directory (via my little rewrite script) harp could serve my content. Using a simple (empty) <code>harp.json</code> as the config, harp automatically knows to serve anything under <code>public</code> as the root of the site (i.e. <code>/blog/foo</code> will serve the file <code>/public/blog/foo.md</code>):</p>
<p>My specific requirements for using harp were:</p>
<ul>
<li>Serves <em>static</em> content (so I&#39;d have to compile to static .html)</li>
<li>Serves in production <em>without</em> the <code>.html</code> extension visible</li>
<li>Support rewriting of URLs, so that I could maintain my original URL structure of <code>/&lt;year&gt;/&lt;month&gt;/&lt;day&gt;/&lt;post&gt;</code> rather than pointing to <code>/blog/&lt;post&gt;</code></li>
<li>I <em>really</em> wanted an archive, since I was simplifying a lot of my blog design, and losing a <em>lot</em> of navigation</li>
</ul>
<p>In the end, I had to create my own custom <code>server.js</code> that would run a bespoke router (I did use an existing library, but I needed changes, so I forked my own copy).</p>
<p>Harp certainly made things harder than using Ghost, but I had the flexability I needed.</p>
<p>I&#39;m particularly proud of the <a href="/archive">archive</a> page, partly because I managed to write it entirely with Jade (which over the years I&#39;m slowly starting to warm to) and partly because I now have a page that lists <em>all</em> my posts since the first in 2006!</p>
<p>The version I&#39;m running today satisfies all the goals I outlined at the start of the project, and more.</p>
<p>A few bonus features I built are:</p>
<ul>
<li>I can add <code>/edit</code> to any page to quickly jump to github to edit (along with edit links being on all the posts)</li>
<li>All the old demos and uploads from my WordPress site are hosted on Amazon S3 and redirected to via my <code>server.js</code></li>
<li>My development environment is slightly different to production, such as drafts are visible and the disqus comments are removed</li>
</ul>
<p>The <em>one</em> thing I&#39;d like harp to be better at would be knowing what to regenerate. Due to this my release process involves rebuilding the entire blog site (~300 posts) and then pushing the changes to github and then heroku (where I&#39;m now hosting my blog) - though this is effectively an rsync, so it&#39;s not everything that goes up.</p>
<h2>The final product</h2>
<p>The final product and platform consists of:</p>
<ul>
<li>Statically generated content in <code>/www</code></li>
<li>Source control in github</li>
<li>Production is hosted on a single dyno on Heroku</li>
<li>Using <a href="https://dnsimple.com/r/5bc02f2ef8976f">dnsimple</a> for <code>ALIAS</code> hosting to the heroku instance (so I can serve &quot;naked&quot; domains)</li>
<li>CloudFlare fronts the production blog</li>
<li>The major and minor version are used to cachebust the CSS &amp; JavaScript, due to this, it means changes to content are a patch release and all others are minor (or major) releases</li>
<li>The release process is a bash-like makefile that does all the compiling and revisioning for me</li>
</ul>
<p>So my whole release process for this blog post is now:</p>
<pre><code class="language-bash">$ make release-patch publish</code></pre>
<p>And boom, just like that, you&#39;re reading the post!</p>
<p>In part 2, I&#39;ll explain some of the code that&#39;s used to drive my blog and some of the tricks I had to use to get harp to play exactly the way I wanted.</p>
]]></content:encoded></item><item><title>In the middle with &lt;center&gt;</title><guid isPermaLink="false">in-the-middle-with-center</guid><link>http://remysharp.com/2014/08/15/in-the-middle-with-center</link><pubDate>Fri, 15 Aug 2014 14:38:14 +0000</pubDate><description><![CDATA[I posted a tweet recently that confused some people. They might have thought I was trolling or being sarcastic!

The &lt;center&gt; tag is awesome. Why have I been avoiding it all these years?

Seriously. It is. But I feel like I may have to defend my opinion on this one!]]></description><content:encoded><![CDATA[
<p>I posted a <a href="https://twitter.com/rem/status/499629513983406080">tweet</a> recently that confused some people. They might have thought I was trolling or being sarcastic!</p>
<blockquote>
<p>The <code>&lt;center&gt;</code> tag is awesome. Why have I been avoiding it all these years?</p>
</blockquote>
<p>Seriously. It is. But I feel like I may have to defend my opinion on this one!</p>
<h2>It&#39;s <em>easier</em></h2>
<p>I want to centre some text. My brain has a fork in it&#39;s process:</p>
<ol>
<li>I use <code>&lt;center&gt;</code></li>
<li>I don&#39;t use <code>&lt;center&gt;</code> and choose from an array of CSS based options</li>
</ol>
<p>Let&#39;s entertain option 2 for a moment. Here&#39;s my code:</p>
<pre><code>&lt;p&gt;The witch had a cat and a very tall hat,&lt;/p&gt;
&lt;p&gt;And long ginger hair which she wore in a plait.&lt;/p&gt;
&lt;p&gt;By: Julia Donaldson and Axel Sheffler&lt;/p&gt;</code></pre>
<p>I want the author credit to be centre aligned. This is the cost with option 2:</p>
<ol>
<li>Add a class to the last <code>p</code> tag</li>
<li><em>Think</em> of an appropriate name, perhaps &quot;credit&quot;</li>
<li>Create a new style sheet file</li>
<li>Add the <code>link</code> tag to the <code>head</code> of my document</li>
<li>Remember to add <code>rel=&quot;stylesheet&quot;</code> or it won&#39;t work</li>
<li>Add 3 lines of CSS</li>
</ol>
<p>As such:</p>
<pre><code>.credit {
  text-align: center;
}</code></pre>
<p>Not much work.</p>
<p>Now compared to using the <code>center</code> tag:</p>
<ol>
<li>Add <code>center</code> tag around content</li>
<li>No, there is no step two. Got you there for a second, right?</li>
</ol>
<h2>But...but...semantics!</h2>
<p>Okay. Semantics. Let&#39;s keep the deeper conversation aside for a minute, but what I&#39;ve seen argued is: the <code>center</code> element doesn&#39;t have any semantic value.</p>
<p>So instead you might use a <code>span</code> or a <code>div</code> instead (and yes, sure, if you were just centring a paragraph, you&#39;d use a <code>p</code> and CSS as above).</p>
<p>But now you&#39;re using an element without any semantic meaning, and then adding CSS (and probably classes) to centre align.</p>
<p>Instead, why not, use <code>center</code>, which has &quot;no semantic meaning&quot; and benefit from the default browser styling that you get for free. Just like you do for different heading levels. Or for <code>sup</code> or <code>small</code>?</p>
<h2>Yeah, but it&#39;s deprecated!</h2>
<p>Actually, according to the W3C validator, the element is <em>obsolete</em> - which sounds a little harsher.</p>
<p>But then, so what? The beauty of HTML is that it works, as busted as you can make it, browsers will make it work.</p>
<p>Old pages written with <code>font</code> tags and <code>big</code> still work, and there&#39;s a <a href="http://www.w3.org/TR/CSS2/sample.html">well defined spec</a> for browser vendors that support HTML4 as to how HTML4 elements should be styled. HTML4 moved to recommendation in 1999, and HTML5 has still not reached recommendation phase (at time of writing it&#39;s Candidate Recommendation as of 31 July 2014).</p>
<p>My point being: browsers will support the HTML4 elements for a long...long time. I&#39;d be prepared to bet that HTML4, and <code>center</code> styling will be supported beyond the lifetime of this blog (and any other of my sites).</p>
<p>So it&#39;s deprecated. But it works. And that&#39;s basically the web summed up: <strong>but it works.</strong></p>
<h2>More center?</h2>
<p>Yep, I&#39;ve convinced myself, I&#39;ll be using <code>center</code> just a little more often (than previously not at all). Maybe you&#39;ll reconsider pulling it back in to your toolbox!</p>
]]></content:encoded></item><item><title>Time doesn’t heal</title><guid isPermaLink="false">time-doesnt-heal</guid><link>http://remysharp.com/2014/08/11/time-doesnt-heal</link><pubDate>Mon, 11 Aug 2014 13:00:06 +0000</pubDate><description><![CDATA[My wife and I lost our daughter at full term in the last throes of labour to stillbirth. It was the darkest time of my life.
Over the coming months we&#39;d hear the phrase &quot;time heals&quot;. It doesn&#39;t.
How would it? We lost our daughter. She&#39;ll be 4 this year. I still miss her. My heart still yearns for her. I still cry for her.
Time won&#39;t ever heal this hole in our lives. It shouldn&#39;t either. 
Time can heal cuts and pains, so those cuts go away and you don&#39;t think of them again. But the loss of our daughter? Time will remind us over and over again that she&#39;s not here. Her first Christmas, first birthday, the birth of our son, our family coming together for a group photo, when she was supposed to join school. Over and over and over.
Time gave us room to grow stronger. And not quickly, in that &quot;you&#39;re so strong&quot; way. But slowly. Over many many months and many years.
As time goes on, I started to accept this hole in my life as part of my life. 
Time didn&#39;t heal me, but I was able to begin to bear the weight of her loss. Just like going to the gym and lifting weights, I&#39;d gained the strength, but it&#39;s taken a long, long time. And I&#39;m not healed. I never will be. I&#39;m just able to carry more.
You just get stronger. You have to.
It doesn&#39;t mean it doesn&#39;t hurt anymore. It does. I&#39;m just able to carry that pain and make it mine and part of me, because I&#39;ve learnt how to.
Time doesn&#39;t heal. It just looks that way from the outside in.
Reposted from The Pastry Box Project]]></description><content:encoded><![CDATA[
<p>My wife and I lost our daughter at full term in the last throes of labour to stillbirth. It was the darkest time of my life.</p>
<p>Over the coming months we&#39;d hear the phrase &quot;time heals&quot;. <strong>It doesn&#39;t</strong>.</p>
<p>How would it? We lost our daughter. She&#39;ll be 4 this year. I still miss her. My heart still yearns for her. I still cry for her.</p>
<p>Time won&#39;t ever heal this hole in our lives. It shouldn&#39;t either. </p>
<p>Time can heal cuts and pains, so those cuts go away and you don&#39;t think of them again. But the loss of our daughter? Time will remind us over and over again that she&#39;s not here. Her first Christmas, first birthday, the birth of our son, our family coming together for a group photo, when she was supposed to join school. Over and over and over.</p>
<p>Time gave us room to grow <em>stronger</em>. And not quickly, in that &quot;you&#39;re so strong&quot; way. But slowly. Over many many months and many years.</p>
<p>As time goes on, I started to accept this hole in my life as <em>part of my life</em>. </p>
<p>Time didn&#39;t heal me, but I was able to <em>begin</em> to bear the weight of her loss. Just like going to the gym and lifting weights, I&#39;d gained the strength, but it&#39;s taken a long, long time. And I&#39;m not healed. I never will be. I&#39;m just able to carry more.</p>
<p>You just get stronger. You have to.</p>
<p>It doesn&#39;t mean it doesn&#39;t hurt anymore. It does. I&#39;m just able to carry that pain and make it mine and part of me, because I&#39;ve learnt how to.</p>
<p>Time doesn&#39;t heal. It just looks that way from the outside in.</p>
<p><small>Reposted from <a href="https://the-pastry-box-project.net/remy-sharp/2014-july-3">The Pastry Box Project</a></small></p>
]]></content:encoded></item><item><title>Automatic permalinks for blog posts</title><guid isPermaLink="false">automatic-permalinks-for-blog-posts</guid><link>http://remysharp.com/2014/08/08/automatic-permalinks-for-blog-posts</link><pubDate>Fri, 08 Aug 2014 14:00:38 +0000</pubDate><description><![CDATA[There&#39;s been so many times that I&#39;ve wished I could quickly link to a specific
headline in an article, but there&#39;s no id attributes on the tag...so I can&#39;t.
But then there&#39;s nothing I can do to fix it, because it actually requires the
blog author to overhaul their site to add ids to all the heading tags which
may not be a quick job.
So, my dear blog author, here&#39;s my work around until you do serve ids in
your headings.]]></description><content:encoded><![CDATA[
<p>There&#39;s been so many times that I&#39;ve wished I could quickly link to a specific
headline in an article, but there&#39;s no <code>id</code> attributes on the tag...so I can&#39;t.</p>
<p>But then there&#39;s nothing I can do to fix it, because it actually requires the
blog author to overhaul their site to add <code>id</code>s to all the heading tags which
may not be a quick job.</p>
<p>So, my dear blog author, here&#39;s my work around until you <em>do</em> serve <code>id</code>s in
your headings.</p>
<h2>JavaScript to generated permalinks</h2>
<p>We&#39;re going to add a single JavaScript file that will crawl through all our
heading elements, and convert the text of the heading into an <code>id</code>.</p>
<p>Then, if there&#39;s a hash fragment in the URL, the window will jump down to the
named element. Thus &quot;faking&quot; permalink support.</p>
<h2>The id</h2>
<p>The <code>id</code> attribute is only applied if there&#39;s no <code>id</code> on the heading element
and is simply a regular expression that strips away anything that isn&#39;t an
alphanumeric and converts it to lowercase.</p>
<p>So a heading that reads: &quot;What does a Pro account get you?&quot; is converted to
<code>whatdoesaproaccountgetyou</code>. <a href="http://jsbin.com/help/pro#whatdoesaproaccountgetyou">Pretty simple</a>.</p>
<h2>Exposing the link</h2>
<p>Inspired by Github&#39;s readme permalinks, when you hover near the left of the
title then you&#39;ll see a ¶ character that is clickable and gives the reader the
permalink.</p>
<p>This style is injected via the JavaScript, and it&#39;s quite possible you&#39;ll need
to tweak it a little to get it style correctly on your own site (but it&#39;s pretty
small).</p>
<h2>Usage</h2>
<p>Simple. <a href="https://github.com/remy/permalink">Download the script</a>. Then just slap
the script in the footer of your site (or after all your heading tags) and it&#39;ll
upgrade your headings for your visitors:</p>
<pre><code>&lt;script src=&quot;js/permalink.js&quot;&gt;&lt;/script&gt;</code></pre>
<p>Now I can share headline specific links to <em>your</em> site whilst all you needed to
do was add one line. Thank you!</p>
]]></content:encoded></item><item><title>The 'what time did my son wake up?' project</title><guid isPermaLink="false">arduino-wake-up-time</guid><link>http://remysharp.com/2014/08/05/arduino-wake-up-time</link><pubDate>Tue, 05 Aug 2014 10:53:19 +0000</pubDate><description><![CDATA[My 2 1/2 year old son wakes up before us during the spring and summer. He turns his light on fully, and plays until he&#39;s bored, then calls for us to join us in bed in the morning.
The problem was: exactly when was he waking, because it would affect how tired he was in the day (and affect nap times). So I built a tiny Arduino prototype :-)]]></description><content:encoded><![CDATA[
<p>My 2 1/2 year old son wakes up before us during the spring and summer. He turns his light on fully, and plays until he&#39;s bored, then calls for us to join us in bed in the morning.</p>
<p>The problem was: exactly <em>when</em> was he waking, because it would affect how tired he was in the day (and affect nap times). So I built a tiny Arduino prototype :-) </p>
<h2>The grand plan</h2>
<p>The grand plan was to use a TinyAT85 chip (because I like micro projects), with 4 digit 7 segment LED, a photoresistor, a push button (to reset) and a real time clock (RTC module). </p>
<p>This would be in some sort of housing, and I&#39;d use Sugru with their magnets to stick to his lamp. </p>
<p>The idea being that the unit would attach magnetically to his lamp and be in a sleep state (though actually there&#39;s smarter approaches I could use to <em>actually</em> be in a sleep state). </p>
<p>When the light is switched on, the photoresistor picks up a value higher than 950, and the time is displayed and fixed on the LED display. You then hit the reset button to go back to sleep state.</p>
<h2>The reality</h2>
<p>7 segment LED displays, wired up regularly take up a <em>lot</em> of pins, even more so when there&#39;s four! This combined with the fact that TinyAT85 s only have 5 available pins for data, meant I&#39;d need to use one of the adafruit LED backpacks (which I didn&#39;t have to hand), and then I didn&#39;t know if I could use an SPI pin with the SDA and SCL pins required to run the RTC module - so I decided to stick to the prototype for now.</p>
<h2>The prototype</h2>
<p>I had a LCD module handy, which I&#39;d use instead of the LED display. I also always prototype using an Arduino Uno, so it&#39;s simpler (and a lot bigger).</p>
<p>From there it was very simple. A lot of copy and paste from the adafruit website and then just writing the logic into my code:</p>
<ul>
<li>If the light sensor value goes above 850, then the light is on.</li>
<li>Grab the time from the RTC module</li>
<li>Display the time on the LCD</li>
<li>If the push button is ‘LOW‘ then reset and clear the display</li>
<li>As an additional bonus, if the light value drops below 300, it means the light is off, and reset (which saves pressing reset at night)</li>
</ul>
<p>Here&#39;s the code: <a href="https://gist.github.com/remy/11264660#file-light-time-pde">light-time.pde</a></p>
<p>And the prototype wired up:</p>
<p><img src="https://farm6.staticflickr.com/5333/13975246696_3d7bcc89e6_o.jpg" alt=" https://farm6.staticflickr.com/5333/13975246696_3d7bcc89e6_o.jpg"></p>
<h2>The grand conclusion</h2>
<p>After carefully wiring everything up, placing the arduino in my son&#39;s room and covering the lights so it wouldn&#39;t keep him up, I headed to bed keep to discover the time he was actually rising.</p>
<p>The morning came, he woke me and my wife up early (as expected), and I trotted into his room to discover...the battery had died.</p>
<p>Yep. Polling all the time is going to burn the battery out, and indeed what I need is an interrupt (based on the light levels ideally). So that&#39;s the plan for version 2...when I get around to it. For now, filling up failed projects!</p>
]]></content:encoded></item><item><title>Call for proposals at Full Frontal 2014</title><guid isPermaLink="false">call-for-proposals-at-full-frontal-2014</guid><link>http://remysharp.com/2014/06/17/call-for-proposals-at-full-frontal-2014</link><pubDate>Tue, 17 Jun 2014 12:51:12 +0000</pubDate><description><![CDATA[Full Frontal has it&#39;s ticket release date(s!) and as usual, I&#39;m already carefully curating the content I want to hear at Full Frontal, but I always make sure I allot a few positions for CFP - because let&#39;s face it: I don&#39;t know, what I don&#39;t know.]]></description><content:encoded><![CDATA[
<p><a href="http://2014.full-frontal.org">Full Frontal</a> has it&#39;s ticket release date(s!) and as usual, I&#39;m already carefully curating the content I want to hear at Full Frontal, but I always make sure I allot a few positions for CFP - because let&#39;s face it: I don&#39;t know, what I don&#39;t know.</p>
<p>So, if you think you&#39;ve got something to share, then get in touch. I&#39;ve included a few guidelines as to what I prefer from a proposal, and given you an idea of the kinds of topics I&#39;m interested in hearing about this year.</p>
<h2>Proposal topic advice</h2>
<p>I&#39;ve also included what you can expect as a speaker at our event too.</p>
<p>Topics that interest me:</p>
<ul>
<li>Web technology used outside of browsers</li>
<li>What we can learn in web development from other technology/disciplines</li>
<li>Debugging in new and unexpected ways</li>
<li>The future of the web/the future and how the web will be part of that</li>
<li>SysOP problems for JavaScript/node devs</li>
<li>Performance and squeezing insanity through the pipeline</li>
<li>Large scale application design problems that specifically applies to small scale</li>
<li>&quot;You&#39;re doing it wrong&quot;</li>
</ul>
<p>If you want to get an idea of the audience or who you proposal is for, the answer is simple: me. I curate for content that <em>I want to hear and see</em>. So if you (roughly) know my work, then you know the audience.</p>
<p>Topics that don&#39;t work, unless they&#39;re genuinely going to change the World, then CFPs like these generally fall to the bottom of the pile (sorry!):</p>
<ul>
<li>Library specific talks</li>
<li>Your company&#39;s new product</li>
<li>Talks that are very similar to previous Full Frontal talks</li>
</ul>
<p>Send me the title of your talk, an outline of the talk and any extra information you want me to know about the idea: <a href="mailto:events@leftlogic.com?subject=FF2014%20speaking%20propsal">events@leftlogic.com</a></p>
<p>If your proposal (is genuine and) comes in <strong>before 14 July 5pm UK time</strong> then we&#39;ll give early access to buy a ticket before the second wave of tickets are released. Regardless, if your proposal is selected, we&#39;ll refund your conference ticket if you bought one.</p>
<h2>Our promise to you</h2>
<p>All our speakers are treated the same. We will:</p>
<ul>
<li>Pay for your travel. If you&#39;re flying long haul, we&#39;ll upgrade you to premium class (or whatever the name is for &quot;above economy&quot;)</li>
<li>Put you up in our &quot;speaker hotel&quot;. It&#39;s not that sexy, but it&#39;s right in town and two minutes walk from our venue. We&#39;re also open to offering the hotel stay. If you want an extra day or two here and there, then that&#39;s cool too (obviously if everyone does this, it breaks our bank, but so far it&#39;s worked)</li>
<li>Arrange your travel and help you with anything you need ahead of the event</li>
<li>We can, if you need or want it, provide you with a mifi preloaded with data</li>
<li>All your food and drinks provided for you during the day before and the day of the conference (don&#39;t expect to buy a drink at the after party)</li>
<li>40 minute talk, generally we don&#39;t do Q&amp;A and it&#39;s best to err on the side of &quot;there is no wifi&quot;</li>
<li>£500 honourium - I know it&#39;s not much, but it&#39;s a bit of spending money to say thanks</li>
<li>A free pass to the following year of Full Frontal, and for evermore part of our growing and much loved speaker alumni</li>
</ul>
<p>So I hope to hear from you soon!</p>
]]></content:encoded></item><item><title>CommonJS modules with live edit in devtools</title><guid isPermaLink="false">commonjs-with-devtools-live-edit</guid><link>http://remysharp.com/2014/05/30/commonjs-with-devtools-live-edit</link><pubDate>Fri, 30 May 2014 12:07:56 +0000</pubDate><description><![CDATA[As you might know, I&#39;m a big fan of Chrome devtools&#39; live edit and workspaces (video playlist), and it&#39;s this workflow that&#39;s kept me away from Browserify. 
So I went about creating an experiment that allowed me to use CommonJS modules in development and that allowed me to edit and save directly in devtools without a build step.]]></description><content:encoded><![CDATA[
<p>As you might know, I&#39;m a big fan of <a href="http://www.youtube.com/playlist?list=PLXmT1r4krsTq7w7hDV6zfirrs4NJlzJX5">Chrome devtools&#39; live edit and workspaces</a> (video playlist), and it&#39;s this workflow that&#39;s kept me away from <a href="http://browserify.org">Browserify</a>. </p>
<p>So I went about creating an experiment that allowed me to use CommonJS modules in development <em>and</em> that allowed me to edit and save directly in devtools <em>without</em> a build step.</p>
<h2>Some context</h2>
<p>As far as I know, Browserify is the bees knees for using CommonJS modules in the client side. However, it&#39;s also got a build step. I know it supports sourcemaps, but I&#39;ve personally had mixed (about 20%) success with sourcemaps, and particularly when it comes to saving directly in devtools.</p>
<p>I&#39;m happy with a build step for production, but not in dev. I want to know the files I&#39;m working with are being saved to disk without any extra steps.</p>
<p>It&#39;s entirely possible I&#39;ve reinvented the wheel here (feel free to point me in the right direction!).</p>
<p>So...I had a go at re-inventing the <code>require</code> method...</p>
<h2>Demo</h2>
<p>For your viewing pleasure, here&#39;s the experiment using my dev require.js. It supports CommonJS modules. I&#39;ve only tested a few levels deep, and it&#39;s <em>only</em> for client side code.</p>
<p>The main requirements were to ensure:</p>
<ol>
<li>Line numbers in the console mapped correctly to the line in the file</li>
<li>Saving the file would commit the save to disk</li>
<li>Saving the file would update memory</li>
</ol>
<p>These <em>kinda</em> work as you&#39;ll see in the video.</p>
<iframe width="1280" height="720" src="//www.youtube.com/embed/uHxxcnJi4BE?rel=0" frameborder="0" allowfullscreen></iframe>

<h2>How it works</h2>
<p>Pretty simple (and stupid) really, require.js is just this:</p>
<pre><code>function require(path) {
  var xhr = new XMLHttpRequest();

  if (path[0] === &#39;.&#39;) {
    path = path.substr(2);
  }

  path += &#39;.js&#39;;

  var module = {
    exports: {}
  };

  xhr.open(&#39;GET&#39;, path, false); // sync
  xhr.send();

  var code = xhr.responseText;

  if (code.indexOf(&#39;//# sourceURL&#39;) === -1) {
    code += &#39;\n\n//# sourceURL=&#39; + path;
  }

  eval(code);

  return module.exports;
}</code></pre>
<p>The code boils down to:</p>
<ol>
<li>Make an <em>synchronous</em> XHR call to the script</li>
<li>Insert a <code>sourceURL</code> in the code so devtools knows what file it was</li>
<li>Create a <code>module</code> object in scope</li>
<li>Then eval and return the updated <code>module.exports</code></li>
</ol>
<p>Pretty filthy really. Also obviously missing the require path resolution.</p>
<p>I&#39;ve created a little repo with the <a href="https://github.com/remy/require-for-dev">code I used in the demo on github</a> too.</p>
<h2>Known and potential issues</h2>
<ul>
<li>Using the <code>setInterval</code> you may have noticed in foo.js, when changing the code, devtools loses access to the <code>app</code> variable. Unsure why.</li>
<li>Using Workspaces is a no-no, it seems to get really confused and <em>very</em> sticky about what&#39;s in memory (i.e. the file shown in sources does not match what&#39;s being run)</li>
<li>The full require resolution isn&#39;t implemented at all (so only relative URLs are loaded)</li>
<li>Saving the file in devtools will insert the <code>sourceURL</code> in the file permanently</li>
<li>I&#39;m not 100% of the security of the modules - in fact I&#39;m pretty sure (since they&#39;re not running inside a new document context) that there would be namespace collision (which is kind of the point of CommonJS to avoid!!!)</li>
<li>Probably a lot more potential issues - like I said, this is an <em>experiment</em>!</li>
</ul>
<h2>Does it really work?</h2>
<p>I&#39;m not sure. It&#39;s not perfect, and I&#39;m not 100% sure it&#39;s 100% usable...so I&#39;m classing this as a failed experiment.</p>
<p>I thought about seeing if I could make an iframe on the fly, and inject the content, but the iframe would have to be appended to the document to execute the code, and the code is only executed on the &quot;next tick&quot;, i.e. <em>after</em> the <code>return module.exports</code> so the module would be loaded, but the code would not. Poop.</p>
<p>On the upside, I figured it was worth sharing, because some bright mind might just solve the memory linking issues that I&#39;m seeing or create some clever work around.</p>
]]></content:encoded></item><item><title>Where is that console.log?</title><guid isPermaLink="false">where-is-that-console-log</guid><link>http://remysharp.com/2014/05/23/where-is-that-console-log</link><pubDate>Fri, 23 May 2014 12:16:21 +0000</pubDate><description><![CDATA[Did you ever have phantom console.log - or more specifically you&#39;ve no idea 
where it was happening?
I have. This tiny bit of code will help you identify where the logging is 
being called from. The nice thing is it works in the browser and in node.]]></description><content:encoded><![CDATA[
<p>Did you ever have phantom <code>console.log</code> - or more specifically you&#39;ve no idea 
where it was happening?</p>
<p>I have. This tiny bit of code will help you identify <em>where</em> the logging is 
being called from. The nice thing is it works in the browser <em>and</em> in node.</p>
<p><small>Honourable mention: <a href="https://medium.com/@garychambers108/b3cc6fd0dafd">@garychambers108&#39;s</a> node.js better logging - I&#39;ve been wanting to do something about my rogue consoles and Gary&#39;s article kicked me in to action.</small></p>
<h2>Upgrading log to show <em>where</em> logging is happening</h2>
<pre><code>[&#39;log&#39;, &#39;warn&#39;].forEach(function(method) {
  var old = console[method];
  console[method] = function() {
    var stack = (new Error()).stack.split(/\n/);
    // Chrome includes a single &quot;Error&quot; line, FF doesn&#39;t.
    if (stack[0].indexOf(&#39;Error&#39;) === 0) {
      stack = stack.slice(1);
    }
    var args = [].slice.apply(arguments).concat([stack[1].trim()]);
    return old.apply(console, args);
  };
});</code></pre>
<p>If you include this as high as possible in your code base, all subsequent <code>console.log</code> (or <code>warn</code>) calls will include the line the call was made from:</p>
<p><img src="http://remysharp.com/images/where-logging.png" style="border: 1px solid #ccc; display: block; margin: 0 auto; max-width: 100%"></p>
<p>Here&#39;s a simplified demo: <a href="http://jsbin.com/wataw/2/edit?js,console"><a href="http://jsbin.com/wataw/2/edit?js,console">http://jsbin.com/wataw/2/edit?js,console</a></a></p>
<p>All the code is doing is rewriting the <code>log</code> and <code>warn</code> methods and appending the location of the call at the end of the log. Note that I&#39;m not overloading the <code>error</code> method because it comes with it&#39;s own stacktrace.</p>
<p>The location of the call is deduced using <code>new Error</code>, then looking at the <code>stack</code> property (disclaimer: this won&#39;t work in <em>all</em> browsers - I&#39;ve only tested in Firefox, Chrome and Node).</p>
<p>Simple. Now I can hunt down those rogue logs and remove them from the codebase.</p>
]]></content:encoded></item><item><title>On Chrome hiding URLs to protect users from phishing</title><guid isPermaLink="false">on-chrome-hiding-urls-to-protect-users-from-phishing</guid><link>http://remysharp.com/2014/05/04/on-chrome-hiding-urls-to-protect-users-from-phishing</link><pubDate>Sun, 04 May 2014 19:10:46 +0000</pubDate><description><![CDATA[Jake and Jeremy have posted about how chrome is experimenting with a way to protect users from phishing. Jake is pro the approach, Jeremy against. Read their posts: Jake&#39;s and Jeremy&#39;s.]]></description><content:encoded><![CDATA[
<p>Jake and Jeremy have posted about how chrome is experimenting with a way to protect users from phishing. Jake is pro the approach, Jeremy against. Read their posts: <a href="http://jakearchibald.com/2014/improving-the-url-bar/">Jake&#39;s</a> and <a href="http://adactio.com/journal/6779/">Jeremy&#39;s</a>.</p>
<p><em>Please note, this post is unedited – and written on a tablet!</em></p>
<p>What I&#39;m posting is a proposal for an alternative approach (that I couldn&#39;t fit, and didn&#39;t want to fit into 140 characters!).</p>
<p>Instead of hiding the URL entirely, take the lead from what exist now (the path is semi-opaque), <strong>but in addition the subdomain is truncated</strong> and dimmed the same way long paths are. </p>
<p>The point is to get the <em>actual domain</em> across to the visitor, so how about this for a solution:</p>
<p><img src="http://remysharp.com/images/jake-evil-better.png" alt="http://remysharp.com/images/jake-evil-better.png"></p>
<p>Note that the URL is shown in the browser tab (because in this example, there&#39;s no <code>title</code> element), this should also be used to highlight the actual domain, and not default to showing the full URL.</p>
<p>When compared to the current situation:</p>
<p><img src="http://remysharp.com/images/jake-evil.png" alt="http://remysharp.com/images/jake-evil.png"></p>
<p>The change (which I&#39;d expect across all Chrome browsers, i.e. mobile too) is:</p>
<ul>
<li>Semi-opaque pathname</li>
<li>Semi-opaque subdomains (cname)</li>
<li>Truncate long paths to ellipsis</li>
<li><strong>Truncate any preceding subdomains with ellipsis (with sensible defaults, like it would show <code>www</code> or perhaps the final subdomain fragment)</strong></li>
<li>When the <code>title</code> element is missing, match the text displayed in the tab title to the truncated URL shown in the URL bar.</li>
</ul>
<p>I&#39;ll note that most browsers already highlight the domain part of the URL, but the point I&#39;m trying to make with my proposed mockup, is that everything before the domain (the jakearchibald.com part), <strong>should be truncated <em>as well as</em> dimmed</strong>.</p>
<p>Perhaps this is a strong enough move to make clear to visitors exactly what URL they&#39;re on, whilst still communicating that they&#39;re visiting a specific URL and not just the root of the domain.</p>
]]></content:encoded></item><item><title>Feature based development</title><guid isPermaLink="false">feature-based-development</guid><link>http://remysharp.com/2014/03/17/feature-based-development</link><pubDate>Mon, 17 Mar 2014 17:14:35 +0000</pubDate><description><![CDATA[Recently we changed the way we were working on JS Bin. Instead of pushing new
features whenever it took my fancy - which could result in success or equally
some kind of breakage - we&#39;re now pushing new features under feature flags and
it&#39;s proving to be really quite powerful (and fun).]]></description><content:encoded><![CDATA[
<p>Recently we changed the way we were working on JS Bin. Instead of pushing new
features whenever it took my fancy - which could result in success or equally
some kind of breakage - we&#39;re now pushing new features under feature flags and
it&#39;s proving to be really quite powerful (and fun).</p>
<h2>feature-gateway</h2>
<p>The module is up on npm and can be installed via <code>npm install feature-gateway</code>. It&#39;s not specifically for Node (in that it&#39;ll work on the client side too), but if you put your feature test in the client, it&#39;s obviously easy for a visitor to hack.</p>
<p>It&#39;s got tests and it up on github under <a href="https://github.com/remy/feature-gateway">remy/feature-gateway</a> for anyone to learn from or use.</p>
<h2>Simple example</h2>
<p>The library I&#39;ve written is extremely simple (and purposely so). It&#39;s used in regular <code>if</code> conditionals, as part of Express routing and inside our Handlebar templates.</p>
<p>If we have a feature called &quot;ssl-login&quot; that we&#39;re testing, the router might look like this:</p>
<pre><code>app.get(&#39;/login&#39;, features.route(&#39;ssl-login&#39;), renderSecureLogin);
app.get(&#39;/login&#39;, showLogin); // the old way</code></pre>
<p>And an example in a Handlebars template to access the &quot;sandbox&quot; feature:</p>
<pre><code class="language-handlebars">{{#feature request &quot;sandbox&quot;}}
  &lt;button&gt;Launch sandbox&lt;/button&gt;
{{else}}
  &lt;a href=&quot;/...&quot;&gt;Find out about upcoming Sandbox feature&lt;/a&gt;
{{/feature}}</code></pre>
<p>Aside: I&#39;m not 100% happy with the template requiring the <code>request</code> object being passed, but it&#39;s neccessary right now (unless someone can answer my <a href="http://stackoverflow.com/questions/21972729/is-it-possible-to-bind-a-handlebars-helper-before-render-using-express-hbs">SO question</a>) - though I&#39;ve been told that Handlebars 2 might allow a way to bind the helper to objects.</p>
<p>There&#39;s more examples of actual usage in the <a href="https://github.com/remy/feature-gateway/blob/master/README.md">README</a> for the feature-gateway project.</p>
<h2>How the feature flag works</h2>
<p>The feature flag is a gateway to a part of functionality, that tests some particular value, and if true, the user has access to the feature.</p>
<p>The way JS Bin works is that all our feature tests accept the (http) request object. From here, since in our case, the user&#39;s session is also attached to the request object we can use a wide range of tests:</p>
<ul>
<li>Does the logged in user have a &quot;pro&quot; flag on their account?</li>
<li>Does the request include a specific cookie value?</li>
<li>Does the request come from a specific IP address or range?</li>
<li>Is the logged in user part of an alpha test group?</li>
</ul>
<h2>Two methods of implementation</h2>
<p>So far we&#39;ve used them for two specific uses. The first is simple: new features are wrapped in the feature test. For example: adding the ability to create private bins is <em>new</em> functionality.</p>
<p>The second is quite a bit more complicated: existing functionality is running side-by-side with functionality that&#39;s only accessible via a feature flag. For example <em>changing</em> the way the login &amp; register works requires that the old way still works, whilst the new way can be accessed via the feature flag. I&#39;ll be honest, this can get tricky.</p>
<h2>Continued development</h2>
<p>Feature flags seem to be working really well for us on JS Bin, and I&#39;d definitely recommend using them in some way if you can. The obvious next step is tying in some kind of analytics, then A/B testing and then I&#39;m sure more ideas will follow.</p>
]]></content:encoded></item><item><title>You're paying to speak</title><guid isPermaLink="false">youre-paying-to-speak</guid><link>http://remysharp.com/2014/03/07/youre-paying-to-speak</link><pubDate>Fri, 07 Mar 2014 16:19:02 +0000</pubDate><description><![CDATA[There are many, many new speakers coming to the web community with their stories and standing up on stage and sharing. I applaud them. It&#39;s a scary thing to stand on stage and share your ideas. And there are many, many hours of work that goes in to the presentations.
I&#39;m talking to people like me who speak for the love of sharing knowledge.
TL;DR If an event is not covering your expenses (travel &amp; hotel) then you are paying to speak at their event.]]></description><content:encoded><![CDATA[
<p>There are many, many new speakers coming to the web community with their stories and standing up on stage and sharing. I applaud them. It&#39;s a scary thing to stand on stage and share your ideas. And there are many, many hours of work that goes in to the presentations.</p>
<p>I&#39;m talking to people like me who speak for the love of sharing knowledge.</p>
<p><strong>TL;DR</strong> If an event is not covering your expenses (travel &amp; hotel) then <strong>you are paying to speak at their event</strong>.</p>
<h2>What it costs you</h2>
<ol>
<li>Your time working on slides when you could be working on project work</li>
<li>Your flight or train or taxi costs</li>
<li>Your hotel cost</li>
<li>Your time on the day at the event</li>
</ol>
<p>Yes, you might generate work during some awesome-high-fiving-network session. Really? Okay. Yes, you have a &quot;free ticket&quot;, but most new speakers I know have their head in their presentation until it&#39;s over.</p>
<p>So you&#39;re out of pocket. And for what?</p>
<h2>What costs them</h2>
<p>Well, nothing. In fact you&#39;re providing content. And you&#39;re doing more than that. You&#39;re filling up the speaker roster with fresh and new content that&#39;s likely never been seen before. You&#39;re also auditioning for them, if you&#39;re good, they&#39;ll want you back, and their audience will have seen that you&#39;re good and buy more tickets to their event.</p>
<p>I know Flash on the Beach/Reason used this last &quot;audition&quot; technique, but in a positive way (to be very, very clear: Reasons is good, they do it right). They called it the Lift Pitch. 5 minutes (or 2 minutes this year) to get your idea across. Audience votes on the best one, and that potential speakers is invited back the next year to speak, and they&#39;re paid like every other speaker.</p>
<p>Then there&#39;s the video that they&#39;ll release, which is more content for them, branded and perpetuating their brand. That <em>you</em> gave them, at your own expense.</p>
<h2>A free ticket?</h2>
<p>It seems only the big events that do this kind of thing. And with big events, come big venues.</p>
<p>By comparison, Full Frontal has 278 seats. No more, no less. So free tickets aren&#39;t something I give away willingly (one of my policies is that all previous years speakers are given a free ticket to the following year). So it <em>costs</em> me, the organiser, to give away a free ticket.</p>
<p>Now compare to Future Of, they have anything from 800 person capacity (based on it being in The Brewery again). If they sell out in minutes (or even days) then a free ticket has a high value. But they don&#39;t. A free ticket is worth near to nothing (<a href="#comment-607594">please also take a minute to read Lou&#39;s reply—the conference producer for Future Insights</a>).</p>
<h2>Wouldn&#39;t they be out of pocket with so many speakers?</h2>
<p>That&#39;s what a budget is for - which comes from ticket sales and sponsorship agreements. <strong>It is part of their budget because without a speaker, they have no content to sell</strong>. The answer is no, they would not be out of pocket.</p>
<h2>What do I want?</h2>
<p>Dear event: treat your content providers with dignity. At the absolute least, pay their expenses. Indeed, <a href="http://www.andybudd.com/archives/2013/08/paying_speakers_is_better_for_everybody/">they should be paid too</a>.</p>
<h2>Which events are doing this?</h2>
<p>So here&#39;s where I want your help. I&#39;m happy to list these events, and if you know (for absolute sure) that there&#39;s an event making you pay to speak, then comment (anonymously if you want), post me a tweet or email me (remy at remysharp), and I&#39;ll add it to a list here.</p>
<p>If you&#39;re an organiser of one of these events or work for one of these companies, please get in touch if this is wrong or you&#39;ve fixed your mistake - I&#39;ll happily remove any event from this list.</p>
<ul>
<li>Future Insights and the Future of Web Design (et al) don&#39;t cover most of their rising stars&#39; costs</li>
<li>SxSWi don&#39;t cover the vast majority of speakers and panelists</li>
<li>Webconf Riga</li>
<li>Drupal conf</li>
<li>The anonymous event that <a href="https://gist.github.com/csswizardry/d1bd31e3ada9f5f5a6a6">approached Harry Roberts</a></li>
<li>FITC</li>
<li>Fluent</li>
</ul>
<p><strong>Important:</strong> there are always the odd exceptions to these, as you&#39;ll read the comments below, but it&#39;s the default policy that I believe should be changed and part of the budget for profit and non-profit.</p>
<p><strong>Please also read the comments</strong> below fully as they include details of how some events have changed their policies over the years (like Velocity) and tells of personal experiences.</p>
]]></content:encoded></item><item><title>Hack failing: cheat</title><guid isPermaLink="false">cheat</guid><link>http://remysharp.com/2014/01/27/cheat</link><pubDate>Mon, 27 Jan 2014 14:00:45 +0000</pubDate><description><![CDATA[It&#39;s January and it&#39;s likely you&#39;ve got a New Year&#39;s resolution burning away. Forming new habits takes 66 days. Whether it&#39;s a diet change, lifestyle change, starting a podcast, diary, blog, photo journal or some other goal. 66 days is a long time to do something that is different from your normal routine.
So the secret I&#39;ve discovered, if you couldn&#39;t guess, is to cheat. It&#39;s the secret to all success. And there&#39;s logic behind this, so stick with me.
Success is rather binary, so the moment that you fail to post your weekly podcast is the first big failure. You&#39;ve let your audience down. The second time you miss it, you&#39;re pretty much dead and you may well have already considered &quot;what&#39;s the point in continuing?&quot;. I&#39;ve certainly felt the same when I said I&#39;d stop drinking, or the previous times I&#39;ve &quot;started&quot; going to the gym.
There&#39;re two things to consider:

Make the goal extremely easy.
Plan to fail.

Making the goal easy allows you to build up later. If you aim to publish every two months instead of every month. Or even less, maybe once a quarter. Then if you&#39;re feeling ambitious you either record and bank a podcast for another date, or release a special episode.
The same with the gym. Aim low, and keep it simple. If once a week is a change to your life, start there, don&#39;t start with 5 times a week.
Planning to fail is incredibly easy and equally powerful. I&#39;ll do this in general conversation where, ahead of explaining something I&#39;m not confident of, I&#39;ll pre-emptively apologise for mistakes. I&#39;ve planned for failing to explain something.
If your goal is a new diet or to quit drinking or quit smoking (or quit anything), plan to fall off the wagon. Because when you don&#39;t plan to fail, when you fail, you&#39;ve failed, and that&#39;s it, you might as well not bother. But if you do plan to fail, when you fail, it&#39;s no big deal, it was part of the plan. It was your intention to fail. So you&#39;re still on track, and you&#39;re still making positive progress.
So cheat.
Don&#39;t make it hard to achieve, make it hard to give up.
Plan to fail. Plan to cheat.
Reposted from The Pastry Box Project]]></description><content:encoded><![CDATA[
<p>It&#39;s January and it&#39;s likely you&#39;ve got a New Year&#39;s resolution burning away. Forming new habits takes <a href="http://www.telegraph.co.uk/health/healthnews/5857845/It-takes-66-days-to-form-a-habit.html">66 days</a>. Whether it&#39;s a diet change, lifestyle change, starting a podcast, diary, blog, photo journal or some other goal. 66 days is a long time to do something that is different from your normal routine.</p>
<p>So the secret I&#39;ve discovered, if you couldn&#39;t guess, is to cheat. It&#39;s the secret to all success. And there&#39;s logic behind this, so stick with me.</p>
<p>Success is rather binary, so the moment that you fail to post your weekly podcast is the first big failure. You&#39;ve let your audience down. The second time you miss it, you&#39;re pretty much dead and you may well have already considered &quot;what&#39;s the point in continuing?&quot;. I&#39;ve certainly felt the same when I said I&#39;d stop drinking, or the previous times I&#39;ve &quot;started&quot; going to the gym.</p>
<p>There&#39;re two things to consider:</p>
<ol>
<li>Make the goal extremely easy.</li>
<li>Plan to fail.</li>
</ol>
<p>Making the goal easy allows you to build up later. If you aim to publish every two months instead of every month. Or even less, maybe once a quarter. Then if you&#39;re feeling ambitious you either record and bank a podcast for another date, or release a special episode.</p>
<p>The same with the gym. Aim low, and keep it simple. If once a week is a change to your life, start there, don&#39;t start with 5 times a week.</p>
<p>Planning to fail is incredibly easy and equally powerful. I&#39;ll do this in general conversation where, ahead of explaining something I&#39;m not confident of, I&#39;ll pre-emptively apologise for mistakes. I&#39;ve <em>planned for failing</em> to explain something.</p>
<p>If your goal is a new diet or to quit drinking or quit smoking (or quit anything), <em>plan to fall off the wagon</em>. Because when you don&#39;t plan to fail, when you fail, you&#39;ve failed, and that&#39;s it, you might as well not bother. But if you do plan to fail, when you fail, it&#39;s no big deal, it was part of the plan. It was your intention to fail. So you&#39;re still on track, and you&#39;re still making <em>positive</em> progress.</p>
<p><em>So cheat.</em></p>
<p>Don&#39;t make it hard to achieve, make it hard to give up.</p>
<p><strong>Plan to fail. Plan to cheat.</strong></p>
<p><small>Reposted from <a href="http://the-pastry-box-project.net/remy-sharp/2014-january-3">The Pastry Box Project</a></small></p>
]]></content:encoded></item><item><title>nodemon 1.0</title><guid isPermaLink="false">nodemon-1-0</guid><link>http://remysharp.com/2014/01/20/nodemon-1-0</link><pubDate>Mon, 20 Jan 2014 13:00:02 +0000</pubDate><description><![CDATA[For the past few months I&#39;ve been working on a re-factor of nodemon. The two main drivers were to make the code base easier to maintain and to make nodemon more extendible.
Nodemon is a command line utility to detect file changes and restart your application. Typically node apps, but it can restart any kind of program, ruby, python, make commands and more.
A bit of background
Originally nodemon was a simple one file script, only a few hundred lines, if that. As more people used it in different environments for completely different things, more code was added (to properly support windows for instance), and more people committed changes.
I came across Michael Brooks and Fil Maj&#39;s slides from jsconf.us 2013 on building a better cli and though I hadn&#39;t seen the talk, I got a lot of inspiration from the slides, and went ahead to try to break nodemon up in to much, much smaller components. This would make it (I hoped) easier to maintain, but also to narrow down where bugs were occurring.
It also allowed me the opportunity to write tests. Something I&#39;ve always been poor at doing in the first place, so this was a great excuse to ensure they were in place from the get go.
It took about 4 months of snatching a few hours in the evening here and there, but eventually my pull request was ready to be merged, and 1.0.0 went live on 29-Dec 2013.
What&#39;s new
A lot of bugs have been closed, though it&#39;s likely these bugs didn&#39;t affect you, because nodemon is used in such a wide range of environments, weird things would come up.
The headlines are:

global and local configs
exec map
requireable
tests
auto update notification
nodemon.io site, because...well, just because.
sweet logo (and amazing contributions from the community) by @aesthetics-io

More control over your config
Nodemon still supports the old plain text .nodemonignore file, but now firstly looks for a nodemon.json file in your present working directory, then for the same file in your home directory. Since the config file is JSON, you can preconfigure nodemon with any command you use on the CLI.
The old config file only allowed you to specific what you wanted to ignore, but now you can define what you want to ignore and what you want to watch.
If you always ignore public/* in your project and want verbose on, as I do, then you can have a global nodemon.json that states just that:
{
  "ignore": "public/*",
  "verbose": true
}

And if some project is getting too verbose for my liking, I can just use the CLI to quiet it down, and the CLI takes priority:
$ nodemon -q

Now it&#39;ll ignore public/ but not echo out any nodemon messages.
Out of the box, nodemon will also ignore everything in .git and node_modules/**/node_modules, but of course you can add to that or change it yourself. More defaults can be found in the project repo.
&quot;execMap&quot;
This feature allows you to predefine what application runs what extension, and if it were me, I&#39;d put this in the global nodemon.json so it&#39;s always used.
By default, the exec map includes support for python and ruby:
{
  "execMap": {
    "py": "python",
    "rb": "ruby"
  }
}

If you&#39;re like some users on the edge of the future and want to always use node in harmony mode, then that&#39;s simple:
{
  "execMap": {
    "js": "node --harmony"
    "py": "python",
    "rb": "ruby"
  }
}

Now nodemon will fire up .js files with node --harmony. This means it&#39;s super easy to make nodemon run with any application from a single global config. I&#39;m also open to suggestions for further exec map support (so long as it&#39;s cross platform), so do get in touch if you have an idea.
Requireable
There&#39;s a nodemon grunt plugin by Chris Wren, but he had to spawn nodemon from his code. I wanted it so that he could include nodemon directly and have more control.
So nodemon now supports being required in as a module. It&#39;s pretty cool :)
It also means that Chris&#39; grunt plugin can make some cool integrations (if nodemon detects a restart, his plugin will trigger a browser reload using live reload).
It also means that there&#39;s already a gulp plugin using nodemon.
Required nodemon gives you a way of communicating through events. Everything ranging from when nodemon restarts (which includes an array of filenames that triggered the reload), to nodemon&#39;s logging, to the spawned script&#39;s stdout.
Tests
I&#39;m using Mocha for tests and wear the Travis badge with pride on pass (and less pride on fail!).
There&#39;s just over 100 tests for nodemon right now, ranging from small internal tests (like CLI parse testing) to tests that forks nodemon, that in turn spawn a web server and force crashes to ensure everything stops and starts correctly.
It&#39;s actually quite tricky to get the timing right (so the forked tests tend to be littered with setTimeout to make sure we have clear delays between start up and touching files).
The compound that with different behaviour on Mac (which I&#39;m working from), on Linux and on Windows, and Travis runs on Linux so I had fun switching between 100% tests passing on my mac to jumping inside of vagrant to figure out why Linux wasn&#39;t passing 100%. Definitely a few lessons learnt (which I&#39;ve quickly forgotten now they pass!).
Update notification
Nodemon original had zero dependencies, which I was proud of (not sure why), but I came across update-notifier which mostly works, but there&#39;s issues I&#39;ve raised and not heard back on (which worries me a little), but I do I know that users have been notified successfully of updates (at time of writing, nodemon is already 1.0.12).
So I bit the bullet and took on a dependency, and I think it&#39;s paying off - people are keeping with the most bug free version of nodemon.
Sweet logo
First, I was so amazed and impressed by user contributions to logo ideas for nodemon. In the end, you folk (or at least people on twitter and github) voted for this one below (which I also like - along with a few others), and I reckon it could make a pretty cool sticker for the laptop. What do you think?

So get updating:
npm install -g nodemon@latest]]></description><content:encoded><![CDATA[
<p>For the past few months I&#39;ve been working on a re-factor of <a href="http://github.com/remy/nodemon">nodemon</a>. The two main drivers were to make the code base easier to maintain and to make nodemon more extendible.</p>
<p>Nodemon is a command line utility to detect file changes and restart your application. Typically node apps, but it can restart any kind of program, ruby, python, make commands and more.</p>
<h2>A bit of background</h2>
<p>Originally nodemon was a simple one file script, only a few hundred lines, if that. As more people used it in different environments for completely different things, more code was added (to properly support windows for instance), and more people committed changes.</p>
<p>I came across <a href="https://github.com/mwbrooks">Michael Brooks</a> and <a href="https://github.com/filmaj">Fil Maj</a>&#39;s slides from jsconf.us 2013 on <a href="http://michaelbrooks.ca/deck/2013-node-brigade/">building a better cli</a> and though I hadn&#39;t seen the talk, I got a lot of inspiration from the slides, and went ahead to try to break nodemon up in to much, much smaller components. This would make it (I hoped) easier to maintain, but also to narrow down where bugs were occurring.</p>
<p>It also allowed me the opportunity to write tests. Something I&#39;ve always been poor at doing in the first place, so this was a great excuse to ensure they were in place from the get go.</p>
<p>It took about 4 months of snatching a few hours in the evening here and there, but eventually my <a href="https://github.com/remy/nodemon/pull/200">pull request</a> was ready to be merged, and 1.0.0 went <a href="https://github.com/remy/nodemon/compare/v0.7.10...v1.0.0">live on 29-Dec 2013</a>.</p>
<h2>What&#39;s new</h2>
<p>A lot of bugs have been closed, though it&#39;s likely these bugs didn&#39;t affect you, because nodemon is used in such a wide range of environments, weird things would come up.</p>
<p>The headlines are:</p>
<ul>
<li>global and local configs</li>
<li>exec map</li>
<li>requireable</li>
<li>tests</li>
<li>auto update notification</li>
<li><a href="http://nodemon.io">nodemon.io</a> site, because...well, just because.</li>
<li>sweet logo (and <a href="https://github.com/remy/nodemon/issues/217">amazing contributions</a> from the community) by <a href="https://github.com/aesthetics-io">@aesthetics-io</a></li>
</ul>
<h2>More control over your config</h2>
<p>Nodemon still supports the old plain text <code>.nodemonignore</code> file, but now firstly looks for a <code>nodemon.json</code> file in your present working directory, then for the same file in your home directory. Since the config file is JSON, you can preconfigure nodemon with any command you use on the CLI.</p>
<p>The old config file only allowed you to specific what you wanted to ignore, but now you can define what you want to ignore <em>and</em> what you want to <em>watch</em>.</p>
<p>If you <em>always</em> ignore <code>public/*</code> in your project and want verbose on, as I do, then you can have a global <code>nodemon.json</code> that states just that:</p>
<pre><code>{
  "ignore": "public/*",
  "verbose": true
}</code></pre>

<p>And if some project is getting too verbose for my liking, I can just use the CLI to quiet it down, and the CLI takes priority:</p>
<pre><code>$ nodemon -q</code></pre>

<p>Now it&#39;ll ignore <code>public/</code> but not echo out any nodemon messages.</p>
<p>Out of the box, nodemon will also ignore everything in <code>.git</code> and <code>node_modules/**/node_modules</code>, but of course you can add to that or change it yourself. More <a href="https://github.com/remy/nodemon/blob/master/lib/config/defaults.js">defaults can be found</a> in the project repo.</p>
<h2>&quot;execMap&quot;</h2>
<p>This feature allows you to predefine what application runs what extension, and if it were me, I&#39;d put this in the global <code>nodemon.json</code> so it&#39;s always used.</p>
<p>By default, the exec map includes support for python and ruby:</p>
<pre><code>{
  "execMap": {
    "py": "python",
    "rb": "ruby"
  }
}</code></pre>

<p>If you&#39;re like some users on the edge of the future and want to always use node in harmony mode, then that&#39;s simple:</p>
<pre><code>{
  "execMap": {
    "js": "node --harmony"
    "py": "python",
    "rb": "ruby"
  }
}</code></pre>

<p>Now nodemon will fire up .js files with <code>node --harmony</code>. This means it&#39;s super easy to make nodemon run with any application from a single global config. I&#39;m also <a href="https://github.com/remy/nodemon/blob/master/lib/config/defaults.js#L7">open to suggestions</a> for further exec map support (so long as it&#39;s cross platform), so do get in touch if you have an idea.</p>
<h2>Requireable</h2>
<p>There&#39;s a nodemon <a href="https://github.com/ChrisWren/grunt-nodemon">grunt plugin</a> by Chris Wren, but he had to spawn nodemon from his code. I wanted it so that he could include nodemon directly and have more control.</p>
<p>So nodemon now supports being required in as a module. It&#39;s pretty cool :)</p>
<p>It also means that Chris&#39; grunt plugin can make <a href="https://github.com/ChrisWren/grunt-nodemon#advanced-usage">some cool integrations</a> (if nodemon detects a restart, his plugin will trigger a browser reload using live reload).</p>
<p>It also means that there&#39;s already a <a href="https://npmjs.org/package/gulp-nodemon">gulp plugin</a> using nodemon.</p>
<p>Required nodemon gives you a way of communicating through <a href="https://github.com/remy/nodemon/blob/master/doc/events.md">events</a>. Everything ranging from when nodemon restarts (which includes an array of filenames that triggered the reload), to nodemon&#39;s logging, to the spawned script&#39;s stdout.</p>
<h2>Tests</h2>
<p>I&#39;m using Mocha for tests and wear the <a href="https://travis-ci.org/remy/nodemon">Travis badge</a> with pride on pass (and less pride on fail!).</p>
<p>There&#39;s just over <a href="https://travis-ci.org/remy/nodemon/jobs/17161118">100 tests</a> for nodemon right now, ranging from small internal tests (like CLI parse testing) to tests that forks nodemon, that in turn spawn a web server and force crashes to ensure everything stops and starts correctly.</p>
<p>It&#39;s actually quite tricky to get the timing right (so the forked tests tend to be littered with <code>setTimeout</code> to make sure we have clear delays between start up and touching files).</p>
<p>The compound that with different behaviour on Mac (which I&#39;m working from), on Linux and on Windows, and Travis runs on Linux so I had fun switching between 100% tests passing on my mac to jumping inside of vagrant to figure out why Linux wasn&#39;t passing 100%. Definitely a few lessons learnt (which I&#39;ve quickly forgotten now they pass!).</p>
<h2>Update notification</h2>
<p>Nodemon original had zero dependencies, which I was proud of (not sure why), but I came across <a href="https://github.com/yeoman/update-notifier/">update-notifier</a> which <em>mostly</em> works, but there&#39;s <a href="https://github.com/yeoman/update-notifier/issues">issues</a> I&#39;ve raised and not heard back on (which worries me a little), but I do I know that users have been notified successfully of updates (at time of writing, nodemon is already 1.0.12).</p>
<p>So I bit the bullet and took on a dependency, and <em>I think</em> it&#39;s paying off - people are keeping with the most bug free version of nodemon.</p>
<h2>Sweet logo</h2>
<p>First, I was so amazed and impressed by user contributions to logo ideas for nodemon. In the end, you folk (or at least people on twitter and github) voted for this one below (which I also like - along with a few others), and I reckon it could make a pretty cool sticker for the laptop. What do you think?</p>
<p><img style="display: block; margin: 0 auto; max-width: 100%;" src="http://remysharp.com/images/nodemon.png"></p>
<p>So get updating:</p>
<pre><code>npm install -g nodemon@latest</code></pre>]]></content:encoded></item><item><title>My 2013</title><guid isPermaLink="false">my-2013</guid><link>http://remysharp.com/2013/12/31/my-2013</link><pubDate>Tue, 31 Dec 2013 11:43:10 +0000</pubDate><description><![CDATA[As I&#39;ve said before, this post is
entirely for me to be able to look back at my year and remember what the
highlights were (and this year is a very me-me-me post!). Equally, I&#39;m honoured that you&#39;re reading this and I hope you
make it to the end (though I appologise in advance for the pictures, there&#39;s
much more skin than my usual blog posts!).]]></description><content:encoded><![CDATA[
<p>As I&#39;ve <a href="http://remysharp.com/tag/newyear/">said before</a>, this post is
entirely for me to be able to look back at my year and remember what the
highlights were (and this year is a very me-me-me post!). Equally, I&#39;m honoured that you&#39;re reading this and I hope you
make it to the end (though I appologise in advance for the pictures, there&#39;s
much more skin than my usual blog posts!).</p>
<h2>Professional</h2>
<p>My <a href="http://leftlogic.com">business</a> is (actually) 7 years old and it&#39;s been slow
to grow (entirely my fault/design). But even though the rest of the world seems
like it&#39;s in a recession, it also seems like the web industry is doing just fine
in it&#39;s little bubble, and as is Left Logic. Business is split between agency
work, <a href="http://leftlogic.com/training">training</a> and the conference, <a href="http://full-frontal.org">Full Frontal</a>.</p>
<h3>Business</h3>
<p>It&#39;s been all change on the dev side of Left Logic. <a href="https://twitter.com/binarytales">Jon&#39;s</a> gone full time freelance and <a href="https://twitter.com/phuunet">Tom</a> got snapped up
by Twitter (to work on Tweetdeck in London).</p>
<p>But through hiring, Left Logic now has <a href="http://twitter.com/fabienallouis">Fabien O&#39;Carroll</a> joining at the very start of January and I&#39;m <a href="http://leftlogic.com/hiring">still hiring</a> to find a potential second position. What I&#39;m particularly excited about is that I&#39;ll be focusing both mine and Fabien&#39;s time entirely on <a href="http://jsbin.com">JS Bin</a> to see if I can make JS Bin self sustaining.</p>
<h3>JS Bin</h3>
<p>JS Bin turned <a href="http://remysharp.com/2013/08/14/jsbin-5th-birthday/">5 years old</a> this September, and this is when I decided that I want to try to make it run itself.
There&#39;s many issue opens (both for bugs and features) but also my own vision.</p>
<p>So I&#39;m working with <a href="http://twitter.com/yandle">Danny Hope</a> (who&#39;s worked on the
UX on JS Bin for around 4 years) and we (Left Logic) will be investing lots of
time and resource into seeing the vision through.</p>
<p>The sustainability will come through pro accounts, so look out for that aiming
to launch at the start of February.</p>
<h3>Speaking</h3>
<p><img class="withcredit" src="http://remysharp.com/images/2013-speaking.jpg?1" title="Photo by Marc Thiele"><span class="credit">Photo by Marc Thiele</span></p>
<p>I had the honour of being invited <em>back</em> to jsconf.us to speak and only
spoke at a total of 10 events this year. Which is good as I&#39;m down on my 12 the
year before and am trying to actively reduce this in favour of spending more time
at home/in the UK.</p>
<p>My proudest speaking gig (if there&#39;s such a thing) was being asked to <a href="http://lanyrd.com/2013/guest-lecturer-by-remy-sharp/">share my
experience</a> (slides &amp; video)
with students at Portsmouth University (and was able to <a href="http://webeyedea.info/wp/thank-you-remy/">give the talk again</a> at Tower Hamlets College). For me personally and professionally, it&#39;s
pretty daunting to speak to final year students, about to fly the coop, offering
opinons about avoiding a &quot;real job&quot; and flying solo - but it was a really
positive experience all round.</p>
<h3>Full Frontal</h3>
<p><img class="withcredit" src="http://remysharp.com/images/2013-full-frontal.jpg"><span class="credit">Photo by Dan Govan</span></p>
<p>This year we sold out in a record 11 minutes, whilst also causing a DDoS attack
on our ticketing system! As a result, we created <a href="http://2013.full-frontal.org/sideview">Side View</a>
which was also a huge success.</p>
<p>Full Frontal was made up of careful content curation, whilst Side View (though
also carefully curated) was made up of amazing proposals that didn&#39;t quite make
it through to Full Frontal. Basically I got to have my cake <em>and</em> eat it.</p>
<p>Please do check out the <a href="http://www.youtube.com/playlist?list=PLXmT1r4krsTrjhwBWKLzxdNjb9ZCb_cFI">videos on youtube</a> (both Full Frontal and Side View will be available).</p>
<h3>Other projects and things to be chuffed with</h3>
<p>Left Logic <strong>supported <a href="https://www.codeclub.org.uk/">CodeClub</a></strong>, although only in
a small way (probably) compared to bigger companies, I was able to donate some
cash for a couple of different needs. I&#39;m a huge fan of what CodeClub does, and
truly think what they&#39;re doing is an inspiration to us all. Go find out what
they&#39;re doing, and even volunteering if you can.</p>
<p>I paid for a <strong><a href="http://remysharp.com/2013/03/22/id-like-to-send-you-to-the-bacon-conference/">ticket for a &quot;deserving&quot;</a> young individual to attend the Bacon Conference</strong>, as I was
asked (in a rather awesome video - in the link previously), but none of my team
could make it, I asked the public to suggest someone, and I&#39;d random select an
individual to pay for their ticket. I think I&#39;d like to do something similar
again next year.</p>
<p><img class="withcredit" src="http://remysharp.com/images/2013-cern.jpg?1"><span class="credit dark">Photo by Anna Pantelia/CERN</span></p>
<p>I was asked to <a href="http://home.web.cern.ch/about/updates/2013/09/dream-team-web-developers-recreate-line-mode-browser">join a team</a> <strong>going to CERN to re-create the <a href="http://line-mode.cern.ch/">first line-mode web browser</a></strong>. It was an amazing experience both in the project
that we had to build in the two days that we were there, but also the sheer scale
of the projects going on at CERN. Because I was so focused on our deadline, it
didn&#39;t really sink in until we returned back home, but still a very proud
<a href="http://first-website.web.cern.ch/blog/lmb-hack-days-remy-sharp">moment for me</a>
(this is the interview link).</p>
<p><strong><a href="http://thenodefirm.com/blog/2013/10/21/remy-sharp-partner/">Joining the NodeFirm</a></strong>. A meaty collection of individuals that are serving Node based projects, so it&#39;s a real
honour to be part of the Firm. It doesn&#39;t change how Left Logic is run, but
simply that I&#39;m a resource to the Firm and that collective effort goes in to the
training material supplied.</p>
<p>As well as a few project releases:</p>
<ul>
<li><a href="http://nodemon.io">nodemon</a> - complete rewrite and accompanying site</li>
<li><a href="http://5minfork.com">5minfork</a> - the 10 minute email for github repos</li>
<li><a href="http://headshots.leftlogic.com">Head Shots</a> - a WebRTC project built for Google IO</li>
<li><a href="http://tentoring.com">Tentoring</a> - a day hack with <a href="http://twitter.com/stef">Stef Lewandowski</a> winning (one of two) best projects during <a href="http://dolectures.com/">Do Startups</a></li>
<li><a href="https://github.com/remy/min.js">min.js</a> and <a href="https://github.com/remy/bind">bind.js</a> - microlibraries to do selectors and events, and object to DOM binding (respectively)</li>
</ul>
<p>Finally, <a href="http://brucelawson.co.uk">Bruce</a> and I are working to release <a href="http://introducinghtml5.com">Introducing HTML5</a> as a free online book early in 2014. We&#39;ve got about 5 chapters transcribed, and I&#39;ll start releasing it as soon as there&#39;s some design in place.</p>
<h2>Personal</h2>
<p>This year has been quite a big personal (positive) year for me. The biggest
thing has been my health. Since Tia was born in 2010, I never returned to the gym
(where I was doing spin classes at least twice a week). So my 2013 new years
resolution was to quit the gym (I&#39;d been paying for over 2 years having never
gone). The second part that I wasn&#39;t telling people, was to join immediately,
and return to the gym (one that was close to work and walking distance).</p>
<p>This is the difference in my face in the last year:</p>
<p><img src="http://farm6.staticflickr.com/5485/11605407676_c06bd6c44e_b_d.jpg" alt="http://farm6.staticflickr.com/5485/11605407676_c06bd6c44e_b_d.jpg"></p>
<p>My BMI is always high (read: obese) because I&#39;m 5&#39;6 and of stocky build, so I&#39;ve
generally ignored it, but I bought a set of fitbit
<a href="http://www.fitbit.com/uk/aria">Aria scales</a>, and it was telling me that <strong>my body
fat was 30%: which <em>is</em> obese</strong>. This isn&#39;t the kind of obese that has trouble
getting out of bed. This is &quot;obese&quot; your heart could give out and you could
leave your young son without a father to grow up with. I needed to change. At
peak, I was 14 stone and 30% fat, and horribly embarrassed about my body since...
I don&#39;t know, around age 22!</p>
<p>But I&#39;ve long known that going to the gym wasn&#39;t enough, my diet had to change
too. I&#39;d read a lot around the Paleo diet, and took inspiration from that. From
February 2013 onwards my new diet (note I was not <em>on a diet</em>) was simple:
<em>no wheat or dairy</em>. And cheat. Always, always, cheat. I&#39;ll come back to this.</p>
<p>My <strong>aim was to get my body fat to 25%</strong> (0.1% above &quot;average&quot;) by May (because jsconf.us was in May, and I knew it was in the sun where I&#39;d hope not feel my usual horrible embarrassment
about taking my shirt off in public). Anything beyond that was based on relative
success.</p>
<p>Lunch times became impossible, especially after finding my favourite sandwich
shop only 6 months before. In the UK, if you&#39;re not having sandwiches for lunch,
it&#39;s likely you&#39;re not eating lunch! It took about 2 months for the craving to
end (it turns out it might be linked to the <a href="http://www.telegraph.co.uk/health/healthnews/5857845/It-takes-66-days-to-form-a-habit.html">66 days to form a new habit</a>).</p>
<p>At the same time, I joined a gym in Brighton (LA Fitness, the gym is generally
rubbish, but it&#39;s something better than nothing), and my rules were: 3 days a week, first thing in the morning (since I couldn&#39;t find any other time in the day), lift heavy,
and always increase the weight. I didn&#39;t really know what I was doing, but I was making gains.
I&#39;ll come back to what I focused on and what I do now.</p>
<p>By 22 April I had my body fat down to 26.5% and I decided to get a personal trainer.
The combined cost of the gym and a PT meant more outgoings, but then this is
money I was investing in my heath.</p>
<p>By May 29 (jsconf deadline) <strong>my body fat was 24%</strong> (I was now out of the obese
category and in to &quot;average&quot;). I was very, <em>very</em> proud of myself.</p>
<p>I set a new goal: 17% by my birthday (September).</p>
<p>I made it. <em>Just</em>. <strong>17.9% on September 7th.</strong></p>
<p>I&#39;ve had a bunch of travel and conferences (where drinking seems to always
happen, which messes with my diet), so I&#39;ve come back up from 17%, and by the end
of the year not managed to get back to (yet). But that&#39;s okay. I&#39;ve finished my
year on <strong>19% body fat</strong>. In the year, and at peak, I&#39;ve lost 25lbs of fat (that&#39;s just over
10kg of lard) (this is a chart of fat mass over the last year):</p>
<p><img src="http://remysharp.com/images/1y.png?1" alt="http://remysharp.com/images/1y.png?1"></p>
<p>And yes, here come my obligatory semi-nude pictures (trust me, they&#39;re not too bad, and the &quot;good&quot; picture has more favourable lighting, but there&#39;s no photoshop going on - I promise!). It&#39;s useful, ne-powerful, to capture these, because over the months I questioned whether this was worth it, is the work I&#39;m doing really making any difference? And honestly, it&#39;s hard to capture that first chubby picture (and in fact I wish I had taken one from the very start, but this was from March - a month in) because it&#39;s not how I saw myself in my mind&#39;s eye. Once I had it though, I had a benchmark to measure change against. I&#39;d keep taking the pictures around every other month, and I could <em>see</em> the difference which is a big confidence boost that things are doing well.</p>
<p><img src="http://farm4.staticflickr.com/3714/11604646335_6cd6e3780e_b_d.jpg" alt="http://farm4.staticflickr.com/3714/11604646335_6cd6e3780e_b_d.jpg"></p>
<p>I&#39;ve still got a little further to go in my goals, but I&#39;m happy with my progress.
I feel healthy and strong for my son. I love that I can throw him around when we
play, and I don&#39;t feel out of breath.</p>
<p>I&#39;ve lost access to my entire wardrobe because I&#39;ve dropped a t-shirt size (from
large to medium) and my trousers from (up to) 38 inch to 32 inch (edging on 30 -
the size I was when I was 18!). The biggest goal for 2014 is to ensure that I
continue these new routines in my life - something I feel won&#39;t be too hard to
achieve.</p>
<h3>A few important lessons I learnt</h3>
<p><strong>Cheat.</strong> When I went to the gym earlier in my youth, if I missed the gym, I had
failed. If you fail, then you start from scratch again, and that&#39;s hard and
disheartening so I was more prone to giving up.</p>
<p>By cheating, and planning to cheat, I was able to fail without really failing.</p>
<p>If I had no choice in food, I could say today was a cheat day, so I could have
milk or cookies or pizza or ice cream, or <a href="http://www.flickr.com/photos/remysharp/9437135405/">all of these in a day</a>. If I missed the gym because I was away or was
ill (or hurt), it was allowable, and I hadn&#39;t failed. This meant that it wasn&#39;t
a slip up or mistake, simply: part of the plan.</p>
<p><strong>Diet is 70%.</strong> Without a healthy diet I wouldn&#39;t have made the gains I did. In
fact I know (because I tested this with Julie) that even <em>without</em> the gym, I
would have made good process entirely on diet change. But it&#39;s super important
that the food isn&#39;t unpleasant. I&#39;m not a believer in the types of routines that
can&#39;t be sustained (for me) like fasting. I&#39;ve heard of some people who use this
technique effectively, but really dislike those days. For me, diet change is
something that needs to be something that I can enjoy, and is in place in 10
years to come. No wheat and dairy is doable for me. I&#39;ve also naturally cut down
on drinking (which frankly I&#39;ve always been pretty rubbish at anyway).</p>
<p><strong>Strength training is all I need.</strong> Using compound lifts and simple routines
gets me a long way. I&#39;m using the <a href="http://stronglifts.com/stronglifts-5x5-beginner-strength-training-program/">5x5</a> routine right now, and with the PT was following strength
training routines. I get all the cardio anyone would need from the lifting I do.</p>
<p>My routine (currently today) consists of squat (115kg), deadlift (140kg), bench press (75kg), bent over row (80kg) and overhead press (45kg) - and that&#39;s <em>it</em>. Each successful
5x5 the weight is increased by 2.5kg.</p>
<p><strong>I faint when blood is taken!</strong> I decided to get a full blood analysis done to
try to understand what the make up was (WRT testosterone, cortisol, etc). They
were supposed to take 5 vials. They managed 3 before I completely blacked out!
My first time every fainting, and definitely an experience to remember!</p>
<h2>Our family</h2>
<p>Finally, and most importantly and excitedly, we&#39;re expecting a little girl at the beginning of May 2014. We only just announced
this to the &quot;public&quot; via twitter and it&#39;s been a very different pregnancy so far.</p>
<p>It&#39;s still a very emotional and a lot of complicated feelings - but this will
always be true after losing Tia. None the less, we&#39;re all excited and we&#39;re both
looking forward to her arrival in 2014.</p>
<p><img style="width: 50%;" src="http://farm4.staticflickr.com/3812/11606101694_9f866be1bb_o_d.jpg"><img style="width: 50%;" src="http://farm8.staticflickr.com/7414/11583719974_dfb446cc90_o_d.jpg"></p>
]]></content:encoded></item><item><title>Using watches in my devtools workflow</title><guid isPermaLink="false">using-watches-in-my-devtools-workflow</guid><link>http://remysharp.com/2013/11/27/using-watches-in-my-devtools-workflow</link><pubDate>Wed, 27 Nov 2013 10:00:23 +0000</pubDate><description><![CDATA[I&#39;ve recently found that I&#39;m able to optimise my workflow inside of devtools
using &quot;Watch Expressions&quot; which I&#39;ve found (for me) is often left untouched.]]></description><content:encoded><![CDATA[
<p>I&#39;ve recently found that I&#39;m able to optimise <a href="http://remysharp.com/2013/07/18/my-workflow-v3-full-coding-stack/">my workflow</a> inside of devtools
using &quot;Watch Expressions&quot; which I&#39;ve found (for me) is often left untouched.</p>
<h2>Using watches</h2>
<p>The video below works through the real example where I&#39;m using watches to get
visual feedback whilst developing.</p>
<iframe width="1280" height="720" src="//www.youtube.com/embed/_gL4FCchTEI?hd=1" frameborder="0" allowfullscreen></iframe>

<h2>The console up/enter workflow</h2>
<p>Typically if I had a bug, I would use the console to re-run my code and check
the result until it worked. Since I&#39;m already editing functional code that&#39;s
being live-updated inside V8 it means my workflow is already pretty slick.</p>
<p><img src="http://remysharp.com/images/watch.gif" style="border:1px solid #999; float:right;margin-left: 5px; margin-bottom: 5px; width: 40%;">But this cursor up, enter workflow can be improved. The code that I&#39;m running in the console can actually be moved to the watch expressions panel.</p>
<h2>Changing my workflow</h2>
<p>With my expression in the watch expressions panel, and whilst I&#39;m still in a <em>paused state</em> of execution in the code, I can go ahead and edit the code directly inside devtools, and each time I hit save on the file, V8 will reload the function in memory, and my watch updates, which gives me a real-time preview of the result. And that&#39;s it. Very neat.</p>
]]></content:encoded></item><item><title>What is codecasting?</title><guid isPermaLink="false">what-is-codecasting</guid><link>http://remysharp.com/2013/11/14/what-is-codecasting</link><pubDate>Thu, 14 Nov 2013 17:59:17 +0000</pubDate><description><![CDATA[Codecasting is the process of recording your coding session, and casting it out to any number of participants, generally in real-time.
JS Bin supports codecasting out of the box, for free, to both registered and anonymous users. Just share your bin&#39;s url with /watch instead of /edit.]]></description><content:encoded><![CDATA[
<p>Codecasting is the process of recording your coding session, and casting it out to any number of participants, generally in real-time.</p>
<p>JS Bin supports codecasting out of the box, for free, to both registered and anonymous users. Just share your bin&#39;s url with <code>/watch</code> instead of <code>/edit</code>.</p>
<h2>My backstory with codecasting</h2>
<p>September 28th 2008 is when <a href="http://remysharp.com/2008/10/06/js-bin-for-collaborative-javascript-debugging/">jsbin was put live for the first time</a>. There&#39;s somewhat of a backstory as to why I created it, and there&#39;s even a precursor site I built. That&#39;s since faded into obscurity.</p>
<p>It was December 2008 I went to visit <a href="http://adactio.com">Jeremy</a> &amp; <a href="http://andybudd.com">Andy</a> at the <a href="http://clearleft.com">Clearleft</a> offices to ask their advice about the first workshop I would run (Iceweb 2008 in Reykjavik, Iceland). I sat down and told them my fantasy would be to use jsbin (<a href="http://www.flickr.com/photos/remysharp/4284906136/">the 2008 version</a>) and anything I typed on my presenter machine, the student could follow along and see the code, and could switch back and forth from the output to the code on their own machine.</p>
<p>I referred to this as Codecasting*.</p>
<p><small>* It was a term that had come naturally to me, and I&#39;m pretty sure I found an entry in Wikipedia way back and felt disappointed I hadn&#39;t invented the term, but now (2013) I look for the wiki page and I can&#39;t find anything. I digress.</small></p>
<p>The problem was streaming and persistent connections were hard (for me) with a <a href="http://en.wikipedia.org/wiki/LAMP_%28software_bundle%29">LAMP</a> stack.</p>
<p>In fact, I did get a <a href="https://github.com/remy/jsbin/tree/e895c32089ac1bd310b5d91aecabda219f2eccea">version working using cometd and the bayeux protocol</a>, and recall testing it with John Resig (partly because jsbin&#39;s simplicity was inspired by his <a href="http://ejohn.org/apps/learn/">Learning Advanced JavaScript site</a>).  It did just about work, but I knew it couldn&#39;t handle a lot of users because Apache would eventually bail.</p>
<p>So I left it.</p>
<p>...until I saw Ryan Dahl present Node.js at jsconf.eu nearly a year later in 2009. Codecasting suddenly was a) easy, and b) JavaSript based.</p>
<h2>Hacking codecasting in to jsbin</h2>
<p>A year later, I built (a still unfinished) <a href="http://forbind.net/">Förbind</a> - as &quot;Sockets as a Service&quot; site. This would be the ground work for adding codecasting to jsbin. In fact, there&#39;s still a link on the homepage to the <a href="http://jsbin.com/edifi3/1/edit">bin</a> that you could enable codecasting with (note that this doesn&#39;t work anymore - because codecasting is now native to jsbin).</p>
<p>In the few days that I built Förbind (a swedish word for join, or as I liked to think: connect), the codecasting was surprisingly stable.</p>
<p>But then my life around that time was hard, and jsbin (version 2) was <a href="https://github.com/remy/jsbin/tree/v2.9.16">still written in PHP</a> and I wanted native support for codecasting. So began the big rewrite of jsbin in the start of 2012.</p>
<p>Here&#39;s a video of the first implementation of codecasting in JS Bin back in late 2010. Note that codecasting wasn&#39;t and isn&#39;t limited to a single browser or single machine, JS Bin&#39;s version could run on multiple machines at once and all different types of browsers (though the Förbind version relied on Socket.IO, the current version doesn&#39;t and it relies entirely on EventSource and polyfilled techniques).</p>
<iframe src="//www.youtube.com/embed/FjusnOgJE_I" frameborder="0" allowfullscreen></iframe>

<h2>Native codecasting in jsbin</h2>
<p>As of version 3 of jsbin, released in June 2012, codecasting is possible out of the box.</p>
<p>Take any bin you&#39;ve created, and instead of /edit in the url, change it to /watch, and any number of participants can watch you live code, and the output will automatically update as they watch.</p>
<p>If you (the owner of the bin) creates a new revision, this update will automatically propagate to the participants and they&#39;ll continue to be able to watch your work.</p>
<p>If the participant wants to create their own copy, they can just create a clone, and now they have a copy from that point in time.</p>
<p><small>This is also referred to as &quot;Professor Mode&quot; for pro users of CodePen (I believe). Codecasting in jsbin will remain free, even after pro users are added.</small></p>
<h2>How it works in jsbin</h2>
<p>Since v3 of jsbin saves pretty much every keystroke, when a save occurs on the server side, it triggers a &quot;ping&quot; event. This is listened to by the <code>EventSource</code> code. The code looks up the bin&#39;s url, and if anyone is listening, it pushes down the new code for that particular panel.</p>
<p>Both the full output views and the codecasting views listening to this EventSource endpoint, and since EventSource can be polyfilled, it works like a charm on all platforms. Simple.</p>
<p>In the future (of JS Bin) codecasts will be recordable and let you play them back (at a later date) and allowing you to add audio, video, annotations and anything else you want to create tutorials and examples of your work.</p>
]]></content:encoded></item><item><title>A self destructive web</title><guid isPermaLink="false">a-self-destructive-web</guid><link>http://remysharp.com/2013/10/22/a-self-destructive-web</link><pubDate>Tue, 22 Oct 2013 12:31:32 +0000</pubDate><description><![CDATA[I&#39;m finding myself more and more nowadays interested in content that self destructs, or rather: expires after time and will no longer exist.
This post is more me dropping my thoughts on a page rather than having fully explored the idea (yet). Please note this post is also unedited (which I may use to my advantage and edit over time...we&#39;ll see).]]></description><content:encoded><![CDATA[
<p>I&#39;m finding myself more and more nowadays interested in content that <a href="https://twitter.com/rem/status/392601422480805888">self destructs</a>, or rather: expires after time and will no longer exist.</p>
<p>This post is more <em>me dropping my thoughts on a page</em> rather than having fully explored the idea (yet). Please note this post is also unedited (which I may use to my advantage and edit over time...we&#39;ll see).</p>
<h2>Saving is &quot;forever&quot;?</h2>
<p>From an early age I&#39;ve played and worked with computers. I always understood that I was creating programs that would be <strong>saved</strong>.</p>
<p>That simple idea of saving, be it to a physical tape (I was a Spectrum user) or fast forward to the 90s when I published my first web pages - it was simply naughts and ones and since it was stored digitally&dagger;, it could be copied over and over. When it was on a server, all it needed is the server to stay plugged in or even cached on another server and boom, you&#39;ve just unlocked <em>forever</em>.</p>
<p><small>&dagger; Sure, the tape drive wasn&#39;t digital, but you&#39;ll forgive me.</small></p>
<p>But the simple fact is: we have to make an effort to preserve. Server drives crash, data gets lost, companies disappear (my first site was on lineone.net if anyone remember that - now long gone), domains expire and people die.</p>
<p>So what is <em>forever</em>? Maybe there&#39;s an unspoken expiry? But when the expiry is in decades I feel like I conflate this with forever. I don&#39;t feel like the web community has been going long enough to see that long expiry showing it&#39;s face. Maybe we&#39;ve got another 20-30 years to go.</p>
<h2>Should it last forever?</h2>
<p>I <em>was</em> just looking at <a href="http://twitter.com/stef">Stef Lewandowski&#39;s</a> tweet about their new hack <a href="http://writing.makeshift.io/pieces/introducing-linkydink">Linkydin</a>. A nice idea, but I was asking myself: surely these links have context in <em>time</em>.</p>
<p>If you&#39;re sharing a group of links in a team, should that information expire? What good is it a year (or more) later to new team members, and in fact could it share old and busted knowledge that&#39;s been superceeded by better information? <em>I don&#39;t know</em>.</p>
<p>Then I read <a href="http://twitter.com/neave">Paul Neave&#39;s</a> post <a href="http://blog.neave.com/post/64669185529/why-i-create-for-the-web">&quot;Why I create for the web&quot;</a> and he boils it down to the humble hyperlink. Except the way I <em>found</em> his post was through a tweet. A tweet that a) I will unlikely find again (because twitter&#39;s archive search is limited) and b) goes <em>through</em> twitter&#39;s own link shortening service. If that service is shut down, then that hyperlink is sent to the grave (note that this isn&#39;t the point of @neave&#39;s post - but it got me thinking).</p>
<p>I recently looked at Snapchat. Content that purposely destroys itself, I can only assume, because it&#39;s relevant for that moment &dagger;. I also remember someone having a blog that would slowly remove all the blog posts one at a time over a period of time (and it would look like the articles were fading out at the bottom of the site).</p>
<p><small>&dagger; Though Snapchat might <a href="http://blog.snapchat.com/post/50060403002/how-snaps-are-stored-and-deleted">not destroy the data on the phone</a> it is actually removed from their server, which, to me, means it&#39;ll expire from existence <em>somehow</em> eventually.</small></p>
<p>I like these later two because they&#39;ve thought specifically about time and how it should be addressed. My own blog, I haven&#39;t thought about time. I haven&#39;t thought about whether it&#39;ll shutdown after I die. I&#39;ve long stopped posting to <a href="http://jqueryfordesigners.com/">jQuery for Designers</a> but I&#39;ll keep the domain renewed...but for how long? </p>
<p><strong>Should sites be retired to the archive.org?</strong></p>
<p>I don&#39;t know. A lot of these questions are why I&#39;ve asked Jeremy Keith to <a href="http://2013.full-frontal.org/#time">speak at Full Frontal</a> whereby he chose the title &quot;Time&quot;. I expect he&#39;ll add a lot of clarity to some of my thoughts, but no doubt raise a good deal of new questions.</p>
<h2>Everything ends</h2>
<p>Everything has an expiry. Nothing lasts forever, but maybe my expectations need to adjust on the web. If something lasts a few years on the web that&#39;s a good thing. If I can get my data out of a web service, then that&#39;s a good thing too (because I&#39;m now responsible for my content, like photos which I care about).</p>
<p>I&#39;m just very interested in seeing more services taking advantage of expiry as a feature. Heck, we buy and own (small) pets because the expiry is a feature! Why don&#39;t we use this more on the web?</p>
]]></content:encoded></item><item><title>A Side View: front end dev conference</title><guid isPermaLink="false">a-side-view-front-end-dev-conference</guid><link>http://remysharp.com/2013/10/17/a-side-view-front-end-dev-conference</link><pubDate>Thu, 17 Oct 2013 11:00:32 +0000</pubDate><description><![CDATA[As the curator of Full Frontal I&#39;m extremely proud of our event and it&#39;s content, and this year we sold out in 11 minutes. 
That was good and bad. The bad being that lots of people missed out.
So I&#39;m running a side event called: Side View on Saturday 9th November in Brighton, UK.
It&#39;s 6 front end sessions for £50+VAT. Frankly I think it&#39;s a steal, but then I get to go free (because I&#39;m running it!).
Full details of each talk and the link to buy tickets is here:
http://2013.full-frontal.org/sideview
I&#39;d love for you to come along, and equally if you can spread the word that would really help. Full Frontal sells out quickly, but getting the word out about a new event is always harder.
Also, we&#39;re still looking for a single sponsor for the event who would get exclusive rights over sponsorship. If you&#39;re interested (or know a company) please get in touch (a contact link is on the page above).
Thanks, and please do spread the word!]]></description><content:encoded><![CDATA[
<p>As the curator of <a href="http://2013.full-frontal.org">Full Frontal</a> I&#39;m extremely proud of our event and it&#39;s content, and this year we sold out in 11 minutes. </p>
<p>That was good <em>and</em> bad. The bad being that lots of people missed out.</p>
<p>So I&#39;m running a side event called: Side View on Saturday 9th November in Brighton, UK.</p>
<p>It&#39;s 6 front end sessions for £50+VAT. Frankly I think it&#39;s a steal, but then I get to go free (because I&#39;m running it!).</p>
<p>Full details of each talk and the link to buy tickets is here:</p>
<p><a href="http://2013.full-frontal.org/sideview"><a href="http://2013.full-frontal.org/sideview">http://2013.full-frontal.org/sideview</a></a></p>
<p>I&#39;d love for you to come along, and equally if you can spread the word that would really help. Full Frontal sells out quickly, but getting the word out about a new event is always harder.</p>
<p>Also, we&#39;re still looking for a single sponsor for the event who would get exclusive rights over sponsorship. If you&#39;re interested (or know a company) please get in touch (a contact link is on the page above).</p>
<p>Thanks, and please do spread the word!</p>
]]></content:encoded></item></channel></rss>